name: MindsDB workflow

on:
  push:
  pull_request:
    branches:
      - stable

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [3.6, 3.7, 3.8]
        token: [not_install_ray]
        include:
          - os: windows-latest
            python-version: 3.7
            token: not_install_ray
          - os: macos-latest
            python-version: 3.7
            token: not_install_ray
          - os: ubuntu-latest
            python-version: 3.8
            token: install_ray

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip==20.2.4
        pip install 'pymssql >= 2.1.4'
        pip install boto3
        pip install --no-cache-dir .
        if [ "$INSTALL_RAY" == "install_ray" ]; then
          echo "$mindsdb_github_masterkey" > ~/github_masterkey
          chmod -R 600 ~/github_masterkey
          export GIT_SSH_COMMAND='ssh -v -i github_masterkey'
          pip install git+ssh://github.com/mindsdb/mindsdb_python_sdk.git
        fi
      shell: bash
      env:
        INSTALL_RAY: ${{ matrix.token }}
        mindsdb_github_masterkey: ${{secrets.mindsdb_github_masterkey}}
    - name: Install dependencies Windows
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          pip install torch==1.7.0+cpu torchvision==0.8.1+cpu -f https://download.pytorch.org/whl/torch_stable.html;
        fi
      shell: bash
      env:
        CHECK_FOR_UPDATES: False
    - name: Install mindsdb_native/staging if it's not mindsdb/stable
      if: github.ref != 'refs/heads/stable'
      run: |
          pip install git+https://github.com/mindsdb/mindsdb_native.git@staging --upgrade --no-cache-dir
          pip install git+https://github.com/mindsdb/lightwood.git@staging --upgrade --no-cache-dir
    - name: Run integration api and flow tests
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          mkdir -p ~/.ssh/
          echo "$DB_MACHINE_KEY" > ~/.ssh/db_machine
          sudo chmod 600 ~/.ssh/db_machine
          echo "$DB_MACHINE_MS_KEY" > ~/.ssh/db_machine_ms
          sudo chmod 600 ~/.ssh/db_machine_ms
          echo "$DATABASE_CREDENTIALS" > ~/.mindsdb_credentials.json
          sudo chmod 644 ~/.mindsdb_credentials.json

          export USE_EXTERNAL_DB_SERVER="1"

          # HTTP
          echo -e "\n===============\ntest HTTP\n===============\n"
          python tests/integration_tests/flows/test_http.py

          # ClickHouse
          echo -e "\n===============\ntest ClickHouse\n===============\n"
          python tests/integration_tests/flows/test_clickhouse.py

          # MsSQL
          echo -e "\n===============\ntest MsSQL\n===============\n"
          python tests/integration_tests/flows/test_mssql.py


          # MongoDB
          #echo -e "\n===============\ntest MongoDB\n===============\n"
          #python tests/integration_tests/flows/test_mongo.py


          # PostgreSQL
          echo -e "\n===============\ntest PostgreSQL\n===============\n"
          python tests/integration_tests/flows/test_postgres.py


          # MySQL
          echo -e "\n===============\ntest MySQL\n===============\n"
          python tests/integration_tests/flows/test_mysql.py


          # MariaDB
          echo -e "\n===============\ntest MariaDB\n===============\n"
          python tests/integration_tests/flows/test_mariadb.py

          # Cutsom model
          # echo -e "\n===============\ntest Cutsom model\n===============\n"
          # python tests/integration_tests/flows/test_custom_model.py


          # user flow 1
          echo -e "\n===============\ntest user flow 1\n===============\n"
          python tests/integration_tests/flows/test_user_flow_1.py


          # user flow 2
          echo -e "\n===============\ntest user flow 2\n===============\n"
          python tests/integration_tests/flows/test_user_flow_2.py


          # flow with mistakes
          echo -e "\n===============\nflow with mistakes\n===============\n"
          python tests/integration_tests/flows/test_mistakes.py


        fi
      shell: bash
      env:
        CHECK_FOR_UPDATES: False
        DB_MACHINE_KEY: ${{secrets.DB_MACHINE_KEY}}
        DB_MACHINE_MS_KEY: ${{secrets.DB_MACHINE_MS_KEY}}
        DATABASE_CREDENTIALS: ${{secrets.DATABASE_CREDENTIALS}}
        AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}

  deploy_to_pypi:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/stable' && github.actor != 'mindsdbadmin'
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - name: Build and publish
      env:
        TWINE_USERNAME:  __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist
        twine upload dist/*
    - name: Install latest version from pypi to see that all is working
      run: |
        sleep 20
        pip install mindsdb

  deploy_version_file:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/stable' && github.actor != 'mindsdbadmin'
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'
    - name: Deploy version files
      run: |
        python deploy_version.py beta

    - name: Sync linux sh installer to s3
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks
      env:
        AWS_S3_BUCKET: 'mindsdb-installer'
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'us-west-2'
        SOURCE_DIR: 'distributions/ver/dist'
        DEST_DIR: 'mindsdb-installer/ver'
