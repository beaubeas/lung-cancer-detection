name: MindsDB workflow

on: [push, pull_request]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest]
        # python-version: [3.6, 3.7, 3.8]
        python-version: [3.6]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --no-cache-dir .
    - name: Install mindsdb_native/staging if it's not mindsdb/stable
      if: github.ref != 'refs/heads/stable'
      run: |
          pip install git+https://github.com/mindsdb/mindsdb_native.git@staging --upgrade --no-cache-dir
          pip install git+https://github.com/mindsdb/lightwood.git@staging --upgrade --no-cache-dir
    - name: Run integration api and flow tests
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          mkdir -p ~/.ssh/
          echo "$DB_MACHINE_KEY" > ~/.ssh/db_machine
          sudo chmod 600 ~/.ssh/db_machine
          # echo "$DATABASE_CREDENTIALS" > ~/.mindsdb_credentials.json
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ~/.ssh/db_machine ubuntu@3.220.66.106:/home/ubuntu/mindsdb_server_enterprise/database_testing_env/credentials.json ~/.mindsdb_credentials.json
          sudo chmod 644 ~/.mindsdb_credentials.json
          pip install -r requirements_test.txt

          ssh -i ~/.ssh/db_machine -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -fN -L 127.0.0.1:5005:127.0.0.1:5005 ubuntu@3.220.66.106

          # PostgreSQL
          export MINDSDB_PORT=$(curl http://127.0.0.1:5005/port)
          ssh -i ~/.ssh/db_machine -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -fN -R 127.0.0.1:$MINDSDB_PORT:127.0.0.1:$MINDSDB_PORT ubuntu@3.220.66.106
          echo -e "\n=== *** === *** ===\ntest PostgreSQL, port=$MINDSDB_PORT\n=== *** === *** ===\n"
          python tests/integration_tests/flows/test_postgres.py

          # MySQL
          export MINDSDB_PORT=$(curl http://127.0.0.1:5005/port)
          ssh -i ~/.ssh/db_machine -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -fN -R 127.0.0.1:$MINDSDB_PORT:127.0.0.1:$MINDSDB_PORT ubuntu@3.220.66.106
          echo -e "\n=== *** === *** ===\ntest MySQL, port=$MINDSDB_PORT\n=== *** === *** ===\n"
          python tests/integration_tests/flows/test_mysql.py

          # MariaDB
          export MINDSDB_PORT=$(curl http://127.0.0.1:5005/port)
          ssh -i ~/.ssh/db_machine -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -fN -R 127.0.0.1:$MINDSDB_PORT:127.0.0.1:$MINDSDB_PORT ubuntu@3.220.66.106
          echo -e "\n=== *** === *** ===\ntest MariaDB, port=$MINDSDB_PORT\n=== *** === *** ===\n"
          python tests/integration_tests/flows/test_mariadb.py

          # ClickHouse
          export MINDSDB_PORT=$(curl http://127.0.0.1:5005/port)
          ssh -i ~/.ssh/db_machine -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -fN -R 127.0.0.1:$MINDSDB_PORT:127.0.0.1:$MINDSDB_PORT ubuntu@3.220.66.106
          echo -e "\n=== *** === *** ===\ntest ClickHouse, port=$MINDSDB_PORT\n=== *** === *** ===\n"
          python tests/integration_tests/flows/test_clickhouse.py

          # Cutsom model
          export MINDSDB_PORT=$(curl http://127.0.0.1:5005/port)
          ssh -i ~/.ssh/db_machine -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -fN -R 127.0.0.1:$MINDSDB_PORT:127.0.0.1:$MINDSDB_PORT ubuntu@3.220.66.106
          echo -e "\n=== *** === *** ===\ntest Cutsom model, port=$MINDSDB_PORT\n=== *** === *** ===\n"
          python tests/integration_tests/flows/test_custom_model.py

          python tests/integration_tests/api/test_http.py
        fi
      shell: bash
      env:
        DB_MACHINE_KEY: ${{secrets.DB_MACHINE_KEY}}
        DATABASE_CREDENTIALS: ${{secrets.DATABASE_CREDENTIALS}}
    # - name: Run integration api and flow tests
    #   run: |
    #     if [ "$RUNNER_OS" == "Linux" ]; then
    #       cd tests/docker
    #       docker-compose -f docker-compose.yml up -d
    #       cd ../..
    #       pip install -r requirements_test.txt
    #       # maybe use TestSuite addTest
    #       python tests/integration_tests/flows/test_custom_model.py
    #       python tests/integration_tests/flows/test_clickhouse.py
    #       python tests/integration_tests/flows/test_mariadb.py
    #       python tests/integration_tests/flows/test_mysql.py
    #       python tests/integration_tests/flows/test_postgres.py
    #       python tests/integration_tests/flows/test_mongo.py
    #       sleep 61
    #       python tests/integration_tests/api/test_http.py
    #       cd tests/docker
    #       docker-compose down
    #     fi
    #   shell: bash
    #   env:
    #     CHECK_FOR_UPDATES: False

  deploy_windows_installer:
    runs-on: windows-latest
    needs: test
    if: github.ref == 'refs/heads/stable' && github.actor != 'mindsdbadmin'
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip

    - name: Build windows installer
      run: |
        pip install pyinstaller
        pip install winshell
        python distributions/windows/build_installers.py

    - name: Sync windows installer to s3
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks
      env:
        AWS_S3_BUCKET: 'mindsdb-installer'
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'us-west-2'
        SOURCE_DIR: 'distributions/windows/dist'
        DEST_DIR: 'mindsdb-installer/windows'

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/stable' && github.actor != 'mindsdbadmin'
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.7'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine

    - name: Build and publish
      env:
        TWINE_USERNAME:  __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist
        twine upload dist/*

    - name: Build and push mindsdb Docker image
      uses: docker/build-push-action@v1
      with:
        dockerfile: distributions/docker/Dockerfile
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: mindsdb/mindsdb
        tag_with_ref: true

    - name: Rename linux installer
      run: |
        python distributions/linux/rename_installer.py

    - name: Sync linux installer to s3
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks
      env:
        AWS_S3_BUCKET: 'mindsdb-installer'
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'us-west-2'
        SOURCE_DIR: 'distributions/linux/dist'
        DEST_DIR: 'mindsdb-installer/linux'
