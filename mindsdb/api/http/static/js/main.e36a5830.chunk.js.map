{"version":3,"sources":["assets/mindsdb-logo.svg","components/config/styles.js","utils/mixpanel.js","config.js","components/config/cloudAuth/gitHubButton/index.js","store/connection.js","store/config.js","components/config/cloudAuth/styles.js","components/config/cloudAuth/index.js","components/ui/Colors.js","components/ui/Fonts.js","components/ui/TittleBar/styles.js","components/ui/TittleBar/index.js","components/ui/StatusBar/styles.js","components/ui/StatusBar/index.js","components/ui/darkMode/index.js","components/inputText/index.js","components/config/index.js","components/ui/mindsDataTable/mindsPaginator/pageLinks/index.js","components/ui/mindsDataTable/mindsPaginator/index.js","components/ui/mindsDataTable/tableBottomSelector/styles.js","components/ui/mindsDataTable/tableBottomSelector/index.js","components/ui/mindsDataTable/index.js","components/datasources/urlWin/index.js","components/datasources/uploadWin/index.js","components/datasources/deleteWin/index.js","utils/funcs.js","components/common/emptyPage/index.js","store/dataSource.js","store/dataSourceQuality.js","store/predictor.js","store/navigation.js","components/datasources/index.js","components/ui/NotificationMsg/styles.js","components/ui/NotificationMsg/index.js","components/databases/newDbConnection/styles.js","components/databases/newDbConnection/index.js","components/databases/newDataset/styles.js","components/databases/newDataset/index.js","components/databases/index.js","components/ui/Breadcrumbs/styles.js","components/ui/Breadcrumbs/index.js","components/dataSourcePreview/index.js","components/ui/warningMark/styles.js","components/ui/warningMark/index.js","components/ui/Loading/index.js","utils/flagsDictionary.js","components/predictorDataQuality/dataQualityTargetColumn/graphOptions.js","components/predictorDataQuality/dataQualityTargetColumn/styles.js","context/index.js","HOC/withContext.js","components/predictorDataQuality/dataQualityTargetColumn/interfaceView.js","components/ui/Bar/index.js","components/ui/TreeMap/index.js","components/predictorDataQuality/dataQualityTargetColumn/index.js","components/common/mindsPanel/styles.js","components/common/mindsPanel/index.js","components/dataSourceQuality/index.js","components/ui/CalendarInput/index.js","components/common/simpleTable/index.js","components/predictors/newPredictorWin/advancedMode.js","components/predictors/newPredictorWin/index.js","store/dataSources.js","components/predictors/uploadWin/index.js","components/predictors/index.js","components/ui/HorizontalBar/index.js","components/ui/PredictorPie/styles.js","components/ui/PredictorPie/index.js","components/predictorView/trainingInfo/index.js","components/predictorView/columnImportance/index.js","components/ui/ConfusionMatrix/index.js","components/common/utils/ErrorBoundary.js","components/predictorView/index.js","components/predictorDataQuality/index.js","components/query/newQuery/index.js","components/ui/QueryPie/styles.js","components/ui/QueryPie/index.js","components/ui/SubTitle/styles.js","components/ui/SubTitle/index.js","components/query/queryResult/index.js","store/predictors.js","components/query/index.js","components/ui/Button/styles.js","components/ui/Button/index.js","components/ui/SidebarContent/styles.js","components/ui/SidebarContent/index.js","components/menuItems/index.js","components/mindsMenu/styles.js","components/mindsMenu/index.js","components/main/index.js","components/main/menuItems.js","components/updater/index.js","context/initialState/sidebarContent.js","context/state.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","InputBlock","styled","div","mixpanel","init","Mixpanel","identify","id","alias","track","name","props","console","log","people","set","GitHubButton","className","type","onClick","icon","label","disabled","defaultProps","ConnectionStore","connected","checkIntervalId","url","params","this","disconnect","MindsDB","connect","ping","runInAction","setInterval","checkConnection","clearInterval","connectionCheck","decorate","observable","action","ConfigStore","config","localServerStatus","installed","installing","starting","running","waitingLocalServerStatusUpdate","maxLogLength","goodPythonVersion","cloudUrl","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","logPart","push","length","slice","newConfig","undefined","apikey","localStorage","getItem","key","value","connectionStore","Object","assign","updateConfig","waitLocalServerStatusUpdate","appendLog","saveConfig","isGoodPython","computed","LoginContainer","InputContainer","Title","input","span","ServerButtons","CreateAccountContainer","InputTitle","LogoutContainer","CloudAuth","observer","state","stage","status","email","password","confirmPassword","passwordVisible","confirmPasswordVisible","emailBlured","passwordBlured","confirmPasswordBlured","passwordInputRef","confirmPasswordInputRef","signUpButtonRef","logInButtonRef","setFieldValue","e","target","setState","getIdToken","Promise","resolve","reject","firebase","currentUser","then","idToken","catch","err","cloudLogin","jwt","a","cloudApi","post","response","data","testPing","token","get","timeout","onGitHubLogin","onSetLoading","signInWithPopup","gitHubProvider","setItem","JSON","stringify","provider","login","additionalUserInfo","username","establishConnect","success","awaitState","error","message","setPasswordInputRef","r","setConfirmPasswordInputRef","setSignUpButtonRef","setLogInButtonRef","newState","resp","onConnect","onEnter","keyCode","element","focus","isEmailCorrect","test","String","toLowerCase","isPasswordCorrect","replace","isPasswordsSame","onLogin","signInWithEmailAndPassword","onSignUp","createUserWithEmailAndPassword","togglePasswordVisible","s","toggleConfirmPasswordVisible","setBlured","goToLoginStage","goToRegistrationStage","goToGithub","preventDefault","onDisconnect","GithubAuthProvider","axios","create","baseURL","configStore","lastLogin","parse","prevProps","_prevState","loading","placeholder","onKeyUp","onChange","onBlur","ref","tabIndex","href","role","Component","Colors","black","white","mirage","green","slateGrey","gray","selectedBreacump","primaryBar","hoverBar","watermelon","yellow","BlackPie","Rubik","Karla","HeaderTittle","TitleBar","children","statusColors","Connected","Installing","Installed","Running","Starting","Disconnected","disconnected","StatusText","LabelText","marginLeft","marginTop","fontFamily","fontSize","fontWeight","color","StatusBar","isconnected","serverType","serverStatus","serverStatusText","DarkMode","useState","darkMode","setDarkMode","darkModeHandle","checked","document","getElementsByTagName","style","filter","useEffect","InputText","Config","pypath","msgFilter","validUrl","configUpdateTimeout","clearTimeout","setTimeout","isValidUrl","dataSourcesStore","reset","predictorsStore","onRunLocalServer","onStopLocalServer","onInstallLocalServer","onDeleteLocalServer","onChangeServerType","defaultServerType","onPythonDownloadClick","selectFilter","index","indexOf","newValues","splice","openLink","onCloudConnected","setLoading","margin","flex","display","height","overflow","width","severity","text","reduce","prev","_next","reverseIndex","reverseElement","terminalDiv","getElementById","colorMessage","includes","scrollTop","scrollHeight","sort","b","PageLinks","page","onPageLinkClick","event","pageLink","originalEvent","map","_i","pageClassName","classNames","MindsPaginator","alwaysShow","getPageCount","paginatorElements","changePageToFirst","isFirstPage","changePageToPrev","updatePageLinks","getPage","changePageToNext","isLastPage","changePageToLast","leftContent","Paginator","TableBottomSelector","options","onSelect","option","selected","toUpperCase","MindsDataTable","position","totalRecords","_data","rows","getRows","rowsPerPageOptions","rangeSelector","parseInt","onPageChange","first","pageCount","Math","ceil","getFirst","pageLinkSize","template","paginatorTemplate","currentPageReportTemplate","rightContent","paginatorRight","alwaysShowPaginator","loader","resizableColumns","responsive","columnResizeMode","virtualScroll","scrollable","autoLayout","selectionMode","paginator","paginatorPosition","header","footer","reorderableColumns","frozenHeaderColumnGroup","frozenFooterColumnGroup","headerColumnGroup","footerColumnGroup","tableStyle","tableClassName","headerHeight","processData","columns","getColumns","getTotalRecords","paginatorTop","createPaginator","paginatorBottom","headerFacet","footerFacet","resizeHelper","el","resizerHelper","tableContent","resizeIndicatorUp","reorderIndicatorUp","resizeIndicatorDown","reorderIndicatorDown","renderLoader","Array","isArray","frozenSelectionMode","getFrozenSelectionModeInColumn","frozenView","scrollableView","frozenColumns","getFrozenColumns","scrollableColumns","getScrollableColumns","createScrollableView","tableHeader","createTableHeader","tableBody","createTableBody","tableFooter","createTableFooter","table","paddingTop","container","DataTable","UrlWin","importing","onShow","onAdd","ds","DataSource","uploadFromUrl","onHide","invalid","visible","modal","mode","UploadWin","file","uploading","percentCompleted","onUpload","upload","onUploadProgress","Sentry","onPickFile","files","emptyCls","fileTitle","unit","title","maxLength","DeleteWin","onDelete","wrapHistXY","histData","x","y","val","list","j","isNaN","parseFloat","toFixed","k","qualityWarnings","unique","empty","bias","outliers","typing","detectDataType","data_type","unique_values","empty_percentage","entropy","outlier_buckets","filterAxisData","source","item","hasOwnProperty","utcStringToUSDateTimeString","str","Date","toLocaleDateString","toLocaleTimeString","getMid","range","floatRange","floor","floorIndex","ceilIndex","minValue","min","maxValue","max","toString","messageNotification","messages","msg","sticky","show","summary","detail","EmptyPage","noneBorder","topMessage","customIcon","bottomMessage","isHasButton","customBtnPosition","inProgressText","inProgressTextLink","inProgressLink","DataSourceStore","dataSource","dataSourceId","fields","total","filters","loaded","loadTimeout","updatePage","load","reload","updateSort","sortField","sortOrder","updateFilter","keys","accum","fieldName","setDataSource","getTableQueryParams","loadData","i","newKey","rowcount","getTime","forEach","field","DataSourceQualityStore","dataSourceName","analyzeStatus","loadDataQuality","dataQuality","PredictorStore","predictor","loadPreview","NavigationStore","queryPredictorName","predictorDataQualityCol","dataSourceStore","predictorStore","predictorName","col","setStage","openDataPreview","openDataQuality","openPredictor","openQuery","openPredictorDataQuality","Datasources","urlWinVisible","uploadWinVisible","deleteWinVisible","deletingName","thWidths","thHeight","interval","onResize","row","wrapperRef","querySelector","getClientRects","getBoundingClientRect","fileReadingPromises","onFileReaded","args","Blob","datasourceName","uploadFile","column","columnName","rowIndex","extension","promiseName","hideUrlWin","needReload","showUrlWin","hideUploadWin","newDataSourceName","newDS","getByName","Error","constructor","loadMissedFileList","missedFileList","path","showUploadWin","showDeleteWin","hideDeleteWin","actionTemplate","rowData","stopPropagation","navigation","download","source_type","onDeleteDatasource","delete","onSelectionChange","dtTemplate","sourceTemplate","v","split","resizeObserver","ResizeObserver","mutationObserver","MutationObserver","observe","childList","subtree","class","body","sortable","headerStyle","maxWidth","textAlign","paddingBottom","MSG","Messages","NotificationMsg","refElement","QuestionsContainer","NeoDBConnectionWin","isEdit","showMessage","setType","formSchema","Yup","shape","user","required","host","DatabaseName","port","typeError","positive","initialValues","database_name","validationSchema","onSubmit","values","enabled","DataBase","htmlFor","component","RowContainer","ColContainer","QueryContainer","ButtonsContainer","CreateDB","code","setCode","statusDatabase","setStatusDatabase","db_name","createDataSet","query","integration_id","newDataset","testDatabase","check","onValueChange","jsSample","highlight","languages","sql","padding","cols","Databases","addDBWinVisible","setAddDBWinVisible","showCreateDB","setShowCreateDB","dbList","setDbList","setMessages","setIsEdit","loadDBList","dbResponse","resDatabases","ps","removeDB","Breadcrumb","BreadcrumbItem","Breadcrumbs","goToDatasources","actualSite","AditionalItemGoto","AditionalItemName","DataSourcePreview","onDataSortChange","onFilterChange","dynamicColumns","data-title","dt","lazy","onPage","onSort","onFilter","emptyMessage","WarningContainer","WarningMark","Loading","iconMessage","flagsDictionary","Unknown","flag","default","da","en","sv","ro","af","fr","de","sl","no","ca","es","et","so","it","pt","pl","cy","hr","getLanguageFlags","lang","TargetColumnTitle","h1","InterfaceContainer","ItemRow","Content","p","OutliersValues","TextContainer","GeneralContext","createContext","WithContext","Consumer","context","InterfaceView","warnings","column_name","avg_words_per_sentence","lang_dist","enterAction","content","sidebarContent","setAnyValue","$set","paragraph","description","leaveAction","onMouseEnter","onMouseLeave","data_subtype","empty_cells","Number","isInteger","join","getOutliers","warning","idx","withContext","ToolTip","NivoBar","tooltipTitle","animate","typeValues","indexBy","fillType","yLabelSymbol","defs","background","size","stagger","rotation","lineWidth","spacing","fill","match","colors","top","right","bottom","left","labelSkipWidth","labelSkipHeight","tooltip","enableGridX","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","tickValues","arr","axisLeft","format","labelTextColor","from","modifiers","enableLabel","motionStiffness","motionDamping","NivoTreeMap","root","theme","tile","identity","innerPadding","outerPadding","labelSkipSize","scheme","borderWidth","borderColor","ArrowsContainer","DataQualityTargetColumn","dataIndex","setDataIndex","actual","setActual","data_analysis_v2","reponseData","dataType","chartData","labels","labelsGrouped","innerGroup","isNumerical","isCategorical","abs","fullLength","newLastOutlierItem","formatData","dataResponse","percentage","fixedPercentage","isOutlier","find","outlier","actualLabel","orderBy","datasets","backgroundColor","hoverBackgroundColor","hoverBorderColor","generateDataSet","splicedFormatData","splicedLabels","hasMultiple","paddingRight","bar","textData","word_dist","word","loc","transformTextData","score","TabContainer","SpanTab","MindsPanel","collapsed","sectionName","toggleable","columnMetadata","noRepeat","toggleIcon","renderToggleIcon","toggle","warningsLength","Panel","DataSourceQuality","dataSourceQualityStore","currentStatus","loadingProps","dataQualityTargetColumns","targetColumnsMetadata","CalendarInput","onChangeDate","dateValue","setDateValue","amPmAriaLabel","calendarAriaLabel","clearAriaLabel","dayAriaLabel","hourAriaLabel","maxDetail","minuteAriaLabel","monthAriaLabel","nativeInputAriaLabel","SimpleTable","selectedValues","dataTable","onSearchBar","searchText","onSelectRow","useDeleteIcon","disableCheck","validateChecked","checkedValue","setExtraFieldValue","onExtraFieldChange","extraFieldValue","setDateExtraFieldValue","_prevProps","newOptions","newValue","oldOptions","oldValue","searchIconStyles","showExtraFields","getOptions","distribution","unshift","React","validateRequired","AdvancedMode","marginOfError","stopTrainingAfter","backend","useGpu","removeForTrainingFields","onChecked","flexFlow","keyfilter","inputId","marginRight","NewPredictorWin","predictedFields","showAdvancedMode","optionalAnalysis","selectDataSource","onTrain","toPredict","Predictor","dataToLearn","fieldsToIgnore","ignore","predict","kwargs","use_gpu","ignore_columns","sample_settings","sample_margin_of_error","stop_training_in_x_seconds","learn","isInvalidMarginOfError","decimal","dropdownOptions","getFields","predicted","DatasourcesStore","dataSources","opts","showFileErrorMessage","accept","Predictors","newPredictorWinVisible","onDownload","hideNewPredictorWin","showNewPredictorWin","_column","fieldsTemplate","accuracyTemplace","statusTemplate","elapsed","startDate","Moment","created_at","duration","diff","utc","asMilliseconds","HorizontalBar","legendTop","layout","enableGridY","enableSlicesLabels","d","legends","PieContainer","Info","InfoConfidence","Pie","confidenceInterval","infoData","infoDatatext2","endAngle","mtop","mleft","pieColor","innerRadius","padAngle","cornerRadius","radialLabelsSkipAngle","fit","radialLabelsTextXOffset","radialLabelsTextColor","radialLabelsLinkOffset","radialLabelsLinkDiagonalLength","enableRadialLabels","slicesLabelsSkipAngle","slicesLabelsTextColor","isInteractive","TrainingInfo","dataPreparation","accuracy","nivoPars","importance","importanceColor","Test","Description","Training","barColors","dataAcuracy","trainingData","ColumnImportance","rawImportance","pieData","ContainerToolTips","TootltipSquare","ConfMatrix","dataKeys","hoverEvent","onHover","cellShape","opacity","textColor","onLeave","isMiddle","xKey","yKey","cell","animatedProps","useSpring","transform","xOffset","yOffset","g","cursor","predictedField","validColumn","onMouseMove","rect","strokeWidth","stroke","strokeOpacity","dominantBaseline","textAnchor","dy","forceSquare","hoverTarget","orient","cellOpacity","cellBorderColor","cellHoverOthersOpacity","ErrorBoundary","hasError","errorInfo","fullScreen","fullPosition","contentHeight","explantionData","contentBodyRef","goToPredictors","goToPredictorDataQuality","setBodyResizeSubscribe","targetDataTypes","next","trainingInfoData","model","accurate","sectionTitleName","model_analysis","packBand","matrix","real","tableData","pack","count","ii","jj","_el","result","_fieldName","columnIndex","getDataByBuckets","columnsSums","normalizeDataConfMatrix","marginBottom","wrapNotes","notes","objectNotes","objectStatus","DataQuality","inputColumnsMetadata","dataQualityInputColumns","NewQuery","predictorFields","otherFields","conditions","checkedFields","setPredictor","getOptionColumns","allColumns","onChangePredictor","onRunQuery","predictorObj","when","cond","addQuery","toGet","pridictorName","queryPredict","fullResult","updateQuery","preselectedPredictorName","selectedIndex","findIndex","allFields","predictorData","columnsMetadata","columnItem","importance_score","sortBy","reverse","setConditions","removeCondition","existingCondition","newConditions","hasEmptyConditions","minWidth","is_target_column","radialLabelsLinkHorizontalLength","radialLabelsLinkStrokeWidth","radialLabelsLinkColor","h3","Subtitle","QueryResult","headerSub","isVisibleImportant_missing","ifMissing","donutChartRender","explanation_text","extra_insights_data","important_missing_information_output","predicted_value","confidence","extra_insights","explanation","important_missing_information","confidence_interval","if_missing","dataPie","intervalExplanation","variable","deleteQuery","boxColumnTemplate","PredictorsStore","queries","loadPromise","pridictor","loadColumns","loadResolve","predictors","Query","newQueryVisible","showNewQuery","hideNewQuery","queryResults","buttonStylesType","start","css","help","CustomButton","button","stylesType","lightGreen","getBackgroungColor","backgroundColorHover","fillIconColorHover","fillIconColor","ButtonComponent","callback","ariaLabel","Icon","aria-label","SidebarContainer","MenuItem","items","onMenuClick","active","src","alt","SeparationDiv","Img","img","HelpButton","MindsMenu","classUl","mindsdblogo","Main","goToConnect","emptyBlock","justifyContent","alignItems","flexDirection","version","menuItems","queryPanelRef","Updater","checking","available","downloaded","downloading","progress","updateUrl","confirmInstallWindowVisible","confirmDownloadWindowVisible","onStartDownload","onStartInstall","showInstallWindow","hideInstallWindow","showDownloadWindow","hideDownloadWindow","closeErrorMessage","appendTo","states","update","window","dsn","environment","configure","enforceActions","App","mounted","setGrowlRef","Provider","Boolean","location","hostname","defaults","global","defaultFontFamily","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e36a5830.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mindsdb-logo.770b9ba0.svg\";","import styled from '@emotion/styled';\n\nexport const InputBlock = styled.div`\n  margin-right: 20px;\n  margin: 11% auto;\n  width: 570px;\n  input {\n    height: 40px;\n    border-radius: 5px;\n    border: solid 1px #e1e1e1;\n    background-color: #ffffff;\n    padding: 10px;\n    font-size: 1em;\n    color: #34363e;\n    min-width: 570px;\n    transition: all 0.3s ease-in-out;\n    &:focus {\n      outline: 0;\n      border-color: rgba(42, 182, 115, 0.8);\n      box-shadow: $focus-shadow;\n    }\n\n    &:disabled {\n      color: #c0c0c0;\n    }\n  }\n\n`;\n","import mixpanel from 'mixpanel-browser';\nimport { mixpanelKEY } from '../config';\n\nmixpanel.init(mixpanelKEY);\n\nlet env_check = process.env.NODE_ENV === 'production';\nlet actions = {\n  identify: (id) => {\n    if (env_check) {\n      mixpanel.identify(id);\n    }\n  },\n  alias: (id) => {\n    if (env_check) {\n      mixpanel.alias(id);\n    }\n  },\n  track: (name, props) => {\n    console.log('traking: ', name);\n    if (env_check) {\n      mixpanel.track(name, props);\n    }\n  },\n  people: {\n    set: (props) => {\n      if (env_check) {\n        mixpanel.people.set(props);\n      }\n    },\n  },\n};\n\nexport let Mixpanel = actions;\n","export const mixpanelKEY = '176f69fc099f8e59522fac05c02d5939';export const environment = 'Staging';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'primereact/button';\nimport './index.scss';\n\nconst GitHubButton = (props) => (\n  <Button\n    className=\"minds-action-btn github-button\"\n    type=\"button\"\n    onClick={ props.onClick }\n    icon=\"fab fa-github\"\n    label={ props.label }\n    disabled={ props.disabled }\n  />\n);\n\nGitHubButton.propTypes = {\n  onClick: PropTypes.func,\n  label: PropTypes.string,\n  disabled: PropTypes.bool\n};\n\nGitHubButton.defaultProps = {\n  onClick: () => {},\n  label: 'LOG IN WITH GITHUB',\n  disabled: false\n};\n\n\nexport default GitHubButton;\n","import { observable, action, runInAction, decorate } from 'mobx';\nimport MindsDB from 'mindsdb-js-sdk';\n\nclass ConnectionStore {\n  connected = false;\n  checkIntervalId = null;\n  url = 'http://localhost:47334';\n\n  async connect(url, params) {\n    if (this.connected === true) {\n      this.disconnect();\n    }\n\n    this.params = params;\n    MindsDB.connect(url, this.params);\n    let connectionCheck = false;\n\n    try {\n      connectionCheck = await MindsDB.ping(this.params);\n    } catch (e) {\n      connectionCheck = false;\n    }\n\n    // if (connectionCheck === true) {\n      runInAction(() => {\n        this.connected = true;\n        this.url = url;\n        this.checkIntervalId = setInterval(() => {\n          this.checkConnection(this.params);\n        }, 10000);\n        // NOTE can be problems if ping query will longer than timeout\n      });\n    // } else {\n    //   window.growl.show({ severity: 'error', summary: 'error', detail: 'Connection failed' });\n    //   this.disconnect();\n    // }\n  }\n\n  disconnect() {\n    if (this.checkIntervalId != null) clearInterval(this.checkIntervalId);\n    MindsDB.disconnect();\n    this.connected = false;\n  }\n\n  async checkConnection(params) {\n    let connectionCheck = false;\n    try {\n      connectionCheck = await MindsDB.ping(params);\n    } catch (e) {\n      connectionCheck = false;\n    }\n    if (connectionCheck !== true) this.disconnect();\n  }\n}\n\ndecorate(ConnectionStore, {\n  connected: observable,\n  url: observable,\n  connect: action,\n  disconnect: action,\n  checkConnection: action,\n});\n\nexport default new ConnectionStore();\n","import { observable, computed, action, decorate } from \"mobx\";\nimport connectionStore from \"./connection\";\n\n// const ipcRenderer = require(\"electron\").ipcRenderer;\n\nclass ConfigStore {\n  config = {\n    localServerStatus: {\n      installed: false,\n      installing: false,\n      starting: false,\n      running: false,\n    },\n    waitingLocalServerStatusUpdate: false,\n  };\n\n  log = [];\n\n  maxLogLength = 500;\n\n  goodPythonVersion = \"3.6\";\n\n  cloudUrl = \"https://cloud.mindsdb.com\";\n\n  firebaseConfig = {\n    apiKey: \"AIzaSyCIVNYLF-8_yUn8Qxxl4jL0TFJq3HOEmD0\",\n    authDomain: \"mindsdb-cloud.firebaseapp.com\",\n    databaseURL: \"https://mindsdb-cloud.firebaseio.com\",\n    projectId: \"mindsdb-cloud\",\n    storageBucket: \"mindsdb-cloud.appspot.com\",\n    messagingSenderId: \"18876219561\",\n    appId: \"1:18876219561:web:6fa6992c7ef192dc8869b8\",\n    measurementId: \"G-Q6LG33G7SP\",\n  };\n\n  constructor() {\n    // ipcRenderer.on(\"config\", (_e, data) => {\n    //   this.updateConfig(data);\n    // });\n\n    // ipcRenderer.on(\"local-server-log\", (_e, data) => {\n    //   this.appendLog(data);\n    // });\n  }\n\n  waitLocalServerStatusUpdate() {\n    this.config.waitingLocalServerStatusUpdate = true;\n  }\n\n  appendLog(logPart) {\n    this.log.push(logPart);\n    if (this.log.length > this.maxLogLength) {\n      this.log = this.log.slice(this.log.length - this.maxLogLength);\n    }\n  }\n\n  updateConfig(newConfig) {\n    if (newConfig.localServerStatus !== undefined) {\n      this.config.waitingLocalServerStatusUpdate = false;\n      if (\n        this.config.localServerStatus.running === false &&\n        newConfig.localServerStatus.running === true\n      ) {\n        const apikey = localStorage.getItem(\"apikey\");\n\n        const params = [{ key: \"apikey\", value: apikey ? apikey : undefined }];\n        connectionStore.connect(\"http://localhost:47334\", params);\n      }\n\n      if (\n        this.config.localServerStatus.running === true &&\n        newConfig.localServerStatus.running === false\n      ) {\n        connectionStore.disconnect();\n      }\n    }\n\n    Object.assign(this.config, newConfig);\n  }\n\n  saveConfig(newConfig) {\n    this.updateConfig(newConfig);\n    // ipcRenderer.send(\"save-config\", newConfig);\n  }\n\n  get isGoodPython() {\n    // compare vith '3.6'\n    // if (this.config.python.isPython) {\n    //   const goodPythonVersion = this.goodPythonVersion.split(\".\");\n    //   const splitted = this.config.python.version.split(\".\");\n    //   if (splitted.length < 2) return false;\n    //   if (parseInt(splitted[0], 10) < goodPythonVersion[0]) return false;\n    //   if (parseInt(splitted[1], 10) < goodPythonVersion[1]) return false;\n    //   return true;\n    // }\n    return false;\n  }\n}\n\ndecorate(ConfigStore, {\n  config: observable,\n  log: observable,\n  waitLocalServerStatusUpdate: action,\n  appendLog: action,\n  updateConfig: action,\n  saveConfig: action,\n  isGoodPython: computed\n});\n\nexport default new ConfigStore();\n","import styled from '@emotion/styled';\n\nexport const LoginContainer = styled.div`\n\tdisplay: grid;\n\talign-content: center;\n\tjustify-content: center;\n\tposition: relative;\n\tborder-radius: 5px;\n\tbox-shadow: 4px 4px 11px -7px rgba(0, 0, 0, 0.8);\n\tborder: solid 1px rgba(93, 105, 112, 0.3);\n\theight: 57vh;\n\twidth: 540px;\n\tmargin: 0 auto;\n`;\n\nexport const InputContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n\tflex-flow: column;\n\twidth: 400px;\n\tmargin: 10px 0;\n\tinput {\n\t\twidth: 100%;\n\t}\n`;\n\nexport const Input = styled.input`\n\theight: 29px;\n\tborder-radius: 5px;\n\tbox-shadow: 2px 2px 6px -3px rgba(0, 176, 109, 0.8);\n\tborder: solid 1px rgba(0, 176, 109, 0.3);\n\tmargin-bottom: 15px;\n`;\n\nexport const Title = styled.span`\n\tdisplay: flex;\n\talign-items: center;\n\tcolor: #2c263f;\n\tfont-family: \"Rubik Medium\";\n\tfont-size: 36px;\n\tfont-weight: 500;\n\tfont-stretch: normal;\n\tfont-style: normal;\n\tline-height: normal;\n\tletter-spacing: normal;\n\tleft: 25px;\n\tposition: absolute;\n\ttop: 22px;\n\tright: 25px;\n`;\n\nexport const ServerButtons = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n\twidth: 100%;\n\tmargin-top: 20px;\n`;\n\nexport const CreateAccountContainer = styled.div`\n\tposition: absolute;\n\tbottom: 22px;\n\tleft: 20%;\n`;\n\nexport const InputTitle = styled.span`\n\tfont-family: 'Rubik Medium';\n\tfont-size: 14px;\n\tfont-weight: 500;\n\tfont-stretch: normal;\n\tfont-style: normal;\n\tletter-spacing: normal;\n\tcolor: #2c263f;\n\tdisplay: block;\n\tmargin-bottom: 12px;\n\ttext-align: center;\n`;\n\nexport const LogoutContainer = styled.div`\n\tposition: absolute;\n\tbottom: 22px;\n  left: 27%;\n  text-align: center;\n    button {\n      margin-bottom: 30px;\n    }\n`;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { observer } from 'mobx-react';\nimport { Button } from 'primereact/button';\nimport { InputText } from 'primereact/inputtext';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport axios from 'axios';\nimport { Mixpanel } from '../../../utils/mixpanel';\nimport GitHubButton from './gitHubButton';\nimport connectionStore from '../../../store/connection';\nimport configStore from '../../../store/config';\nimport './index.scss';\nimport { LoginContainer, InputContainer, Title, ServerButtons, CreateAccountContainer, InputTitle, LogoutContainer } from './styles';\n\n// const { shell } = require('electron');\n// TODO it will better to move last email or github-username to connection store\n\n@observer\nclass CloudAuth extends Component {\n  static propTypes = {\n    onConnect: PropTypes.func.isRequired,\n    onSetLoading: PropTypes.func.isRequired,\n    loading: PropTypes.bool.isRequired,\n    connected: PropTypes.bool.isRequired\n  };\n\n  state = {\n    stage: 'login',           // [registration|login|logged]\n    status: 'disconnected',   // [disconnected|connected]\n    email: '',\n    password: '',\n    confirmPassword: '',\n    passwordVisible: false,\n    confirmPasswordVisible: false,\n    emailBlured: false,\n    passwordBlured: false,\n    confirmPasswordBlured: false\n  };\n\n  componentDidMount() {\n    this.gitHubProvider = new firebase.auth.GithubAuthProvider();\n    this.cloudApi = axios.create({\n      baseURL: configStore.cloudUrl,\n      timeout: 12000\n    });\n\n    const lastLogin = JSON.parse(localStorage.getItem('cloud_login_email') || '{\"provider\": \"email\", \"login\": \"\"}');\n    const email = lastLogin.provider === 'email' ? lastLogin.login : '';\n    if (this.props.connected === true) {\n      this.setState({\n        stage: 'logged',\n        status: 'connected',\n        email\n      });\n    } else {\n      this.setState({\n        stage: 'login',\n        status: 'disconnected',\n        email\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, _prevState) {\n    const { connected } = this.props;\n    if (prevProps.connected !== connected) {\n      if (connected === true) {\n        /* eslint-disable-next-line */\n        this.setState({\n          stage: 'logged',\n          status: 'connected'\n        });\n      } else {\n        /* eslint-disable-next-line */\n        this.setState({\n          stage: 'login',\n          status: 'disconnected'\n        });\n      }\n    }\n  }\n\n  passwordInputRef = null;\n\n  confirmPasswordInputRef = null;\n\n  signUpButtonRef = null;\n\n  logInButtonRef = null;\n\n  setFieldValue = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    this.setState({ [name]: value });\n  };\n\n  getIdToken = () => new Promise((resolve, reject) => {\n    firebase.auth()\n      .currentUser\n      .getIdToken(true)\n      .then(\n        (idToken) => resolve(idToken)\n      ).catch((err) => reject(err));\n  });\n\n  cloudLogin = async (jwt) => {\n    const response = await this.cloudApi.post('/api/login', { jwt });\n    return response.data;\n  };\n\n  testPing = async (token) => {\n    await this.cloudApi.get('/util/ping', { params: { apikey: token }, timeout: 180000 });\n  };\n\n  onGitHubLogin = () => {\n    this.props.onSetLoading(true);\n    firebase.auth()\n      .signInWithPopup(this.gitHubProvider)\n      .then((data) => {\n        localStorage.setItem(\n          'cloud_login_email',\n          JSON.stringify({\n            provider: 'github',\n            login: data.additionalUserInfo.username\n          })\n        );\n      })\n      .then(this.establishConnect)\n      .then(async (success) => {\n        if (success) {\n          Mixpanel.track('Connection > MindsDB Cloud');\n          await this.awaitState({\n            status: 'connected',\n            stage: 'logged'\n          });\n        } else {\n          await this.awaitState({\n            status: 'disconnected'\n          });\n          this.props.onSetLoading(false);\n        }\n      })\n      .catch(async (error) => {\n        const errorMessage = error.message;\n        // window.growl.show({\n        //   severity: 'error',\n        //   summary: '',\n        //   detail: errorMessage\n        // });\n        await this.awaitState({\n          status: 'disconnected'\n        });\n        this.props.onSetLoading(false);\n      });\n  };\n\n  setPasswordInputRef = (r) => {\n    this.passwordInputRef = r;\n  };\n\n  setConfirmPasswordInputRef = (r) => {\n    this.confirmPasswordInputRef = r;\n  };\n\n  setSignUpButtonRef = (r) => {\n    this.signUpButtonRef = r;\n  };\n\n  setLogInButtonRef = (r) => {\n    this.logInButtonRef = r;\n  };\n\n  awaitState = (newState) => new Promise((resolve) => {\n    this.setState(newState, resolve);\n  });\n\n  establishConnect = async () => {\n    try {\n      const jwt = await this.getIdToken();\n      await this.awaitState({\n        status: 'requesting access token'\n      });\n      const resp = await this.cloudLogin(jwt);\n      await this.awaitState({\n        status: 'waiting for MindsDB answer'\n      });\n      await this.testPing(resp.token);\n      await this.awaitState({\n        status: 'connected'\n      });\n      this.props.onConnect(resp);\n      return true;\n    } catch (error) {\n      // window.growl.show({\n      //   severity: 'error',\n      //   summary: '',\n      //   detail: 'Error occurred while connecting to cloud'\n      // });\n      await this.awaitState({\n        status: 'disconnected'\n      });\n      return false;\n    } finally {\n      this.props.onSetLoading(false);\n    }\n  };\n\n  onEnter = (e) => {\n    const { stage } = this.state;\n    if (e.keyCode === 13) {\n      if (e.target.name === 'email') {\n        this.passwordInputRef.element.focus();\n      } else if (e.target.name === 'password' && stage === 'registration') {\n        this.confirmPasswordInputRef.element.focus();\n      } else if (e.target.name === 'password' && stage === 'login') {\n        this.logInButtonRef.element.focus();\n      } else if (e.target.name === 'confirmPassword') {\n        this.signUpButtonRef.element.focus();\n      }\n    }\n  };\n\n  isEmailCorrect = () => {\n    // eslint-disable-next-line no-useless-escape\n    const emailRegexp = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n    return emailRegexp.test(String(this.state.email).toLowerCase());\n  };\n\n  isPasswordCorrect = () => {\n    const { password } = this.state;\n    if (\n      password.length < 6\n      || password.length > password.replace(' ', '').length\n    ) {\n      return false;\n    }\n    return true;\n  };\n\n  isPasswordsSame = () => this.state.password === this.state.confirmPassword;\n\n  onLogin = () => {\n    const {\n      email,\n      password\n    } = this.state;\n\n    if (this.isEmailCorrect() === false) {\n      // window.growl.show({\n      //   severity: 'error',\n      //   summary: '',\n      //   detail: 'email not valid'\n      // });\n      return;\n    }\n\n    if (this.isPasswordCorrect() === false) {\n      // window.growl.show({\n      //   severity: 'error',\n      //   summary: '',\n      //   detail: 'password not valid'\n      // });\n      return;\n    }\n\n    this.props.onSetLoading(true);\n    firebase.auth()\n      .signInWithEmailAndPassword(email, password)\n      .then(async () => {\n        // window.growl.show({ severity: 'success', detail: 'Success login' });\n      })\n      .then(this.establishConnect)\n      .then(async (success) => {\n        if (success) {\n          await this.awaitState({\n            stage: 'logged'\n          });\n          localStorage.setItem(\n            'cloud_login_email',\n            JSON.stringify({\n              provider: 'email',\n              login: email\n            })\n          );\n        } else {\n          this.props.onSetLoading(false);\n          await this.awaitState({\n            status: 'disconnected'\n          });\n        }\n      })\n      .catch(async (error) => {\n        const errorMessage = error.message;\n        // window.growl.show({\n        //   severity: 'error',\n        //   summary: '',\n        //   detail: errorMessage\n        // });\n        this.props.onSetLoading(false);\n        await this.awaitState({\n          status: 'disconnected'\n        });\n      });\n  };\n\n  onSignUp = async () => {\n    const {\n      email,\n      password\n    } = this.state;\n\n    if (this.isEmailCorrect() === false) {\n      // window.growl.show({\n      //   severity: 'error',\n      //   summary: '',\n      //   detail: 'email not valid'\n      // });\n      return;\n    }\n    if (this.isPasswordCorrect() === false) {\n      // window.growl.show({\n      //   severity: 'error',\n      //   summary: '',\n      //   detail: 'password not valid'\n      // });\n      return;\n    }\n    if (this.isPasswordsSame() === false) {\n      // window.growl.show({\n      //   severity: 'error',\n      //   summary: '',\n      //   detail: 'passwords not same'\n      // });\n      return;\n    }\n\n    this.props.onSetLoading(true);\n    await this.awaitState({\n      status: 'registering new user'\n    });\n    firebase.auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then(async () => {\n        // window.growl.show({ severity: 'success', detail: 'Registration completed' });\n        await this.awaitState({\n          stage: 'login'\n        });\n      })\n      .then(this.establishConnect)\n      .then(async (success) => {\n        if (success) {\n          await this.awaitState({\n            stage: 'logged'\n          });\n        } else {\n          this.props.onSetLoading(false);\n          await this.awaitState({\n            status: 'disconnected'\n          });\n        }\n      })\n      .catch(async (error) => {\n        const errorMessage = error.message;\n        // window.growl.show({\n        //   severity: 'error',\n        //   summary: '',\n        //   detail: errorMessage\n        // });\n        this.props.onSetLoading(false);\n        await this.awaitState({\n          status: 'disconnected'\n        });\n      });\n  };\n\n  togglePasswordVisible = () => {\n    this.setState((s) => ({\n      passwordVisible: !s.passwordVisible\n    }));\n  };\n\n  toggleConfirmPasswordVisible = () => {\n    this.setState((s) => ({\n      confirmPasswordVisible: !s.confirmPasswordVisible\n    }));\n  };\n\n  setBlured = (e) => {\n    const name = `${e.target.name}Blured`;\n    this.setState({ [name]: true });\n  };\n\n  goToLoginStage = () => {\n    this.setState({ stage: 'login' });\n  };\n\n  goToRegistrationStage = () => {\n    this.setState({ stage: 'registration' });\n  };\n\n  goToGithub = (e) => {\n    e.preventDefault();\n    // shell.openExternal('https://github.com/mindsdb/mindsdb');\n  }\n\n  onDisconnect = () => {\n    if (connectionStore.connected) {\n      connectionStore.disconnect();\n    }\n  };\n\n  render() {\n    const {\n      email,\n      password,\n      confirmPassword,\n      stage,\n      status,\n      passwordVisible,\n      confirmPasswordVisible,\n      emailBlured,\n      passwordBlured,\n      confirmPasswordBlured\n    } = this.state;\n    const { loading } = this.props;\n    let color = status;\n    if (color !== 'connected' && color !== 'disconnected') {\n      color = 'installing';\n    }\n    const lastLogin = JSON.parse(localStorage.getItem('cloud_login_email') || '{\"provider\": \"email\", \"login\": \"\"}');\n    return (\n      <div className=\"cloud-connection\">\n        <div className=\"input-block\">\n          <LoginContainer>\n          <Title>\n            MindsDB Cloud\n          </Title>\n          <div className='form-container'>\n          {\n            stage === 'logged' && (\n              <div className=\"input-container\">\n                <InputTitle>Welcome to MindsDB Cloud</InputTitle>\n                <span>{ lastLogin.login }</span>\n              </div>\n            )\n          }\n          {\n            (stage === 'registration' || stage === 'login') && (\n              <InputContainer>\n                <span className=\"input-title\">Email:</span>\n                <input\n                  name=\"email\"\n                  placeholder=\"youremail@youreprovider.com\"\n                  className={ `mdb-input ${\n                    emailBlured && email.length > 0 && !this.isEmailCorrect() ? 'error-input' : ''\n                  }` }\n                  value={ email }\n                  onKeyUp={ this.onEnter }\n                  onChange={ this.setFieldValue }\n                  onBlur={ this.setBlured }\n                />\n              </InputContainer>\n            )\n          }\n          {\n            (stage === 'registration' || stage === 'login') && (\n              <InputContainer>\n                <span className=\"input-title\">Password:</span>\n                <div className=\"input-password-block\">\n                  <InputText\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    className={ `mdb-input ${\n                      passwordBlured && password.length > 0 && !this.isPasswordCorrect() ? 'error-input' : ''\n                    }` }\n                    ref={ this.setPasswordInputRef }\n                    type={ passwordVisible ? 'text' : 'password' }\n                    value={ password }\n                    onKeyUp={ this.onEnter }\n                    onChange={ this.setFieldValue }\n                    onBlur={ this.setBlured }\n                  />\n                  <Button\n                    icon={ passwordVisible ? 'far fa-eye' : 'far fa-eye-slash' }\n                    tabIndex=\"-1\"\n                    onClick={ this.togglePasswordVisible }\n                  />\n                </div>\n              </InputContainer>\n            )\n          }\n          {\n            stage === 'registration' && (\n              <InputContainer>\n                <span className=\"input-title\">Confirm New Password:</span>\n                <div className=\"input-password-block\">\n                  <InputText\n                    name=\"confirmPassword\"\n                    placeholder=\"Password\"\n                    className={ `mdb-input ${\n                      confirmPasswordBlured && confirmPassword.length > 0 && !this.isPasswordsSame() ? 'error-input' : ''\n                    }` }\n                    ref={ this.setConfirmPasswordInputRef }\n                    type={ confirmPasswordVisible ? 'text' : 'password' }\n                    value={ confirmPassword }\n                    onKeyUp={ this.onEnter }\n                    onChange={ this.setFieldValue }\n                    onBlur={ this.setBlured }\n                  />\n                  <Button\n                    icon={ confirmPasswordVisible ? 'far fa-eye' : 'far fa-eye-slash' }\n                    tabIndex=\"-1\"\n                    onClick={ this.toggleConfirmPasswordVisible }\n                  />\n                </div>\n              </InputContainer>\n            )\n          }\n          {\n            stage === 'registration' && (\n              <CreateAccountContainer>\n                <p>\n                Already have a MindsDB Cloud account?\n                <a href=\"#/\" role=\"button\" onClick={ this.goToLoginStage }>\n                  &nbsp;Please Log In\n                </a>\n              </p>\n              </CreateAccountContainer>\n            )\n          }\n          <ServerButtons>\n          {\n            stage === 'registration' && (\n              <div>\n                <Button\n                  type=\"button\"\n                  className=\"minds-action-btn\"\n                  label=\"SIGN UP\"\n                  ref={ this.setSignUpButtonRef }\n                  icon={ loading ? 'pi pi-spin pi-spinner' : 'fas fa-address-card' }\n                  onClick={ this.onSignUp }\n                  disabled={ loading }\n                />\n                <GitHubButton\n                  onClick={ this.onGitHubLogin }\n                  label=\"SIGN UP WITH GITHUB\"\n                  disabled={ loading }\n                />\n              </div>\n            )\n          }\n          {\n            stage === 'login' && (\n              <div>\n                <Button\n                  type=\"button\"\n                  className=\"minds-action-btn\"\n                  label=\"LOG IN\"\n                  ref={ this.setLogInButtonRef }\n                  icon={ loading ? 'pi pi-spin pi-spinner' : 'fas fa-cloud' }\n                  onClick={ this.onLogin }\n                  disabled={ loading }\n                />\n                <GitHubButton\n                  onClick={ this.onGitHubLogin }\n                  disabled={ loading }\n                />\n              </div>\n            )\n          }\n\n\n        </ServerButtons>\n        <CreateAccountContainer>\n        { stage === 'login' && (\n          <p>\n          Need a MindsDB Cloud account?\n          <a href=\"#/\" role=\"button\" onClick={ this.goToRegistrationStage }>\n            &nbsp;Create an account\n          </a>\n        </p>\n        )}\n        </CreateAccountContainer>\n        { stage === 'logged' && (\n          <LogoutContainer>\n            <Button\n              type=\"button\"\n              className=\"minds-action-btn red\"\n              label=\"Logout\"\n              onClick={ this.onDisconnect }\n              icon=\"fas fa-ban\"\n              disabled={ loading }\n            />\n\n          <p>\n          Enjoying MindsDB?\n          <a href=\"#/\" role=\"button\" onClick={ this.goToGithub }>\n            &nbsp;Star us on Github !\n          </a>\n        </p>\n        </LogoutContainer>\n      )}\n        </div>\n        </LoginContainer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CloudAuth;\n","export const Colors = {\n  black: 'black',\n  white: '#fff',\n  mirage: '#2c263f', // all texts -Avoid #333-\n  green: '#26b873',\n  slateGrey: '#5d6970', // all\n  gray: '#939ea4',\n  selectedBreacump: '#00b06d',\n  primaryBar: '#4dd9ca',\n  hoverBar: '#099ebd',\n  watermelon: '#f25c63',\n  yellow: '#eecc58',\n  BlackPie: '#333333'\n}\n","export const Rubik = \"Rubik Medium\" // All titles and subtitles\nexport const SFMono = \"SFMono\" // all labels and grapichs description\nexport const Karla = \" 'Karla', sans-serif\" // all <p> exept tags\n","import styled from '@emotion/styled';\nimport { Colors } from '../Colors';\nimport { Rubik } from '../Fonts';\n\nexport const HeaderTittle = styled.span`\n    display: flex;\n    align-items: center;\n    color: ${Colors.mirage};\n    font-family: ${Rubik};\n    font-size: 36px;\n    font-weight: 500;\n    font-stretch: normal;\n    font-style: normal;\n    line-height: normal;\n    letter-spacing: normal;\n    @media (max-width: 1150px) {\n      font-size: 25px;\n    }\n`;\n","import React from 'react';\nimport { HeaderTittle } from './styles';\n\nexport const TitleBar = ({children}) => (\n\t<HeaderTittle>\n\t\t{children}\n\t</HeaderTittle>\n);\n","import styled from '@emotion/styled';\nimport { Rubik } from '../Fonts';\nimport { Colors } from '../Colors';\n\nconst statusColors = {\n  Connected: Colors.selectedBreacump,\n  Installing: Colors.primaryBar,\n\tInstalled: Colors.primaryBar,\n\tRunning: Colors.selectedBreacump,\n\tconnected: Colors.selectedBreacump,\n\tStarting: Colors.selectedBreacump,\n\tDisconnected: Colors.watermelon,\n\tdisconnected: Colors.watermelon,\n\t'Not installed': Colors.watermelon\n};\n\nexport const StatusText = styled.span`\n\tcolor: ${Colors.mirage};\n\tfont-family: ${Rubik};\n\tfont-size: 14px;\n\tfont-stretch: normal;\n\tfont-style: normal;\n\tfont-weight: 500;\n\tletter-spacing: normal;\n\tmargin-top: 3px;\n`;\n\nexport const LabelText = styled.span((props) => ({\n\tmarginLeft: '7px',\n\tmarginTop: '1px',\n\tfontFamily: Rubik,\n\tfontSize: '14px',\n\tfontWeight: '500',\n\tcolor: statusColors[props.children]\n}));\n","import React from 'react';\nimport { StatusText, LabelText } from './styles'\nimport PropTypes from 'prop-types';\n\nconst StatusBar = ({ isconnected, serverType, serverStatus }) => {\n  const serverStatusText = serverType === 'local' ? serverStatus :  isconnected ? 'Connected' : 'Disconnected';\n  return (\n\t<>\n\t\t<StatusText>Status:</StatusText>\n    <LabelText serverStatusText>\n\t\t\t{serverStatusText}\n\t\t</LabelText>\n\t</>\n)};\n\nStatusBar.propTypes = {\n  isconnected: PropTypes.bool,\n  serverType: PropTypes.string,\n  serverStatus: PropTypes.string\n}\n\nexport default StatusBar;\n","import React, { useState, useEffect } from 'react';\n\nconst DarkMode = () => {\n  const [darkMode, setDarkMode] = useState(localStorage.darkMode);\n\n  const darkModeHandle = (e) => {\n    if (e && !e.target.checked) {\n      localStorage.darkMode = false;\n      setDarkMode( localStorage.darkMode);\n      document.getElementsByTagName(\"body\")[0].style.filter = \"\";\n    } else if (darkMode === \"true\" || (e && e.target.checked)) {\n      localStorage.setItem(\"darkMode\", true);\n      setDarkMode(localStorage.darkMode);\n      document.getElementsByTagName(\"body\")[0].style.filter =\n        \"invert(85%) hue-rotate(180deg)\";\n    }\n  };\n\n  useEffect (() => darkModeHandle())\n\n  return (\n    <div className=\"dm-items sw-position \">\n      <span className=\"dm-tt\">Dark Mode:</span>\n      <label className=\"switch\">\n        <input\n          type=\"checkbox\"\n          onChange={(e) => darkModeHandle(e)}\n          checked={darkMode === \"true\" && true}\n        />\n        <span className=\"slider round\" />\n      </label>\n    </div>\n  )\n}\n\nexport default DarkMode;\n","import React from 'react';\n\nexport const InputText = ({id = '', name = '',  value = '', onChange, className = '', placeholder = ''}) => {\n  return <input\n  id={id}\n  name={name}\n  value={value}\n  onChange={onChange}\n  className={className}\n  placeholder={placeholder}\n/>\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Message } from 'primereact/message';\nimport { observer } from 'mobx-react';\nimport { Dropdown } from 'primereact/dropdown';\nimport { Button } from 'primereact/button';\nimport { Panel } from 'primereact/panel';\nimport { InputBlock } from './styles';\nimport CloudAuth from './cloudAuth';\nimport configStore from '../../store/config';\nimport './index.scss';\nimport { TitleBar } from '../ui/TittleBar';\nimport StatusBar from '../ui/StatusBar';\nimport DarkMode from '../ui/darkMode';\nimport { InputText } from '../inputText';\n\n// const { shell, ipcRenderer } = require(\"electron\");\n\n@observer\nclass Config extends Component {\n  static propTypes = {\n    connectionStore: PropTypes.object.isRequired,\n    configStore: PropTypes.object.isRequired,\n    dataSourcesStore: PropTypes.object.isRequired,\n    predictorsStore: PropTypes.object.isRequired,\n  };\n\n  state = {\n    url: this.props.connectionStore.url,\n    token: '',\n    pypath: '',\n    serverType: 'remote',\n    msgFilter: ['info', 'data', 'error'],\n    validUrl: true,\n    loading: false,\n  };\n\n  // componentDidMount() {\n  //   this.setState({\n  //     pypath: this.props.configStore.config.python.path,\n  //     serverType: this.props.configStore.config.defaultServerType,\n  //   });\n  // }\n\n  configUpdateTimeout = null;\n\n  setFieldValue = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    if (name === 'pypath' && value !== this.state.pypath) {\n      if (this.configUpdateTimeout !== null) {\n        clearTimeout(this.configUpdateTimeout);\n      }\n      this.configUpdateTimeout = setTimeout(() => {\n        this.configUpdateTimeout = null;\n        this.props.configStore.saveConfig({\n          pypath: value,\n        });\n      }, 500);\n    }\n\n    let validUrl = true;\n    if (name === 'url' && !this.isValidUrl(value)) {\n      validUrl = false;\n    }\n\n    this.setState({\n      [name]: value,\n      validUrl,\n    });\n  };\n\n  onConnect = () => {\n    const { url, token, validUrl } = this.state;\n    const { connectionStore, dataSourcesStore } = this.props;\n    dataSourcesStore.reset();\n\n    if (validUrl) {\n      localStorage.setItem('apikey', token);\n      connectionStore.connect(url, [{ key: 'apikey', value: token }]);\n    }\n  };\n\n  onDisconnect = () => {\n    const { connectionStore, dataSourcesStore, predictorsStore } = this.props;\n    delete localStorage.apikey;\n    connectionStore.disconnect();\n    dataSourcesStore.reset();\n    predictorsStore.reset();\n  };\n\n  onRunLocalServer = () => {\n    try {\n      this.onStopLocalServer();\n    } catch (err) {\n      console.log(err);\n    }\n\n    setTimeout(() => {\n      const { configStore } = this.props;\n\n      configStore.waitLocalServerStatusUpdate();\n      // ipcRenderer.send(\"local-server-run\");\n    }, 1000);\n  };\n\n  onStopLocalServer = () => {\n    this.props.configStore.waitLocalServerStatusUpdate();\n    // ipcRenderer.send(\"local-server-stop\");\n  };\n\n  onInstallLocalServer = () => {\n    this.props.configStore.waitLocalServerStatusUpdate();\n    // ipcRenderer.send(\"local-server-install\");\n  };\n\n  onDeleteLocalServer = () => {\n    this.props.configStore.waitLocalServerStatusUpdate();\n    // ipcRenderer.send(\"local-server-delete\");\n  };\n\n  onChangeServerType = (e) => {\n    const { connected } = this.props.connectionStore;\n    // if (connected) {\n    //   window.growl.show({\n    //     severity: \"info\",\n    //     summary: \"notice\",\n    //     detail: \"need to disconnect from current server\",\n    //   });\n    //   return;\n    // }\n    this.props.configStore.saveConfig({\n      defaultServerType: e.value,\n    });\n    this.setState({ serverType: e.value });\n  };\n\n  onPythonDownloadClick = (e) => {\n    e.preventDefault();\n    // shell.openExternal(\"https://www.python.org/downloads/\");\n  };\n\n  selectFilter = (e) => {\n    const { msgFilter } = this.state;\n    const index = msgFilter.indexOf(e.name);\n    if (index >= 0) {\n      const newValues = [...msgFilter];\n      newValues.splice(index, 1);\n      this.setState({\n        msgFilter: newValues,\n      });\n    } else {\n      this.setState({\n        msgFilter: [...msgFilter, e.name],\n      });\n    }\n  };\n\n  openLink = (url) => {\n    // require(\"electron\").shell.openExternal(url);\n  };\n\n  isValidUrl = (value) => {\n    return /^(?:^|\\s)((https?:\\/\\/)?(?:localhost|[\\w-]+(?:\\.[\\w-]+)+)(:\\d+)?(\\/\\S*)?)?$/i.test(\n      value\n    );\n  };\n\n  onCloudConnected = ({ token }) => {\n    this.props.connectionStore.connect(configStore.cloudUrl, [\n      { key: 'apikey', value: token },\n    ]);\n  };\n\n  setLoading = (loading) => {\n    this.setState({ loading });\n  };\n\n  render() {\n    const { connectionStore, configStore } = this.props;\n    const {\n      localServerStatus,\n      waitingLocalServerStatusUpdate,\n    } = configStore.config;\n    const { connected } = connectionStore;\n    const {\n      validUrl,\n      serverType,\n      pypath,\n      msgFilter,\n      url,\n      token,\n      loading,\n    } = this.state;\n    let serverStatus = '';\n    if (\n      localServerStatus.installed === false &&\n      localServerStatus.installing === false\n    ) {\n      serverStatus = 'Not installed';\n    } else if (localServerStatus.installing === true) {\n      serverStatus = 'Installing';\n    } else if (localServerStatus.starting === true) {\n      serverStatus = 'Starting';\n    } else if (localServerStatus.running === true) {\n      serverStatus = 'Running';\n    } else {\n      serverStatus = 'Installed';\n    }\n    return (\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <div className=\"content-dm\">\n            <div className=\"dm-items\">\n              <TitleBar>Connection</TitleBar>\n              <StatusBar\n                isconnected={connected}\n                serverType={serverType}\n                serverStatus={serverStatus}\n              />\n            </div>\n            <DarkMode />\n          </div>\n        </div>\n        <div className=\"main-content__body\">\n          <Panel\n            className=\"minds-block\"\n            style={{\n              margin: 20,\n              flex: 1,\n              display: 'flex',\n              height: 'calc(100% - 40px)',\n              overflow: 'hidden',\n            }}\n          >\n            <div className=\"connectionMain\">\n              {/* <div className=\"connection-top\">\n                <div className=\"connect-choose width30\">\n                  <span>Where to Run</span>\n                  {connected && serverType === \"local\" ? (\n                    \"Locally\"\n                  ) : (\n                    <Dropdown\n                      value={serverType}\n                      className=\"mdb-select\"\n                      options={[\n                        { label: \"On a Remote Server\", value: \"remote\" },\n                        { label: \"Locally\", value: \"local\" },\n                        // { label: \"MindsDB Cloud\", value: \"cloud\" },\n                      ]}\n                      onChange={this.onChangeServerType}\n                      disabled={loading}\n                      placeholder=\"\"\n                    />\n                  )}\n                </div>\n              </div> */}\n              <div>\n                <div className=\"config-holder__local-server-status\"></div>\n                <div className=\"server-buttons\">\n                  {connected && serverType === 'remote' && (\n                    <Button\n                      className={`minds-action-btn red  ${\n                        serverType === 'remote' ? 'abs-btn-position' : ''\n                      }`}\n                      type=\"button\"\n                      label=\"DISCONNECT\"\n                      icon=\"fas fa-not-equal\"\n                      onClick={this.onDisconnect}\n                    />\n                  )}\n                  <Button\n                    className={`minds-action-btn ${\n                      serverType === 'remote' ? 'abs-btn-position' : ''\n                    }`}\n                    type=\"button\"\n                    label=\"CONNECT\"\n                    icon=\"fas fa-exchange-alt\"\n                      style={{\n                        display:\n                          (!connected) || (this.props.configStore.config.defaultServerType === \"remote\" && !connected)\n                            ? \"block\"\n                            : \"none\",\n                      }}\n                      onClick={this.onConnect}\n                    />\n                  \n                  {localServerStatus.installed}\n                </div>\n              </div>\n              <div\n                className=\"config-holder\"\n                style={{\n                  display: serverType === 'local' ? 'block' : 'none',\n                }}\n              >\n                {/* START */}\n                <div\n                  className=\"config-holder__local-server-install\"\n                  style={{\n                    display:\n                      localServerStatus.installing ||\n                      localServerStatus.installed\n                        ? 'none'\n                        : 'block',\n                  }}\n                >\n                  <InputBlock>\n                    <div className=\"config-holder__local-server-install__pypath\">\n                      <span className=\"input-title\">Python Path:</span>\n                      <div className=\"input-container\">\n                        <InputText\n                          name=\"pypath\"\n                          placeholder=\"\"\n                          className={`${\n                            configStore.isGoodPython === false\n                              ? 'error-input'\n                              : ''\n                          }`}\n                          value={pypath}\n                          onChange={this.setFieldValue}\n                          style={{ width: 100 }}\n                        />\n                        {configStore.isGoodPython === true && (\n                          <Message\n                            className=\"overwrite-p-message\"\n                            severity=\"success\"\n                            text=\"\"\n                          />\n                        )}\n                        {/* {configStore.isGoodPython === false &&\n                          configStore.config.python.isPython === true && (\n                            <Message\n                              severity=\"error\"\n                              text={`wrong version${\n                                typeof configStore.config.python.version ===\n                                  \"string\" &&\n                                configStore.config.python.version.length > 0\n                                  ? `: ${configStore.config.python.version} < ${configStore.goodPythonVersion}`\n                                  : \"\"\n                              }`}\n                            />\n                          )} */}\n                        {/* {configStore.isGoodPython === false &&\n                          configStore.config.python.isPython === false && (\n                            <Message className=\"not-python\" severity=\"error\" />\n                          )} */}\n                      </div>\n                      {configStore.isGoodPython === false && (\n                        <div>\n                          <p className=\"download-python\">\n                            You can download Python&nbsp;\n                            <a\n                              role=\"button\"\n                              href=\"https://www.python.org/downloads/\"\n                              onClick={this.onPythonDownloadClick}\n                            >\n                              here\n                            </a>\n                          </p>\n                        </div>\n                      )}\n                      <p>\n                        At this time, the local server can’t run because it is\n                        not installed. This installation will take about five\n                        minutes and require at least 1.2 GB of free disk space.\n                        During the installation process, significant amounts of\n                        data can be downloaded from the internet. Python 3.6 (or\n                        higher) is also required to start. Please print path to\n                        Python as follows:\n                      </p>\n                      <a\n                        href=\"/\"\n                        onClick={() =>\n                          this.openLink(\n                            'https://community.mindsdb.com/t/how-to-find-python-path-information/37'\n                          )\n                        }\n                      >\n                        Where can I find this?\n                      </a>\n                    </div>\n                  </InputBlock>\n                </div>\n                {/* STOP */}\n                <div\n                  id=\"terminal\"\n                  className=\"server-log__body\"\n                  style={{\n                    display:\n                      localServerStatus.installed ||\n                      localServerStatus.installing\n                        ? undefined\n                        : 'none',\n                  }}\n                >\n                  {configStore.log.reduce((prev, _next, index) => {\n                    const reverseIndex = configStore.log.length - index - 1;\n                    const reverseElement = configStore.log[reverseIndex];\n                    const terminalDiv = document.getElementById('terminal');\n                    let colorMessage = '__msg';\n                    if (reverseElement.type === 'error') {\n                      if (!reverseElement.data.includes('INFO')) {\n                        colorMessage = reverseElement.data.includes('WARNING')\n                          ? 'warning'\n                          : reverseElement.data.includes('DEBUG')\n                          ? 'warning'\n                          : 'error';\n                      }\n                    } else if (reverseElement.type === 'info') {\n                      colorMessage = 'info';\n                    }\n\n                    if (msgFilter.indexOf(reverseElement.type) !== -1) {\n                      prev.push(\n                        <p\n                          key={reverseIndex}\n                          className={`server-log__body__msg server-log__body__msg-${colorMessage}`}\n                        >\n                          {`$terminal: ${reverseElement.data}`}\n                        </p>\n                      );\n                    }\n\n                    if (terminalDiv) {\n                      terminalDiv.scrollTop = terminalDiv.scrollHeight;\n                    }\n                    return prev.sort((a, b) => a.key - b.key);\n                  }, [])}\n                </div>\n                <div className=\"server-buttons\">\n                  {localServerStatus.installed === true && (\n                    <Button\n                      type=\"button\"\n                      className=\"minds-action-btn\"\n                      label=\"CONNECT\"\n                      icon=\"fas fa-exchange-alt\"\n                      onClick={this.onRunLocalServer}\n                      disabled={\n                        connected ||\n                        localServerStatus.starting ||\n                        localServerStatus.installed === false ||\n                        waitingLocalServerStatusUpdate\n                      }\n                    />\n                  )}\n                  {localServerStatus.running === true && (\n                    <Button\n                      className=\"minds-action-btn red\"\n                      type=\"button\"\n                      label=\"STOP\"\n                      icon=\"fas fa-ban\"\n                      onClick={this.onStopLocalServer}\n                      disabled={waitingLocalServerStatusUpdate}\n                    />\n                  )}\n                  {localServerStatus.installed === true && (\n                    <Button\n                      className=\"minds-action-btn red\"\n                      type=\"button\"\n                      label=\"DELETE\"\n                      icon=\"fas fa-link\"\n                      onClick={this.onDeleteLocalServer}\n                      disabled={\n                        localServerStatus.running ||\n                        localServerStatus.starting ||\n                        waitingLocalServerStatusUpdate\n                      }\n                    />\n                  )}\n                </div>\n                <div\n                  className=\"server-log-install\"\n                  style={{\n                    display:\n                      localServerStatus.installed ||\n                      localServerStatus.installing\n                        ? 'none'\n                        : 'block',\n                  }}\n                >\n                  {localServerStatus.installed === false && (\n                    <Button\n                      className=\"minds-action-btn\"\n                      type=\"button\"\n                      label=\"INSTALL\"\n                      icon=\"fas fa-link\"\n                      onClick={this.onInstallLocalServer}\n                      disabled={\n                        localServerStatus.installing === true ||\n                        configStore.isGoodPython === false ||\n                        waitingLocalServerStatusUpdate\n                      }\n                    />\n                  )}\n                </div>\n              </div>\n              <div\n                className=\"config-holder\"\n                style={{\n                  display: serverType === 'cloud' ? 'block' : 'none',\n                }}\n              >\n                <CloudAuth\n                  onConnect={this.onCloudConnected}\n                  onSetLoading={this.setLoading}\n                  connected={connected}\n                  loading={loading}\n                />\n              </div>\n            </div>\n            <div className=\"remote-inputs\">\n              <div\n                className=\"connect-choose\"\n                style={{\n                  display: serverType === 'remote' ? 'block' : 'none',\n                }}\n              >\n                <span>URL</span>\n                <InputText\n                  name=\"url\"\n                  placeholder=\"url\"\n                  className={`mdb-input  ${!validUrl ? 'inputError' : ''}`}\n                  value={url}\n                  onChange={this.setFieldValue}\n                />\n                {!validUrl && (\n                  <strong className=\"valid_url\">\n                    Please enter a valid URL\n                  </strong>\n                )}\n              </div>\n              <div\n                className=\"connect-choose\"\n                style={{\n                  display: serverType === 'remote' ? 'block' : 'none',\n                }}\n              >\n                <span>Token</span>\n                <InputText\n                  name=\"token\"\n                  placeholder=\"Place Your Token Here\"\n                  className=\"mdb-input\"\n                  value={token}\n                  onChange={this.setFieldValue}\n                />\n              </div>\n              {serverType === 'remote' && (\n                <p>\n                  MindsDB can run on a remote computer. All you need to provide\n                  is the server URL and a security token (optional).\n                </p>\n              )}\n            </div>\n          </Panel>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Config;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst PageLinks = ({ onClick, value , page }) => {\n\tconst onPageLinkClick = (event, pageLink) => {\n\t\tif (onClick) {\n\t\t\tonClick({\n\t\t\t\toriginalEvent: event,\n\t\t\t\tvalue: pageLink\n\t\t\t});\n\t\t}\n\t\tevent.preventDefault();\n  };\n\n  return (\n    <div className=\"minds-paginator-pages\">\n      {\n      value.map((pageLink, _i) => {\n\t\t\tconst pageClassName = classNames({\n\t\t\t\t'minds-highlight': pageLink - 1 === page\n\t\t\t});\n\n\t\t\treturn (\n\t\t\t\t<button\n\t\t\t\t\tkey={pageLink}\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tclassName={pageClassName}\n\t\t\t\t\tonClick={(e) => onPageLinkClick(e, pageLink)}\n\t\t\t\t>\n\t\t\t\t\t<span> {pageLink} </span>\n\t\t\t\t</button>\n\t\t\t);\n\t\t})}\n      </div>\n  )\n};\n\nPageLinks.propTypes = {\n  value: PropTypes.array,\n  page: PropTypes.number,\n  onClick: PropTypes.func\n}\n\nexport default PageLinks;\n","import React from 'react';\nimport { Paginator } from 'primereact/paginator';\nimport classNames from 'classnames';\nimport PageLinks from './pageLinks';\nimport './index.scss';\n\nclass MindsPaginator extends Paginator {\n  render() {\n    if (!this.props.alwaysShow && this.getPageCount() === 1) {\n      return null;\n    }\n    const className = classNames('minds-paginator p-paginator p-component p-unselectable-text', this.props.className);\n\n    const paginatorElements = [(\n      <button\n        key=\"FirstPageLink\"\n        type=\"button\"\n        className=\"\"\n        onClick={ this.changePageToFirst }\n        disabled={ this.isFirstPage() }\n      >\n        <span>|&lt;</span>\n      </button>\n    ), (\n      <button\n        key=\"PrevPageLink\"\n        type=\"button\"\n        className=\"\"\n        onClick={ this.changePageToPrev }\n        disabled={ this.isFirstPage() }\n      >\n        <span>&lt;</span>\n      </button>\n    ), (\n      <PageLinks\n        key=\"page-links\"\n        value={ this.updatePageLinks() }\n        page={ this.getPage() }\n        onClick={ this.onPageLinkClick }\n      />\n    ), (\n      <button\n        key=\"NextPageLink\"\n        type=\"button\"\n        onClick={ this.changePageToNext }\n        disabled={ this.isLastPage() }\n      >\n        <span>&gt;</span>\n      </button>\n    ), (\n      <button\n        key=\"LastPageLink\"\n        type=\"button\"\n        onClick={ this.changePageToLast }\n        disabled={ this.isLastPage() }\n      >\n        <span>&gt;|</span>\n      </button>\n    )];\n\n\n    return (\n      <div className={ className } style={ this.props.style }>\n        { this.props.leftContent }\n        <div className=\"pages\">\n          { paginatorElements }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MindsPaginator;\n","import styled from '@emotion/styled';\nimport { Colors } from '../../Colors';\nimport { Rubik } from '../../Fonts';\n\nexport const HeaderTittle = styled.div`\n   display: flex;\n    margin-left: 30px;\n    overflow: hidden;\n    .option {\n        border-width: 0px;\n        outline: transparent;\n        background-color: white;\n        flex: 1;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        min-width: 84px;\n        height: 17px;\n        padding: 2px 0 0 0;\n\n        font-size: 10px;\n        font-family: ${Rubik};\n        font-weight: bold;\n        font-stretch: normal;\n        font-style: normal;\n        letter-spacing: normal;\n        text-align: center;\n\n        cursor: pointer;\n        transition: color 0.3s;\n        color: ${Colors.gray};\n        &:hover {\n            color: ${Colors.selectedBreacump};\n        };\n\n        position: relative;\n        margin-bottom: 3px;;\n        &:last-child {\n            margin-right: 3px;\n        }\n        &:first-of-type {\n            margin-left: 3px;\n        }\n        &:not(:first-of-type) {\n            margin-left: 2px;\n        }\n        &.selected::after {\n            border-color: $color-shamrock;\n            z-index: 2;\n        }\n        &.selected {\n            color: $color-shamrock;\n            border-color: green;\n        }\n        &::after {\n            content: '';\n            z-index: 1;\n            position: absolute;\n            display: flex;\n            left: 0px;\n            top: 0px;\n            width: 100%;\n            height: 100%;\n            box-sizing: content-box;\n            box-shadow: 0px 0px 1px 2px;\n            border-top-width: 0;\n            transition: border-color 0.3s;\n        }\n        &:first-of-type::after {\n            border-bottom-left-radius: 3px;\n        }\n        &:last-child::after {\n            border-bottom-right-radius: 3px;\n        }\n    }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { HeaderTittle } from './styles'\n\nconst TableBottomSelector = ({ options, onSelect }) => {\n\treturn (\n\t\t<HeaderTittle>\n\t\t\t{options.map((option, index) => (\n\t\t\t\t<button\n\t\t\t\t\tclassName={option.selected ? 'option selected' : 'option'}\n\t\t\t\t\tkey={`key-${index}`}\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tonSelect(option);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{`${option.name}`.toUpperCase()}\n\t\t\t\t</button>\n\t\t\t))}\n\t\t</HeaderTittle>\n\t);\n};\n\nTableBottomSelector.propTypes = {\n\toptions: PropTypes.array.isRequired,\n\tonSelect: PropTypes.func.isRequired\n};\n\nexport default TableBottomSelector;\n","import React from 'react';\nimport { DataTable } from 'primereact/datatable';\nimport classNames from 'classnames';\nimport Paginator from './mindsPaginator';\nimport TableBottomSelector from './tableBottomSelector';\nimport './index.scss';\n\nclass MindsDataTable extends DataTable {\n\tcreatePaginator(position, totalRecords, _data) {\n\t\tconst className = `minds-navigator p-paginator-${position}`;\n\n\t\tconst rows = this.getRows();\n\n\t\tconst options = this.props.rowsPerPageOptions.map((name) => ({\n\t\t\tname,\n\t\t\tselected: name === rows\n\t\t}));\n\n\t\tconst rangeSelector = (\n\t\t\t<TableBottomSelector\n\t\t\t\toptions={options}\n\t\t\t\tonSelect={(option) => {\n\t\t\t\t\tconst rows = parseInt(option.name, 10);\n\t\t\t\t\tthis.onPageChange({\n\t\t\t\t\t\tfirst: 0,\n\t\t\t\t\t\trows,\n\t\t\t\t\t\tpage: 0,\n\t\t\t\t\t\tpageCount: Math.ceil(totalRecords / rows) || 1\n\t\t\t\t\t});\n\t\t\t\t}}\n\t\t\t/>\n\t\t);\n\n\t\treturn (\n\t\t\t<Paginator\n\t\t\t\tfirst={this.getFirst()}\n\t\t\t\trows={this.getRows()}\n\t\t\t\tpageLinkSize={this.props.pageLinkSize}\n\t\t\t\tclassName={className}\n\t\t\t\tonPageChange={this.onPageChange}\n\t\t\t\ttemplate={this.props.paginatorTemplate}\n\t\t\t\ttotalRecords={totalRecords}\n\t\t\t\trowsPerPageOptions={null} // changed from {this.props.rowsPerPageOptions}\n\t\t\t\tcurrentPageReportTemplate={this.props.currentPageReportTemplate}\n\t\t\t\tleftContent={rangeSelector} // changed from {this.props.paginatorLeft}\n\t\t\t\trightContent={this.props.paginatorRight}\n\t\t\t\talwaysShow={this.props.alwaysShowPaginator}\n\t\t\t/>\n\t\t);\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\tresizableColumns,\n\t\t\tresponsive,\n\t\t\tcolumnResizeMode,\n\t\t\tvirtualScroll,\n\t\t\tscrollable,\n\t\t\tautoLayout,\n\t\t\tselectionMode,\n\t\t\tpaginator,\n\t\t\tpaginatorPosition,\n\t\t\theader,\n\t\t\tfooter,\n\t\t\treorderableColumns,\n      loading,\n      frozenHeaderColumnGroup,\n      frozenFooterColumnGroup,\n      headerColumnGroup,\n      footerColumnGroup,\n      tableStyle,\n      tableClassName,\n      id,\n      headerHeight\n    } = this.props;\n\n\t\tlet value = this.processData();\n\t\tlet columns = this.getColumns();\n\t\tlet totalRecords = this.getTotalRecords(value);\n\t\tlet className = classNames(\n\t\t\t'p-datatable p-component',\n\t\t\t{\n\t\t\t\t'p-datatable-responsive': responsive,\n\t\t\t\t'p-datatable-resizable': resizableColumns,\n\t\t\t\t'p-datatable-resizable-fit': resizableColumns && columnResizeMode === 'fit',\n\t\t\t\t'p-datatable-scrollable': scrollable,\n\t\t\t\t'p-datatable-virtual-scrollable': virtualScroll,\n\t\t\t\t'p-datatable-auto-layout': autoLayout,\n\t\t\t\t'p-datatable-hoverable-rows': selectionMode\n\t\t\t},\n\t\t\tthis.props.className\n\t\t);\n\t\tlet paginatorTop = paginator && paginatorPosition !== 'bottom' && this.createPaginator('top', totalRecords);\n\t\tlet paginatorBottom = paginator && paginatorPosition !== 'top' && this.createPaginator('bottom', totalRecords);\n\t\tlet headerFacet = header && <div className=\"p-datatable-header\">{header}</div>;\n\t\tlet footerFacet = footer && <div className=\"p-datatable-footer\">{footer}</div>;\n\t\tlet resizeHelper = resizableColumns && (\n\t\t\t<div\n\t\t\t\tref={(el) => {\n\t\t\t\t\tthis.resizerHelper = el;\n\t\t\t\t}}\n\t\t\t\tclassName=\"p-column-resizer-helper p-highlight\"\n\t\t\t\tstyle={{ display: 'none' }}\n\t\t\t/>\n\t\t);\n\t\tlet tableContent = null;\n\t\tlet resizeIndicatorUp = reorderableColumns && (\n\t\t\t<span\n\t\t\t\tref={(el) => {\n\t\t\t\t\tthis.reorderIndicatorUp = el;\n\t\t\t\t}}\n\t\t\t\tclassName=\"pi pi-arrow-down p-datatable-reorder-indicator-up\"\n\t\t\t\tstyle={{ position: 'absolute', display: 'none' }}\n\t\t\t/>\n\t\t);\n\t\tlet resizeIndicatorDown = reorderableColumns && (\n\t\t\t<span\n\t\t\t\tref={(el) => {\n\t\t\t\t\tthis.reorderIndicatorDown = el;\n\t\t\t\t}}\n\t\t\t\tclassName=\"pi pi-arrow-up p-datatable-reorder-indicator-down\"\n\t\t\t\tstyle={{ position: 'absolute', display: 'none' }}\n\t\t\t/>\n\t\t);\n\t\tlet loader;\n\n\t\tif (loading) {\n\t\t\tloader = this.renderLoader();\n\t\t}\n\n\t\tif (Array.isArray(columns)) {\n\t\t\tif (scrollable) {\n\t\t\t\tthis.frozenSelectionMode = this.frozenSelectionMode || this.getFrozenSelectionModeInColumn(columns);\n\t\t\t\tlet frozenColumns = this.getFrozenColumns(columns);\n\t\t\t\tlet scrollableColumns = frozenColumns ? this.getScrollableColumns(columns) : columns;\n\t\t\t\tlet frozenView, scrollableView;\n\n        if (frozenColumns) {\n\t\t\t\t\tfrozenView = this.createScrollableView(\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\tfrozenColumns,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tfrozenHeaderColumnGroup,\n\t\t\t\t\t\tfrozenFooterColumnGroup,\n\t\t\t\t\t\ttotalRecords\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tscrollableView = this.createScrollableView(\n\t\t\t\t\tvalue,\n\t\t\t\t\tscrollableColumns,\n\t\t\t\t\tfalse,\n\t\t\t\t\theaderColumnGroup,\n\t\t\t\t\tfooterColumnGroup,\n\t\t\t\t\ttotalRecords\n\t\t\t\t);\n\n\t\t\t\ttableContent = (\n\t\t\t\t\t<div className=\"p-datatable-scrollable-wrapper\">\n\t\t\t\t\t\t{frozenView}\n\t\t\t\t\t\t{scrollableView}\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tlet tableHeader = this.createTableHeader(value, columns, headerColumnGroup);\n\t\t\t\tlet tableBody = this.createTableBody(value, columns);\n\t\t\t\tlet tableFooter = this.createTableFooter(columns, footerColumnGroup);\n\n\t\t\t\ttableContent = (\n\t\t\t\t\t<div className=\"p-datatable-wrapper\">\n\t\t\t\t\t\t<table\n\t\t\t\t\t\t\tstyle={tableStyle}\n\t\t\t\t\t\t\tclassName={tableClassName}\n\t\t\t\t\t\t\tref={(el) => {\n\t\t\t\t\t\t\t\tthis.table = el;\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{tableHeader}\n\t\t\t\t\t\t\t{tableFooter}\n\t\t\t\t\t\t\t{tableBody}\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn (\n\t\t\t<div id={id} className={className} style={this.props.style}>\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"p-datatable-outer-wrapper\"\n\t\t\t\t\tstyle={{\n            paddingTop: headerHeight ?\n            this.props.className.includes('stripped') ? headerHeight + 45 : headerHeight\n            : 0\n\t\t\t\t\t}}\n\t\t\t\t\tref={(el) => {\n\t\t\t\t\t\tthis.container = el;\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{loader}\n\t\t\t\t\t{headerFacet}\n\t\t\t\t\t{paginatorTop}\n\t\t\t\t\t{tableContent}\n\t\t\t\t\t{/* {paginatorBottom} */}\n\t\t\t\t\t{footerFacet}\n\t\t\t\t\t{resizeHelper}\n\t\t\t\t\t{resizeIndicatorUp}\n\t\t\t\t\t{resizeIndicatorDown}\n\t\t\t\t</div>\n\t\t\t\t{paginatorBottom}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default MindsDataTable;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport MindsDB from 'mindsdb-js-sdk';\nimport { Dialog } from 'primereact/dialog';\nimport { Button } from 'primereact/button';\nimport { InputText } from 'primereact/inputtext';\nimport { ProgressBar } from 'primereact/progressbar';\nimport './index.scss';\n\nclass UrlWin extends Component {\n  static propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onHide: PropTypes.func.isRequired\n  };\n\n  state = {\n    name: '',\n    url: '',\n    importing: false,\n    validUrl: true\n  };\n\n  onShow = () => {\n    this.setState({\n      name: '',\n      url: '',\n      importing: false,\n      validUrl: true\n    });\n  }\n\n  onAdd = async () => {\n    const { name, url } = this.state;\n    const ds = MindsDB.DataSource({ name });\n\n    this.setState({ importing: true });\n    try {\n      await ds.uploadFromUrl(url);\n      // window.growl.show({ severity: 'success', detail: 'Data source added' });\n      const { onHide } = this.props;\n      onHide(true);\n    } catch (e) {\n      // window.showError(e);\n      this.setState({ importing: false });\n    }\n  };\n\n  isValidUrl = (value) => {\n    return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(value);\n  };\n\n  setFieldValue = (e) => {\n    if (e.target.name === 'url') {\n      if (!this.isValidUrl(e.target.value)) {\n        this.setState({\n          validUrl: false\n        });\n        return;\n      }\n    }\n    this.setState({\n      [e.target.name]: e.target.value,\n      validUrl: true\n    });\n  };\n\n  render() {\n    const {\n      name, url, importing, validUrl\n    } = this.state;\n    const invalid = !name || !url || !validUrl;\n    const header = importing ? 'Importing data source' : 'New data source from url';\n    return (\n      <Dialog\n        visible={ this.props.visible }\n        onShow={ this.onShow }\n        onHide={ this.props.onHide }\n        modal\n        header={ header }\n        className=\"minds-upload-source\"\n\n      >\n        { importing\n          ? <ProgressBar mode=\"indeterminate\" />\n          : (\n            <div>\n              <div className=\"p-inputgroup minds-inputgroup\">\n                <span className=\"p-inputgroup-addon minds-inputgroup-addon\">Name:</span>\n                <InputText\n                  name=\"name\"\n                  placeholder=\"Name your new dataset\"\n                  onChange={ this.setFieldValue }\n                />\n              </div>\n              <div className=\"p-inputgroup minds-inputgroup\">\n                <span className=\"p-inputgroup-addon minds-inputgroup-addon\">URL:</span>\n                <InputText\n                  name=\"url\"\n                  placeholder=\"https://example.com/myFile.csv\"\n                  className={ !validUrl ? 'inputError' : '' }\n                  onChange={ this.setFieldValue }\n                />\n              </div>\n              {!validUrl && (\n                <div className=\"errorText\">Please enter a valid Url</div>\n              )}\n              <div className=\"separate-btns\">\n                <Button\n                  className=\"minds-action-btn red\"\n                  type=\"button\"\n                  label={ (\n                    <div className=\"icon-text\">\n                      <span>CANCEL</span>\n                    </div>\n                  ) }\n                  onClick={ this.props.onHide }\n                />\n                <Button\n                  className=\"minds-action-btn\"\n                  type=\"button\"\n                  label={ (\n                    <div className=\"icon-text\">\n                      <span>ADD</span>\n                    </div>\n                  ) }\n                  onClick={ this.onAdd }\n                  disabled={ invalid }\n                />\n              </div>\n            </div>\n          )\n        }\n      </Dialog>\n    );\n  }\n}\n\nexport default UrlWin;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport MindsDB from 'mindsdb-js-sdk';\nimport { Dialog } from 'primereact/dialog';\nimport { Button } from 'primereact/button';\nimport { InputText } from 'primereact/inputtext';\nimport { ProgressBar } from 'primereact/progressbar';\nimport { Mixpanel } from '../../../utils/mixpanel';\nimport * as Sentry from '@sentry/browser';\n\nimport './index.scss';\n\nclass UploadWin extends Component {\n  static propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onHide: PropTypes.func.isRequired\n  };\n\n  state = {\n    name: '',\n    file: null,\n    uploading: false,\n    percentCompleted: 0\n  };\n\n  onShow = () => {\n    this.setState({\n      uploading: false,\n      name: '',\n      file: null\n    });\n  };\n\n  onUpload = async () => {\n    const { name, file } = this.state;\n    const ds = MindsDB.DataSource({ name });\n\n    this.setState({ uploading: true, percentCompleted: 0 }, async () => {\n      try {\n        await ds.upload(file, this.onUploadProgress);\n        // window.growl.show({ severity: 'success', detail: 'Data source uploaded' });\n        Mixpanel.track('File uploaded');\n        const { onHide } = this.props;\n        onHide(true, name);\n      } catch (e) {\n        // window.showError(e);\n        Sentry.captureException(e);\n        this.setState({ uploading: false });\n      }\n    });\n  };\n\n  onUploadProgress = (percentCompleted) => {\n    this.setState({ percentCompleted });\n  };\n\n  onPickFile = (e) => {\n    if (e.target.files && e.target.files.length) {\n      const file = e.target.files[0];\n      this.setState({ file });\n    } else {\n      this.setState({ file: null });\n    }\n  };\n\n  setFieldValue = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  render() {\n    const { name, file, uploading, percentCompleted } = this.state;\n    const invalid = !name || !file;\n    const header = uploading ? 'Uploading ...' : 'New Datasource';\n    const emptyCls = file ? '' : 'minds-file-input-value__empty';\n    const fileTitle = file ? file.name : 'Click Here to Choose a File.';\n    return (\n      <Dialog\n        visible={ this.props.visible }\n        onHide={ this.props.onHide }\n        onShow={ this.onShow }\n        modal\n        header={ header }\n        className=\"minds-upload-source\"\n      >\n        { uploading\n          ? <ProgressBar value={ percentCompleted } unit='% Analysing data' />\n          : (\n            <div>\n              <div className=\"p-inputgroup minds-inputgroup\">\n                <span className=\"p-inputgroup-addon minds-inputgroup-addon\">File:</span>\n                <div style={{width:'100%'}}>\n                  <div className={ `minds-file-input-value ${emptyCls}` }>{fileTitle}</div>\n                  <input\n                    title={ fileTitle }\n                    placeholder=\"fileTitle\"\n                    type=\"file\"\n                    id=\"file-input\"\n                    className=\"minds-file-input mdb-input\"\n                    onChange={ this.onPickFile }\n                  />\n                </div>\n              </div>\n              <div className=\"p-inputgroup minds-inputgroup\">\n                <span className=\"p-inputgroup-addon minds-inputgroup-addon\">Name:</span>\n                <InputText\n                  name=\"name\"\n                  className=\"minds-input mdb-input\"\n                  placeholder=\"Name Your New Datasource\"\n                  value={ this.state.name }\n                  onChange={ this.setFieldValue }\n                  maxLength=\"100\"\n                />\n              </div>\n              <div className=\"separate-btns\">\n                <Button\n                  className=\"minds-action-btn red\"\n                  type=\"button\"\n                  label={ (\n                    <div className=\"icon-text\">\n                      <span>CANCEL</span>\n                    </div>\n                  ) }\n                  onClick={ this.props.onHide }\n                />\n                <Button\n                  className=\"minds-action-btn\"\n                  type=\"button\"\n                  label={ (\n                    <div className=\"icon-text\">\n                      <span>UPLOAD</span>\n                    </div>\n                  ) }\n                  onClick={ this.onUpload }\n                  disabled={ invalid }\n                />\n              </div>\n            </div>\n          )\n        }\n      </Dialog>\n    );\n  }\n}\n\nexport default UploadWin;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Dialog } from 'primereact/dialog';\nimport { Button } from 'primereact/button';\nimport './index.scss';\n\nconst DeleteWin = (props) => (\n  <Dialog\n    visible={ props.visible }\n    onHide={ props.onHide }\n    modal\n    header=\"Delete Datasource\"\n    className=\"minds-upload-source\"\n  >\n    <span>\n      Are you sure want to delete datasource &apos;{ props.name }&apos;?\n    </span>\n    <div className=\"separate-btns\">\n      <Button\n        className=\"minds-action-btn\"\n        type=\"button\"\n        label=\"CANCEL\"\n        onClick={ props.onHide }\n      />\n      <Button\n        className=\"minds-action-btn red\"\n        type=\"button\"\n        label=\"DELETE\"\n        onClick={ () => { props.onDelete(props.name); } }\n      />\n    </div>\n  </Dialog>\n);\n\nDeleteWin.propTypes = {\n  visible: PropTypes.bool.isRequired,\n  onHide: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  name: PropTypes.string\n};\n\nDeleteWin.defaultProps = {\n  name: null\n};\n\nexport default DeleteWin;\n","export const wrapHistXY = histData => {\n  function parse(val) {\n    //check if is number or text\n    if (isNaN(val)) {\n      return val;\n    } else {\n      //check if is integer\n      if (val % 1 === 0) {\n        return parseInt(val, 10);\n      } else {\n        return parseFloat(parseFloat(val).toFixed(2));\n      }\n    }\n  }\n  if (!histData || !histData.x || !histData.y) {\n    return [];\n  }\n  let list = [];\n  for (let j = 0; j < histData[\"x\"].length; j++) {\n    list.push({ x: parse(histData[\"x\"][j]), y: histData[\"y\"][j] });\n  }\n  list.sort(function (a, b) {\n    return a.x < b.x ? -1 : a.x === b.x ? 0 : 1;\n  });\n  for (let k = 0; k < list.length; k++) {\n    histData[\"x\"][k] = list[k].x;\n    histData[\"y\"][k] = list[k].y;\n  }\n  let { x, y } = histData;\n  if (\n    histData.type === \"categorical\" &&\n    histData.x.length === 2 &&\n    histData.y.length === 2 &&\n    histData.x[0] === \"x\" &&\n    histData.x[1] === \"y\"\n  ) {\n    [x, y] = y;\n  }\n  return x.map((key, index) => ({ x: key, y: y[index] }));\n};\n\nexport const lastEl = arr => arr && arr[arr.length - 1];\n\nexport const getIconClass = type => {\n  switch (type) {\n    case \"info\":\n      return \"pi-info-circle\";\n    case \"warning\":\n      return \"pi-exclamation-triangle\";\n    case \"error\":\n      return \"pi-times\";\n    default:\n      return \"\";\n  }\n};\n\nexport const qualityWarnings = (data) => {\n  const { unique, empty, bias, outliers, typing } = data;\n  const detectDataType = typing && typing.data_type !== 'Text';\n\n  return {\n    unique: unique && unique.unique_values === 1 && detectDataType ? true : false,\n    empty: empty && empty.empty_percentage > 0.05 && detectDataType  ? true : false,\n    bias: bias && bias.entropy < 0.80 && detectDataType && typing.data_type !== \"Numeric\" ? true  : false,\n    outliers: outliers && outliers.outlier_buckets.length > 0 && detectDataType  ? true : false\n  }\n};\n\nexport const filterAxisData = (source, key) => {\n  return source.map(item => {\n    if (item.hasOwnProperty(key)) {\n      return item[key];\n    }\n    return null;\n  });\n};\n\nexport const utcStringToUSDateTimeString = (str) =>\n  new Date(str).toLocaleDateString(\"en-US\") +\n  \" \" +\n  new Date(str).toLocaleTimeString(\"en-US\");\n\nexport const chunkArray = (arr, size) =>\n  arr.map((_, i) =>\n    (i % size === 0 ? arr.slice(i, i + size) : null)).filter(Boolean);\n\n\nexport const getMid = (range) => {\n  const floatRange = range.map(el => parseFloat(el));\n  if (floatRange % 2 === 1) {\n    return range[Math.floor(floatRange.length / 2) + 1].toFixed(2);\n  }\n  const floorIndex = Math.floor(floatRange.length / 2);\n  const ceilIndex = Math.floor(floatRange.length / 2);\n  const minValue = Math.min(floatRange[floorIndex], floatRange[ceilIndex]);\n  const maxValue = Math.max(floatRange[floorIndex], floatRange[ceilIndex]);\n  if (!isNaN(minValue + (maxValue - minValue) / 2)) {\n    return (minValue + (maxValue - minValue) / 2).toFixed(2).toString();\n  }\n}\n\nexport const getDataByBuckets = (packBand, dataType, data) => {\n  const { matrix, predicted, real } = data;\n  let tableData = [];\n\n  /*\n  *  This snippet code is to generate buckets divide in 10 by default for not show\n  *  the whole information and create based an iteration in each array return from the backend\n  *  besides. assign each value based to the predicted field  */\n  if (dataType === \"numeric\" && packBand !== \"50\") {\n    const pack = 50 / parseInt(packBand, 10);\n    for (let i = 0; i < 50; i += pack) {\n      if (getMid(predicted.slice(i, i + pack))) {\n        const row = { predictedField: getMid(predicted.slice(i, i + pack)) };\n        for (let j = 0; j < 50; j += pack) {\n          let count = 0;\n          for (let ii = 0; ii < pack; ii++) {\n            for (let jj = 0; jj < pack; jj++) {\n              if (matrix[i + ii] && matrix[j + jj]) {\n                count += matrix[i + ii][j + jj];\n              }\n            }\n\n            row[getMid(predicted.slice(j, j + pack))] = count;\n          }\n        }\n        tableData.push(row);\n      }\n    }\n  } else {\n    tableData = matrix.map((_el, rowIndex) => {\n      let result = { predictedField: predicted[rowIndex] };\n      if (dataType === \"numeric\") {\n        result = { predictedField: parseFloat(predicted[rowIndex]).toFixed(2) };\n      }\n      real.forEach((_fieldName, columnIndex) => result[predicted[columnIndex]] = matrix[rowIndex][columnIndex]);\n      return result;\n    });\n  }\n\n  return tableData;\n}\n\nexport const normalizeDataConfMatrix = (tableData, columns) => {\n  const columnsSums = {};\n  for (let i = 0; i < columns.length; i++) {\n    columnsSums[`${columns[i]}`] = tableData.reduce(\n      (prev, next) => prev + next[`${columns[i]}`], 0);\n  }\n\n  tableData.forEach((row) => {\n    for (let i = 0; i < columns.length; i++) {\n      const index = `${columns[i]}`;\n      row[index] = parseFloat((row[index] / columnsSums[index]).toFixed(2));\n    }\n  });\n\n  return tableData;\n}\n\nexport const messageNotification = (messages, type, title, msg, sticky) => {\n  messages.show({severity: type, summary: title, detail: msg, sticky});\n};\n","import React from 'react';\nimport PropTypes from \"prop-types\";\n\nimport \"./index.scss\";\n\n// const { shell } = require('electron');\n\nconst EmptyPage = ({ noneBorder, topMessage, customIcon, bottomMessage, isHasButton, customBtnPosition, inProgressText, inProgressLink, inProgressTextLink}) => {\n  const openJira = (e) => {\n    e.preventDefault();\n    // shell.openExternal('https://mindsdb.atlassian.net/servicedesk/customer/portals');\n  }\n\n  const openInProgressPage = (e) => {\n    e.preventDefault();\n    // shell.openExternal(inProgressLink);\n  }\n\n  return (\n  <div className={`empty-page-container ${noneBorder ? '' :'border-container'}`} >\n    <div className=\"message\">\n      <strong>{topMessage}&nbsp;</strong>\n      <i className={`fas ${customIcon ? customIcon : 'fa-user-astronaut'} `}></i>\n      <strong className=\"text-width\">{bottomMessage}</strong>\n      <div className=\"more-information\">\n        {inProgressText && <p className=\"text-in-progress\"><i className=\"fas fa-exclamation-triangle\"></i>{inProgressText}</p>}\n        <a href=\"#/\" onClick={openInProgressPage} className=\"text-width\">{inProgressTextLink}</a>\n      </div>\n    </div>\n    {isHasButton && (\n      <button className=\"btn-report\" style={{margin: customBtnPosition}} onClick={openJira}>\n        <i className=\"fas fa-bug\" />\n        Report{' '}\n      </button>\n    )\n    }\n  </div>\n)};\n\nEmptyPage.propTypes = {\n  noneBorder: PropTypes.string,\n  topMessage: PropTypes.string,\n  customIcon: PropTypes.string,\n  bottomMessage: PropTypes.string,\n  customBtnPosition: PropTypes.string,\n  isHasButton: PropTypes.bool,\n}\n\nEmptyPage.defaultProps = {\n  noneBorder: '',\n  topMessage: '',\n  customIcon: '',\n  bottomMessage: '',\n  customBtnPosition: '',\n  isHasButton: false,\n};\n\nexport default EmptyPage;\n","import { observable, action, runInAction, decorate } from 'mobx';\n\nclass DataSourceStore {\n  dataSource = null;\n  dataSourceId = null;\n  fields = [];\n\n  data = [];\n  total = 0;\n  rows = 200;\n  first = 0;\n  page = 0;\n  sort = {};\n  filters = {};\n\n  loading = false;\n  loaded = false;\n\n  loadTimeout = null;\n\n  reset = () => {\n    this.loading = false;\n    this.loaded = false;\n    this.data = [];\n    this.total = 0;\n    this.rows = 200;\n    this.first = 0;\n    this.page = 0;\n    this.sort = {};\n    this.filters = {};  // {field: {value: x}}\n  };\n\n  updatePage = ({ rows, page }) => {\n    this.rows = rows;\n    this.page = page;\n    this.load({ reload: true });\n  };\n\n  updateSort = ({ sortField, sortOrder }) => {\n    this.sort = { sortField, sortOrder };\n    this.load({ reload: true });\n  };\n\n  updateFilter = (filters) => {\n    this.filters = Object.keys(filters).reduce((accum, fieldName) => {\n      accum[fieldName] = {\n        value: filters[fieldName].value\n      };\n      return accum;\n    }, {});\n    if (this.loadTimeout != null) {\n      clearTimeout(this.loadTimeout);\n    }\n    this.loadTimeout = setTimeout(() => {\n      this.loadTimeout = null;\n      this.page = 0;\n      this.load({ reload: true });\n    }, 500);\n  };\n\n  setDataSource = (dataSource) => {\n    this.reset();\n\n    this.dataSource = dataSource;\n    this.dataSourceId = dataSource.name;\n    this.fields = dataSource.columns;\n    this.load();\n  };\n\n  load = async ({ reload = false } = { reload: false }) => {\n    if (this.loadTimeout != null) {\n      clearTimeout(this.loadTimeout);\n    }\n    if (this.loaded && reload !== true) {\n      return null;\n    }\n    this.loading = true;\n    try {\n      const params = this.getTableQueryParams();\n      const data = await this.dataSource.loadData(params);\n      runInAction(() => {\n        for(let i in data.data){\n          for(let key in data.data[i]){\n              if(key.includes('.')){\n              let newKey = key.replace(/\\./g, '_');\n              data.data[i][newKey]=data.data[i][key];\n              delete data.data[i][key];\n            }\n          }\n        }\n        this.data = data.data;\n        this.total = data.rowcount;\n        this.first = this.page * this.rows;\n        this.loading = false;\n      });\n    } catch (e) {\n      // window.showError(e);\n      runInAction(() => { this.loading = false; });\n    }\n  };\n\n  getTableQueryParams = () => {\n    const params = [\n      { key: 'page[size]', value: this.rows },\n      { key: 'page[offset]', value: this.page * this.rows },\n      { key: 't', value: (new Date()).getTime() }\n    ];\n    Object.keys(this.filters).forEach((field) => {\n      if (\n        'value' in this.filters[field]\n        && typeof this.filters[field].value === 'string'\n        && this.filters[field].value.length > 0\n      ) {\n        params.push({\n          key: `filter[${field}]`,\n          value: this.filters[field].value\n        });\n      }\n    });\n    // TODO add sort\n    // if (\n    //   this.sort.sortField != null\n    //   && this.sort.sortOrder != null\n    // ) {\n    // }\n    return params;\n  };\n}\n\ndecorate(DataSourceStore, {\n  dataSource : observable,\n  dataSourceId : observable,\n  fields : observable,\n  data : observable,\n  total : observable,\n  rows : observable,\n  first : observable,\n  page : observable,\n  sort : observable,\n  filters : observable,\n  loading : observable,\n  loaded : observable,\n  reset: action,\n  updatePage: action,\n  updateSort: action,\n  updateFilter: action,\n  setDataSource: action,\n  load: action,\n});\n\nexport default new DataSourceStore();\n","import { action, observable, runInAction, decorate } from 'mobx';\n\nclass DataSourceQualityStore {\n  dataSourceName = null;\n  data = null;\n  dataSource = null;\n  loading = false;\n  loaded = false;\n  analyzeStatus = 'analyzing';\n\n  async loadDataQuality(dataSource, params) {\n    this.dataSourceName = dataSource.name;\n    this.dataSource = dataSource;\n    this.loading = true;\n    this.analyzeStatus = 'analyzing';\n\n    try {\n      const dataQuality = await dataSource.loadDataQuality(params);\n      if (dataQuality.status === 'analyzing') {\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(this.loadDataQuality(dataSource, params));\n          }, 5000);\n        });\n      }\n\n      runInAction(() => {\n        this.data = dataQuality;\n        this.loading = this.data.status !== \"analyzing\" ? false : true;\n        this.loaded = true;\n        this.analyzeStatus = this.data.status;\n      });\n    } catch (e) {\n      // window.showError(e);\n      runInAction(() => this.loading = false);\n    }\n  }\n}\n\ndecorate(DataSourceQualityStore, {\n  dataSourceName: observable,\n  data: observable,\n  dataSource: observable,\n  loading: observable,\n  loaded: observable,\n  loadDataQuality: action,\n});\n\nexport default new DataSourceQualityStore();\n","import { action, observable, runInAction, decorate } from \"mobx\";\n\nclass PredictorStore {\n  data = {};\n\n  loading = false;\n\n  loaded = false;\n\n  async loadPreview(predictor, params) {\n    this.data = predictor;\n    this.loading = true;\n    try {\n      const data = await predictor.load(params);\n      runInAction(() => {\n        this.data = data;\n        this.loading = false;\n        this.loaded = true;\n      });\n    } catch (e) {\n      // window.showError(e);\n      runInAction(() => {\n        this.loading = false;\n      });\n    }\n  }\n}\n\ndecorate(PredictorStore, {\n  data: observable,\n  loading: observable,\n  loaded: observable,\n  loadPreview: action,\n});\n\nexport default new PredictorStore();\n","import { action, observable, decorate } from 'mobx';\n\nimport dataSourceStore from './dataSource';\nimport DataSourceQualityStore from './dataSourceQuality';\nimport predictorStore from './predictor';\n\nclass NavigationStore {\n  stage = 'empty'; // [datasources|config|predictors|predictorView|predictorDataQuality|query|empty]\n  dataSource = null;\n  predictor = null;\n  queryPredictorName = null;\n  predictorDataQualityCol = null;\n\n  setStage(stage) {\n    this.stage = stage;\n    this.predictorDataQualityCol = null;\n  }\n\n  openDataPreview(dataSource) {\n    dataSourceStore.setDataSource(dataSource);\n    this.stage = 'dataSourcePreview';\n    this.dataSource = dataSource;\n    this.predictorDataQualityCol = null;\n  }\n\n  openDataQuality(dataSource, params) {\n    DataSourceQualityStore.loadDataQuality(dataSource, params);\n    this.stage = 'dataSourceQuality';\n    this.dataSource = dataSource;\n    this.predictorDataQualityCol = null;\n  }\n\n  openPredictor(predictor, params) {\n    predictorStore.loadPreview(predictor, params);\n    this.stage = 'predictorView';\n    this.dataSource = null;\n    this.predictor = predictor;\n    this.predictorDataQualityCol = null;\n  }\n\n  openQuery(predictorName) {\n    this.queryPredictorName = predictorName;\n    this.stage = 'query';\n    this.predictorDataQualityCol = null;\n  }\n\n  openPredictorDataQuality(col){\n    this.stage = 'predictorDataQuality';\n    this.predictorDataQualityCol = col;\n  }\n}\n\ndecorate(NavigationStore, {\n  stage: observable,\n  dataSource: observable,\n  predictor: observable,\n  queryPredictorName: observable,\n  predictorDataQualityCol: observable,\n  setStage: action,\n  openDataPreview: action,\n  openDataQuality: action,\n  openPredictor: action,\n  openQuery: action,\n  openPredictorDataQuality: action,\n});\n\nexport default new NavigationStore();\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport MindsDB from \"mindsdb-js-sdk\";\nimport { Column } from \"primereact/column\";\nimport { Button } from \"primereact/button\";\nimport { observer } from \"mobx-react\";\nimport DataTable from '../ui/mindsDataTable';\nimport UrlWin from \"./urlWin\";\nimport UploadWin from \"./uploadWin\";\nimport DeleteWin from \"./deleteWin\";\nimport { utcStringToUSDateTimeString } from \"../../utils/funcs\";\nimport EmptyPage from \"../common/emptyPage\";\nimport navigation from \"../../store/navigation\";\nimport { Mixpanel } from \"../../utils/mixpanel\";\nimport { TitleBar } from \"../ui/TittleBar\"\nimport DarkMode from \"../ui/darkMode\";\n\nimport \"./index.scss\";\n\n// const ipcRenderer = require(\"electron\").ipcRenderer;\n\n@observer\nclass Datasources extends Component {\n  static propTypes = {\n    dataSourcesStore: PropTypes.object.isRequired\n  };\n\n  state = {\n    urlWinVisible: false,\n    uploadWinVisible: false,\n    deleteWinVisible: false,\n\n    deletingName: null,\n\n    thWidths: null,\n    thHeight: null\n  };\n\n  interval = null;\n\n  componentWillMount() {\n    // ipcRenderer.on(\"fileReaded\", this.onFileReaded);\n    const { dataSourcesStore } = this.props;\n\n    if (\n      dataSourcesStore.loaded === false &&\n      dataSourcesStore.loading === false\n    ) {\n      dataSourcesStore.load();\n    }\n    this.interval = setInterval(() => {\n      if (dataSourcesStore.loading === false) {\n        dataSourcesStore.load();\n      }\n    }, 5000);\n  }\n\n  componentDidMount() {\n    this.resizeObserver = new ResizeObserver(this.onResize);\n    this.mutationObserver = new MutationObserver(this.onResize);\n    this.resizeObserver.observe(this.wrapperRef);\n    this.mutationObserver.observe(this.wrapperRef, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  componentWillUnmount() {\n    this.resizeObserver.disconnect();\n    this.mutationObserver.disconnect();\n    // ipcRenderer.removeListener(\"fileReaded\", this.onFileReaded);\n    clearInterval(this.interval);\n  }\n\n  onResize = () => {\n    // get cells widths\n    const row = this.wrapperRef.querySelector(\".p-datatable-row\");\n    let thWidths = null;\n    let thHeight = null;\n    if (row) {\n      thWidths = new Array(row.children.length);\n      for (let i = 0; i < row.children.length; i++) {\n        thWidths[i] = row.children[i].getClientRects()[0].width;\n      }\n    }\n    // get title height\n    const header = this.wrapperRef.querySelector(\".p-datatable-thead > tr\");\n    if (header) {\n      thHeight = header.getBoundingClientRect().height;\n    }\n    this.setState({\n      thWidths,\n      thHeight\n    });\n  };\n\n  fileReadingPromises = {};\n\n  onFileReaded = async (event, args) => {\n    if (args.err != null) {\n      if (args.err === \"ENOENT\") {\n        // window.growl.show({\n        //   severity: \"error\",\n        //   summary: \"error\",\n        //   detail: \"File not exist\"\n        // });\n      } else {\n        // window.growl.show({\n        //   severity: \"error\",\n        //   summary: \"error\",\n        //   detail: `Unknown error: ${args.err}`\n        // });\n      }\n      return;\n    }\n    const file = new Blob([args.file]);\n\n    await MindsDB.DataSource({ name: args.datasourceName }).uploadFile({\n      column: args.columnName,\n      rowIndex: args.index,\n      extension: args.extension,\n      file\n    });\n\n    const promiseName = `${args.datasourceName}:${args.columnName}:${args.index}`;\n    this.fileReadingPromises[promiseName]();\n    delete this.fileReadingPromises[promiseName];\n  };\n\n  reload = async () => {\n    const { dataSourcesStore } = this.props;\n\n    await dataSourcesStore.load();\n  };\n\n  hideUrlWin = needReload => {\n    this.setState({\n      urlWinVisible: false\n    });\n    if (needReload) {\n      this.reload();\n    }\n  };\n\n  showUrlWin = () => {\n    this.setState({\n      urlWinVisible: true\n    });\n    Mixpanel.track(\"Datasources > Upload By Url\");\n  };\n\n  hideUploadWin = async (needReload, newDataSourceName) => {\n    this.setState({\n      uploadWinVisible: false\n    });\n    if (typeof needReload === \"boolean\" && needReload === true) {\n      await this.reload();\n      const newDS = this.props.dataSourcesStore.getByName(newDataSourceName);\n      if (newDS == null)\n        throw new Error(\n          `${this.constructor.name}.hideUploadWin: cant find DS with name ${newDataSourceName}`\n        );\n      if (newDS[\"missed_files\"] === true) {\n        await newDS.loadMissedFileList();\n        for (let i = 0; i < newDS.missedFileList.data.length; i++) {\n          const path = newDS.missedFileList.data[i].path;\n          const datasourceName = newDS.name;\n          const columnName = newDS.missedFileList.data[i][\"column_name\"];\n          const index = newDS.missedFileList.data[i].index;\n          const code = await new Promise(resolve => {\n            this.fileReadingPromises[\n              `${datasourceName}:${columnName}:${index}`\n            ] = resolve;\n            // ipcRenderer.send(\"readFile\", {\n            //   datasourceName,\n            //   columnName,\n            //   index,\n            //   path\n            // });\n          });\n          if (code !== 200) {\n            // window.growl.show({\n            //   severity: \"error\",\n            //   summary: \"error\",\n            //   detail: `Cant upload file ${path}`\n            // });\n          }\n        }\n      }\n    }\n  };\n\n  showUploadWin = () => {\n    this.setState({\n      uploadWinVisible: true\n    });\n    Mixpanel.track(\"Datasources > Upload File\");\n  };\n\n  showDeleteWin = name => {\n    this.setState({\n      deleteWinVisible: true,\n      deletingName: name\n    });\n  };\n\n  hideDeleteWin = () => {\n    this.setState({\n      deleteWinVisible: false,\n      deletingName: null\n    });\n  };\n\n  /* eslint-disable */\n  actionTemplate = (rowData, column) => {\n    return (\n      <div className=\"minds-table__actions\">\n        <Button\n          type=\"button\"\n          className=\"minds-action-btn lg-btn\"\n          label=\"QUALITY\"\n          onClick={e => {\n            e.preventDefault();\n            e.stopPropagation();\n            navigation.openDataQuality(rowData);\n            Mixpanel.track(\"Datasources > Quality\");\n          }}\n        ></Button>\n        <Button\n          type=\"button\"\n          className=\"minds-action-btn lg-btn\"\n          label=\"PREVIEW\"\n          onClick={e => {\n            e.preventDefault();\n            e.stopPropagation();\n            navigation.openDataPreview(rowData);\n            Mixpanel.track(\"Datasources > Preview\");\n          }}\n        ></Button>\n        <Button\n          type=\"button\"\n          className=\"minds-action-btn sm-btn\"\n          label={\n            <span className=\"minds-action-btn__icon\">\n              <i className={\"fas fa-download\"} />\n            </span>\n          }\n          onClick={e => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            this.props.dataSourcesStore.download({\n              name: rowData.name,\n              source_type: rowData[\"source_type\"],\n              source: rowData.source\n            });\n            Mixpanel.track(\"Datasources > Download\");\n          }}\n        ></Button>\n        <Button\n          type=\"button\"\n          className=\"minds-action-btn red\"\n          label={\n            <span className=\"minds-action-btn__icon\">\n              <i className={\"fas fa-trash\"} />\n            </span>\n          }\n          onClick={e => {\n            e.preventDefault();\n            e.stopPropagation();\n            this.showDeleteWin(rowData.name);\n            Mixpanel.track(\"Datasources > Delete\");\n          }}\n        ></Button>\n      </div>\n    );\n  };\n  /* eslint-enable */\n\n  onDeleteDatasource = name => {\n    this.props.dataSourcesStore.delete({ name });\n\n    this.hideDeleteWin();\n  };\n\n  onSelectionChange = e => {\n    navigation.openDataQuality(e.value);\n  };\n\n  dtTemplate = (rowData, column) => {\n    if (typeof rowData[column.field] !== \"string\") return rowData[column.field];\n    return utcStringToUSDateTimeString(rowData[column.field]);\n  };\n\n  sourceTemplate = (rowData, column) => {\n    if (\n      rowData[\"source_type\"] !== \"file\" ||\n      typeof rowData[column.field] !== \"string\"\n    )\n      return rowData[column.field];\n    const v = rowData[column.field].split(\"/\");\n    return v[v.length - 1];\n  };\n\n  render() {\n    const { dataSourcesStore } = this.props;\n    const { thWidths, thHeight } = this.state;\n\n    // const { verticalScrollExists } = this.state;\n    const cols = [\n      {\n        field: \"name\",\n        header: \"NAME\",\n        class: \"name\"\n      },\n      {\n        field: \"source\",\n        header: \"SOURCE\",\n        body: this.sourceTemplate\n      },\n      {\n        field: \"row_count\",\n        header: \"ROWS\",\n        class: \"rows\"\n      },\n      {\n        field: \"created_at\",\n        header: \"DATE ADDED\",\n        body: this.dtTemplate,\n        class: \"added\"\n      }\n    ];\n\n    const columns = cols.map((col, index) => (\n      <Column\n        key={col.field}\n        {...col}\n        sortable\n        className={col.class}\n        headerStyle={{\n          width: thWidths ? thWidths[index] : undefined,\n          maxWidth: thWidths ? thWidths[index] : undefined\n        }}\n      />\n    ));\n    columns.push(\n      <Column\n        body={this.actionTemplate}\n        key=\"actions-column\"\n        style={{ textAlign: \"center\", width: \"12em\" }}\n      />\n    );\n\n    return (\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <div className=\"content-dm\">\n            <div className=\"dm-items\">\n              <TitleBar>Datasets</TitleBar>\n            </div>\n            <DarkMode />\n          </div>\n        </div>\n        <div\n          className=\"main-content__body table-fit-scroll\"\n          style={{\n            paddingBottom: \"6rem\",\n            overflow: dataSourcesStore.data.length === 0 ? \"hidden\" : \"auto\"\n          }}\n          ref={r => {\n            this.wrapperRef = r;\n          }}\n        >\n          {dataSourcesStore.data.length === 0 ? (\n            <EmptyPage\n              topMessage=\"There is nothing here yet.\"\n              bottomMessage=\"Upload your first datasource to begin\"\n            />\n          ) : (\n              <DataTable\n                value={dataSourcesStore.data}\n                headerHeight={thHeight}\n                className=\"minds-table card datasources-datatable\"\n                selectionMode=\"single\"\n                onSelectionChange={this.onSelectionChange}\n                loading={dataSourcesStore.loading}\n              >\n                {columns}\n              </DataTable>\n            )}\n          <UrlWin visible={this.state.urlWinVisible} onHide={this.hideUrlWin} />\n          <UploadWin\n            visible={this.state.uploadWinVisible}\n            onHide={this.hideUploadWin}\n          />\n          <DeleteWin\n            visible={this.state.deleteWinVisible}\n            onHide={this.hideDeleteWin}\n            onDelete={this.onDeleteDatasource}\n            name={this.state.deletingName}\n          />\n        </div>\n        <div className=\"fixed-buttons\">\n          <Button\n            className=\"minds-action-btn\"\n            type=\"button\"\n            icon=\"fas fa-dolly-flatbed\"\n            label=\"     UPLOAD\"\n            onClick={this.showUploadWin}\n          />\n          <Button\n            className=\"minds-action-btn\"\n            type=\"button\"\n            icon=\"fas fa-link\"\n            label=\"ADD BY URL\"\n            onClick={this.showUrlWin}\n          />\n          <Button\n            className=\"minds-action-btn\"\n            type=\"button\"\n            icon=\"fas fa-redo\"\n            label=\"REFRESH\"\n            onClick={this.reload}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Datasources;\n","import styled from '@emotion/styled';\nimport { Messages } from 'primereact/messages';\n\nimport { Colors } from '../../ui/Colors';\n\nexport const MSG = styled(Messages)`\n  .p-messages-close-icon,\n  .p-messages-icon::before,\n  .p-messages-wrapper {\n    color: white;\n  }\n  .p-messages .p-messages-close  {\n    top: 1rem;\n    right: 1rem;\n  }\n  .p-messages.p-messages-success {\n    background-color: ${Colors.selectedBreacump};\n    margin: 20px;\n  }\n  .p-messages.p-messages-error {\n    background-color: ${Colors.watermelon};\n    margin: 20px;\n  }\n  .p-messages.p-messages-warn {\n    background-color: ${Colors.yellow};\n    margin: 20px;\n  }\n  .p-messages.p-messages-info {\n    background-color: ${Colors.hoverBar};\n    margin: 20px;\n  }\n`\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { MSG } from './styles';\n\nconst NotificationMsg = ({ refElement}) => (\n  <MSG ref={refElement} />\n)\n\nNotificationMsg.propTypes = {\n  refElement: PropTypes.func.isRequired,\n}\n\nexport default NotificationMsg;\n","import styled from '@emotion/styled';\nimport { Colors } from '../../ui/Colors';\n\nexport const InputTitle = styled.span`\n  color: ${Colors.mirage};\n  border: none;\n  background-color: #fff;\n  padding: 0;\n  text-align: left;\n  width: 100%;\n  font-weight: 700;\n  margin-bottom: 10px;\n`;\n\nexport const QuestionsContainer = styled.div`\n  display: grid;\n  justify-content: center;\n  grid-template-columns: repeat(2, 1fr);\n  column-gap: 10px;\n`;\n\nexport const BreadcrumbItem = styled.div`\n  display: inline-block;\n  font-family: Karla;\n  font-size: 16px;\n  line-height: 16px;\n  font-weight: normal;\n  font-stretch: normal;\n  font-style: normal;\n  line-height: normal;\n  letter-spacing: normal;\n  margin-right: 20px;\n  &:not(:first-of-type)::before {\n    content: '>';\n    margin-right: 20px;\n  }\n`;\n","import React, { useState, useEffect } from 'react';\nimport * as Yup from 'yup';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { Dialog } from 'primereact/dialog';\nimport { InputTitle, QuestionsContainer } from './styles';\nimport { Dropdown } from 'primereact/dropdown';\nimport { Button } from 'primereact/button';\nimport MindsDB from 'mindsdb-js-sdk';\nimport \"./index.scss\";\n\nconst NeoDBConnectionWin = ({ visible, onHide, isEdit, showMessage }) => {\n  const [type, setType] = useState('');\n  useEffect(() => {\n    setType(isEdit.type);\n  }, [isEdit]);\n  const formSchema = Yup.object().shape({\n    user: Yup.string().required('user is required'),\n    password: Yup.string(),\n    host: Yup.string().required('host is required'),\n    DatabaseName: Yup.string().required('Database name is required'),\n    port: Yup.number()\n      .typeError('port must be a number')\n      .positive('port must be greater than zero')\n      .max(65353)\n      .required('port is required'),\n  });\n  const onShow = () => {\n    console.log('onShow');\n  };\n  return (\n    <Dialog\n      visible={visible}\n      onShow={onShow}\n      onHide={onHide}\n      modal\n      header={'Connect to Database'}\n      className=\"minds-database-source\"\n    >\n      <Formik\n        initialValues={{\n          user: isEdit.user || '',\n          password: isEdit.password || '',\n          DatabaseName: isEdit.database_name || '',\n          port: isEdit.port || '',\n          host: isEdit.host || '',\n        }}\n        validationSchema={formSchema}\n        onSubmit={async (values) => {\n          const data = {\n            params: {\n              enabled: true,\n              host: values.host,\n              password: values.password,\n              port: values.port,\n              type,\n              database_name: values.DatabaseName,\n              user: values.user,\n            },\n          };\n          await MindsDB.DataBase().create(data);\n          onHide();\n          //TODO pending validation error request #24\n          showMessage('success', 'Data base created')\n        }}\n      >\n        <Form>\n          <QuestionsContainer>\n            <div className=\"p-inputgroup minds-inputgroup\">\n              <InputTitle htmlFor=\"UserName\">Supported Databases: </InputTitle>\n              <Dropdown\n                className=\"mdb-select\"\n                required\n                options={[\n                  { label: 'ClickHouse', value: 'clickhouse' },\n                  { label: 'MariaDB', value: 'mariadb' },\n                ]}\n                placeholder=\"MySQL, MariaDB and more …\"\n                value={type}\n                onChange={(e) => setType(e.target.value)}\n              />\n            </div>\n          </QuestionsContainer>\n          <QuestionsContainer>\n            <div className=\"p-inputgroup minds-inputgroup\">\n              <InputTitle>Host:</InputTitle>\n              <Field\n                className=\"form-control\"\n                name=\"host\"\n                placeholder=\"localhost\"\n                type=\"text\"\n              />\n              <ErrorMessage\n                name=\"host\"\n                component=\"div\"\n                className=\"field-error text-danger\"\n              />\n            </div>\n            <div className=\"p-inputgroup minds-inputgroup\">\n              <InputTitle>Port:</InputTitle>\n              <Field\n                className=\"form-control\"\n                name=\"port\"\n                placeholder=\"3306\"\n                type=\"text\"\n              />\n              <ErrorMessage\n                name=\"port\"\n                component=\"div\"\n                className=\"field-error text-danger\"\n              />\n            </div>\n          </QuestionsContainer>\n          <div>\n            <div className=\"p-inputgroup minds-inputgroup\">\n              <InputTitle>Database Name:</InputTitle>\n              <Field\n                className=\"form-control\"\n                name=\"DatabaseName\"\n                placeholder=\"Username\"\n                type=\"text\"\n              />\n              <ErrorMessage\n                name=\"DatabaseName\"\n                component=\"div\"\n                className=\"field-error text-danger\"\n              />\n            </div>\n          </div>\n          <QuestionsContainer>\n            <div className=\"p-inputgroup minds-inputgroup\">\n              <InputTitle>Username:</InputTitle>\n              <Field\n                className=\"form-control\"\n                name=\"user\"\n                placeholder=\"root\"\n                type=\"text\"\n              />\n              <ErrorMessage\n                name=\"user\"\n                component=\"div\"\n                className=\"field-error text-danger\"\n              />\n            </div>\n            <div className=\"p-inputgroup minds-inputgroup\">\n              <InputTitle>Password:</InputTitle>\n              <Field\n                className=\"form-control\"\n                name=\"password\"\n                placeholder=\"\"\n                type=\"password\"\n              />\n              <ErrorMessage\n                name=\"password\"\n                component=\"div\"\n                className=\"field-error text-danger\"\n              />\n            </div>\n          </QuestionsContainer>\n          <div>\n            <div className=\"separate-btns\">\n              <Button\n                className=\"minds-action-btn red\"\n                type=\"button\"\n                label={\n                  <div className=\"icon-text\">\n                    <span>CANCEL</span>\n                  </div>\n                }\n                onClick={onHide}\n              />\n              <Button\n                className=\"minds-action-btn\"\n                label={\n                  <div className=\"icon-text\">\n                    <span>CREATE</span>\n                  </div>\n                }\n                type=\"submit\"\n                disabled={false}\n              />\n            </div>\n          </div>\n        </Form>\n      </Formik>\n    </Dialog>\n  );\n};\n\nexport default NeoDBConnectionWin;\n","import styled from '@emotion/styled';\n\nexport const RowContainer = styled.div`\n  display: flex;\n`;\nexport const ColContainer = styled.div`\n  width: 380px;\n`;\nexport const QueryContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n\n  button {\n    margin-top: 10px;\n  }\n`;\nexport const ButtonsContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 20px;\n`;","import React, { useState, useEffect } from 'react';\nimport { Dialog } from 'primereact/dialog';\nimport Editor from 'react-simple-code-editor';\nimport { highlight, languages } from 'prismjs/components/prism-core';\nimport { Mixpanel } from \"../../../utils/mixpanel\";\nimport 'prismjs/components/prism-clike';\nimport 'prismjs/components/prism-sql';\nimport 'prismjs/components/prism-regex';\nimport MindsDB from 'mindsdb-js-sdk';\n\nimport './prism.scss';\nimport './styles.scss';\nimport { RowContainer, ColContainer, QueryContainer, ButtonsContainer} from './styles'\n\nimport { InputText } from '../../inputText';\nimport { Button } from 'primereact/button';\n\n\nconst CreateDB = ({ visible, onHide, isEdit }) => {\n  const [code, setCode] = useState('');\n  const [type, setType] = useState('');\n  const [statusDatabase, setStatusDatabase] = useState('');\n  useEffect(() => {\n    setType(isEdit.db_name);\n  }, [isEdit]);\n  const createDataSet = async () => {\n    const data = {\n      query: code,\n      integration_id: isEdit.database_name,\n      name: isEdit.database_name,\n    };\n    await MindsDB.DataBase()\n      .newDataset(data)\n      .then((response) => {\n        if (response.name === 'Error') {\n          // window.growl.show({\n          //   severity: 'error',\n          //   detail: response.message,\n          // });\n        } else {\n          Mixpanel.track(\"Databases > Create Dataset\");\n          // window.growl.show({\n          //   severity: 'success',\n          //   detail: 'Dataset Created',\n          // });\n        }\n        onHide();\n      });\n  };\n  const testDatabase = async () => {\n    await MindsDB.DataBase()\n      .check(isEdit)\n      .then((response) => {\n        setStatusDatabase(\n          response.data ? 'Connection OK' : 'Connection Failed'\n        );\n      })\n      .catch((error) => console.error(error));\n  };\n  return (\n    <Dialog\n      visible={visible}\n      onHide={onHide}\n      modal\n      header=\"Create Dataset from Database\"\n      className=\"minds-dialog width-100\"\n      style={{ width: '750px' }}\n    >\n      <RowContainer>\n        <ColContainer>\n          <div className=\"minds-dialog__field\">\n            <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\n              Database\n            </label>\n            <InputText\n              disabled={true}\n              className=\"mdb-input\"\n              placeholder=\"Database\"\n              value={type}\n            />\n          </div>\n        </ColContainer>\n\n        <QueryContainer>\n          <div className=\"minds-dialog__field\">\n            <label htmlFor=\"cb5\" className=\"p-checkbox-label\">\n              Query:\n            </label>\n            <Editor\n              className=\"code-box\"\n              value={code}\n              onValueChange={(jsSample) => setCode(jsSample)}\n              highlight={(jsSample) => highlight(jsSample, languages.sql)}\n              placeholder=\"select * from users;\"\n              padding={10}\n            />\n          </div>\n          <span>{statusDatabase}</span>\n        </QueryContainer>\n      </RowContainer>\n      <ButtonsContainer>\n        <Button\n          className=\"minds-action-btn\"\n          type=\"button\"\n          label=\"TEST\"\n          onClick={testDatabase}\n        />\n        <Button\n          className=\"minds-action-btn red\"\n          type=\"button\"\n          label=\"CANCEL\"\n          onClick={onHide}\n        />\n        <Button\n          className=\"minds-action-btn\"\n          type=\"button\"\n          label=\"CREATE\"\n          onClick={createDataSet}\n        />\n      </ButtonsContainer>\n    </Dialog>\n  );\n};\n\nexport default CreateDB;\n","import React, { useState, useEffect } from 'react';\nimport { Button } from 'primereact/button';\nimport { Column } from 'primereact/column';\nimport MindsDB from 'mindsdb-js-sdk';\n\nimport { TitleBar } from '../ui/TittleBar';\nimport NotificationMsg from '../ui/NotificationMsg';\nimport DataTable from '../ui/mindsDataTable';\n\nimport DarkMode from '../ui/darkMode';\nimport { messageNotification } from '../../utils/funcs';\nimport EmptyPage from '../common/emptyPage';\nimport NeoDBConnectionWin from './newDbConnection';\nimport CreateDB from './newDataset';\nimport { Mixpanel } from '../../utils/mixpanel';\nimport { forEach } from 'lodash';\n\nconst sourceTemplate = (rowData, column) => {\n  if (\n    rowData['source_type'] !== 'file' ||\n    typeof rowData[column.field] !== 'string'\n  )\n    return rowData[column.field];\n  const v = rowData[column.field].split('/');\n  return v[v.length - 1];\n};\nconst cols = [\n  {\n    field: 'type',\n    header: 'DATABASE',\n    class: 'name',\n  },\n  {\n    field: 'host',\n    header: 'HOST',\n    body: sourceTemplate,\n  },\n  {\n    field: 'port',\n    header: 'PORT',\n    class: 'rows',\n  },\n  {\n    field: 'user',\n    header: 'USERNAME',\n    class: 'rows',\n  },\n  {\n    field: 'date_last_update',\n    header: 'DATE LAST UPDATED',\n    body: sourceTemplate,\n    class: 'added',\n  },\n];\n\nconst Databases = () => {\n  const [addDBWinVisible, setAddDBWinVisible] = useState(false);\n  const [showCreateDB, setShowCreateDB] = useState(false);\n  const [dbList, setDbList] = useState([]);\n  const [messages, setMessages] = useState(null);\n  const [isEdit, setIsEdit] = useState([]);\n\n  const loadDBList = () => {\n    MindsDB.DataBase()\n      .load()\n      .then((dbResponse) => {\n        if (dbResponse.status === 200) {\n          const resDatabases = [];\n          forEach(dbResponse.data, (value, key) => {\n            value.db_name = key;\n            resDatabases.push(value);\n          });\n          setDbList(resDatabases);\n        }\n      })\n      .catch((e) =>\n        messageNotification(\n          e.error.messages,\n          'error',\n          'Something wrong happens with the databases list',\n          '',\n          false\n        )\n      );\n  };\n\n  const showMessages = (type = 'success', message) => {\n    messageNotification(messages, type, message, '', false);\n  };\n\n  useEffect(() => loadDBList(), []);\n\n  const actionTemplate = (rowData, column) => {\n    const removeDB = (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      Mixpanel.track('Databases > Delete');\n      MindsDB.DataBase()\n        .delete(rowData)\n        .then((ps) => {\n          loadDBList();\n          messageNotification(\n            messages,\n            'success',\n            'Database removed',\n            '',\n            false\n          );\n        })\n        .catch((e) =>\n          messageNotification(\n            messages,\n            'error',\n            'Database not found',\n            '',\n            false\n          )\n        );\n    };\n\n    return (\n      <div className=\"minds-table__actions\">\n        <Button\n          type=\"button\"\n          className=\"minds-action-btn lg-btn\"\n          label=\"New dataset\"\n          onClick={(e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            setIsEdit(rowData);\n            setShowCreateDB(true);\n          }}\n        />\n        <Button\n          type=\"button\"\n          className=\"minds-action-btn lg-btn\"\n          label={\n            <span className=\"minds-action-btn__icon\">\n              <i className={'fas fa-cog'} />\n            </span>\n          }\n          onClick={(e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            setIsEdit(rowData);\n            setAddDBWinVisible(true);\n            Mixpanel.track('Databases > Edit');\n          }}\n        />\n        <Button\n          type=\"button\"\n          className=\"minds-action-btn red\"\n          label={\n            <span className=\"minds-action-btn__icon\">\n              <i className={'fas fa-trash'} />\n            </span>\n          }\n          onClick={(e) => removeDB(e)}\n        />\n      </div>\n    );\n  };\n\n  const columns = cols.map((col, index) => (\n    <Column\n      key={col.field}\n      {...col}\n      sortable\n      className={col.class}\n      headerStyle={{\n        width: undefined,\n        maxWidth: undefined,\n      }}\n    />\n  ));\n  columns.push(<Column body={actionTemplate} key=\"actions-column\" />);\n\n  const shownewDBWin = () => {\n    setAddDBWinVisible(true);\n    setIsEdit([]);\n  };\n  const hideNewDBWin = () => {\n    setAddDBWinVisible(false);\n    loadDBList();\n  };\n\n  const onSelectionChange = (e) => {\n    console.log(e.value);\n  };\n\n  return (\n    <div className=\"main-content\">\n      <div className=\"header\">\n        <div className=\"content-dm\">\n          <div className=\"dm-items\">\n            <TitleBar>Databases</TitleBar>\n          </div>\n          <DarkMode />\n        </div>\n      </div>\n      <NeoDBConnectionWin\n        visible={addDBWinVisible}\n        onHide={hideNewDBWin}\n        isEdit={isEdit}\n        showMessage={showMessages}\n      />\n      <NotificationMsg refElement={(el) => setMessages(el)} />\n      {dbList.length > 0 ? (\n        <DataTable\n          value={dbList}\n          headerHeight={10}\n          className=\"minds-table card datasources-data-base-table border-datatable\"\n          selectionMode=\"single\"\n          onSelectionChange={onSelectionChange}\n          loading={false}\n        >\n          {columns}\n        </DataTable>\n      ) : (\n        <EmptyPage\n          topMessage=\"There is nothing here yet.\"\n          bottomMessage=\"Connect to a Database\"\n          customIcon=\"fa-plug\"\n          inProgressText=\"This feature is still a work in progess (Beta)\"\n          inProgressTextLink=\"Let us know what you think here\"\n          inProgressLink=\"https://community.mindsdb.com/\"\n        />\n      )}\n\n      <CreateDB\n        visible={showCreateDB}\n        isEdit={isEdit}\n        onHide={() => setShowCreateDB(false)}\n      />\n\n      <div className=\"fixed-buttons\">\n        <Button\n          className=\"minds-action-btn\"\n          type=\"button\"\n          label=\"CONNECT\"\n          icon=\"fas fa-exchange-alt\"\n          onClick={shownewDBWin}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Databases;\n","import styled from '@emotion/styled';\nimport { Colors } from '../Colors';\n\nexport const Breadcrumb = styled.div`\n\tcolor: ${Colors.gray};\n\tdisplay: flex;\n\talign-items: center;\n\n\t.breadcrumb-link {\n\t\ttext-decoration: none;\n\t\tcolor: ${Colors.gray};\n\t\tcursor: pointer;\n\n\t\t&:hover {\n\t\t\tcolor: ${Colors.selectedBreacump};\n\t\t}\n\t\ttransition: color 0.2s;\n\t}\n`;\n\nexport const BreadcrumbItem = styled.div`\n\tdisplay: inline-block;\n\tfont-family: Karla;\n\tfont-size: 16px;\n\tline-height: 16px;\n\tfont-weight: normal;\n\tfont-stretch: normal;\n\tfont-style: normal;\n\tline-height: normal;\n\tletter-spacing: normal;\n  margin-right: 20px;\n  &:not(:first-of-type)::before {\n    content: \">\";\n    margin-right: 20px;\n\t\t}\n`;\n","import React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from './styles';\n\nexport const Breadcrumbs = ({\n\tgoToDatasources,\n\tdataSourceId,\n\tactualSite,\n\tAditionalItemGoto,\n\tAditionalItemName = ''\n}) => (\n\t<Breadcrumb>\n\t\t<BreadcrumbItem>\n\t\t\t<a href=\"/\" className=\"breadcrumb-link\" role=\"button\" onClick={goToDatasources}>\n\t\t\t\t{actualSite}\n\t\t\t</a>\n\t\t</BreadcrumbItem>\n\t\t{AditionalItemName && (\n\t\t\t<BreadcrumbItem>\n\t\t\t\t<a href=\"/\" className=\"breadcrumb-link\" role=\"button\" onClick={AditionalItemGoto}>\n\t\t\t\t\t{AditionalItemName}\n\t\t\t\t</a>\n\t\t\t</BreadcrumbItem>\n\t\t)}\n\t\t<BreadcrumbItem>{dataSourceId}</BreadcrumbItem>\n\t</Breadcrumb>\n);\n","import React, { Component } from 'react';\nimport { Column } from 'primereact/column';\nimport { observer } from 'mobx-react';\nimport { Button } from 'primereact/button';\nimport { Breadcrumbs } from '../ui/Breadcrumbs';\nimport { TitleBar } from '../ui/TittleBar'\nimport DataTable from '../ui/mindsDataTable';\nimport './index.scss';\n\nimport dataSourceStore from '../../store/dataSource';\nimport EmptyPage from \"../common/emptyPage\";\n\nimport navigation from '../../store/navigation';\nimport { Mixpanel } from '../../utils/mixpanel';\n\n@observer\nclass DataSourcePreview extends Component {\n  state = {\n    thWidths: null,\n    thHeight: null\n  };\n\n  componentDidMount() {\n    this.resizeObserver = new ResizeObserver(this.onResize);\n    this.mutationObserver = new MutationObserver(this.onResize);\n    this.resizeObserver.observe(this.wrapperRef);\n    this.mutationObserver.observe(this.wrapperRef, { childList: true, subtree: true });\n  }\n\n  componentWillUnmount() {\n    this.resizeObserver.disconnect();\n    this.mutationObserver.disconnect();\n  }\n\n  onResize = () => {\n    // get cells widths\n    const row = this.wrapperRef.querySelector('.p-datatable-row');\n    let thWidths = null;\n    let thHeight = null;\n    if (row) {\n      thWidths = new Array(row.children.length);\n      for (let i = 0; i < row.children.length; i++) {\n        thWidths[i] = row.children[i].getClientRects()[0].width;\n      }\n    }\n    // get title height\n    const header = this.wrapperRef.querySelector('.p-datatable-thead > tr');\n    if (header) {\n      thHeight = header.getBoundingClientRect().height;\n    }\n    this.setState({\n      thWidths, thHeight\n    });\n  };\n\n  goToDatasources = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    navigation.setStage('datasources');\n  };\n\n  onPageChange = ({ rows, page }) => {\n    dataSourceStore.updatePage({ rows, page });\n  };\n\n  onDataSortChange = ({ sortField, sortOrder }) => {\n    dataSourceStore.updateSort({ sortField, sortOrder });\n  };\n\n  onFilterChange = ({ filters }) => {\n    dataSourceStore.updateFilter(filters);\n  };\n\n  render() {\n    const { thWidths, thHeight } = this.state;\n\n    const fields = dataSourceStore.fields.map((x) => {\n      if (x.name.includes('.')){\n        x.name = x.name.replace(/\\./g, '_');\n      } return x.name;\n    });\n\n    const dynamicColumns = fields.map((field, index) => (\n      <Column\n        key={ `field_${index}` }\n        field={ field }\n        headerStyle={{\n          width: thWidths ? thWidths[index] : undefined,\n          maxWidth: thWidths ? thWidths[index] : undefined\n        }}\n        header={ (\n          <div className=\"minds-table-clip-title\">\n            <div><span data-title={ field }>{field}</span></div>\n          </div>\n        ) }\n        filter\n      />\n    ));\n\n    return (\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <div />\n          <TitleBar>\n            Datasource Preview\n          </TitleBar>\n          <Breadcrumbs\n            goToDatasources={this.goToDatasources}\n            dataSourceId={dataSourceStore.dataSourceId}\n            actualSite='Datasources'\n          />\n        </div>\n        <div\n          className=\"main-content__body table-fit-scroll preview-datasource\"\n          ref={ (r) => { this.wrapperRef = r; } }\n        >\n          <DataTable\n            ref={ (el) => { this.dt = el; } }\n            value={ dataSourceStore.data }\n            className=\"minds-table stripped card datasource-preview-table\"\n            headerHeight={ thHeight }\n            paginator\n            rowsPerPageOptions={ [] }\n            lazy\n            onPage={ this.onPageChange }\n            onSort={ this.onDataSortChange }\n            onFilter={ this.onFilterChange }\n            sortField={ dataSourceStore.sort.sortField }\n            sortOrder={ dataSourceStore.sort.sortOrder }\n            rows={ dataSourceStore.rows }\n            filters={ dataSourceStore.filters }\n            totalRecords={ dataSourceStore.total }\n            first={ dataSourceStore.first }\n            loading={ dataSourceStore.loading }\n            emptyMessage={\n              <div>\n                <EmptyPage\n                  topMessage=\"No matching items\"\n                  bottomMessage=\"Empty Set\"\n                  customIcon=\"fas fa-surprise\"\n                  noneBorder\n                />\n              </div>\n            }\n          >\n            { dynamicColumns }\n          </DataTable>\n          <Button\n            type=\"button\"\n            className=\"minds-action-btn quality-position\"\n            label=\"QUALITY\"\n            onClick={ (e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              navigation.openDataQuality(dataSourceStore.dataSource);\n              Mixpanel.track('Datasources > Quality');\n            } }\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DataSourcePreview;\n","import styled from '@emotion/styled';\nimport { Colors } from '../Colors';\n\nexport const WarningContainer = styled.div`\n   font-size: 12px;\n    font-weight: normal;\n    font-stretch: normal;\n    font-style: normal;\n    letter-spacing: normal;\n    display: inline-block;\n\n    span.red {\n      color: ${Colors.watermelon};\n    }\n    span.yellow {\n      color: ${Colors.yellow};\n    }\n    span.blue {\n      color: ${Colors.primaryBar};\n    }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { WarningContainer } from './styles'\n\n\nconst WarningMark = ({ type, icon }) => (\n  <WarningContainer>\n    <span className={ type }>\n      <span>\n        <i className={`fas ${icon}`} />\n      </span>\n    </span>\n  </WarningContainer>\n);\n\nWarningMark.propTypes = {\n  type: PropTypes.string,\n  text: PropTypes.string,\n  icon: PropTypes.string,\n};\n\nWarningMark.defaultProps = {\n  type: 'yellow',  // [red|yellow]\n  text: 'Warning',\n  icon: 'fa-exclamation-triangle'\n};\n\nexport default WarningMark;\n","import React from 'react';\nimport WarningMark from '../warningMark';\n\nconst Loading = ({ message, type, iconMessage }) => (\n  <>\n    <div className=\"loader-bars\">\n      <div className=\"bars\">\n        <div className=\"rect1\" />\n        <div className=\"rect2\" />\n        <div className=\"rect3\" />\n        <div className=\"rect4\" />\n        <div className=\"rect5\" />\n      </div>\n      {\n        message && (\n          <div className=\"message-loader\">\n            <WarningMark type={type} icon={iconMessage} />\n            {message}\n          </div>\n        )\n      }\n    </div>\n  </>\n);\n\nexport default Loading;\n","export const flagsDictionary = {\n  Unknown: {\n    flag: \"🏴‍☠️\",\n    name: \"Unknown\"\n  },\n  default: {\n    flag: \"🏴\",\n    name: \"Default\"\n  },\n  da: {\n    flag: \"🇩🇰\",\n    name: \"Danish\"\n  },\n  en: {\n    flag: \"🇬🇧\",\n    name: \"English\"\n  },\n  sv: {\n    flag: \"🇸🇪\",\n    name: \"Swedish\"\n  },\n  ro: {\n    flag: \"🇷🇴\",\n    name: \"Romanian\"\n  },\n  af: {\n    flag: \"🇿🇦\",\n    name: \"Afrikaans\"\n  },\n  fr: {\n    flag: \"🇫🇷\",\n    name: \"French\"\n  },\n  de: {\n    flag: \"🇩🇪\",\n    name: \"deutsch\"\n  },\n  sl: {\n    flag: \"🇸🇮\",\n    name: \"Slovenian\"\n  },\n  no: {\n    flag: \"🇳🇴\",\n    name: \"Norwegian\"\n  },\n  ca: {\n    flag: \"🏴\",\n    name: \"Catalan\"\n  },\n  id: {\n    flag: \"🇮🇩\",\n    name: \"Indonesian\"\n  },\n  es: {\n    flag: \"🇪🇸\",\n    name: \"Spanish\"\n  },\n  et: {\n    flag: \"🇪🇪\",\n    name: \"Estonian\"\n  },\n  so: {\n    flag: \"🇨🇩\",\n    name: \"Soko\"\n  },\n  it: {\n    flag: \"🇮🇹\",\n    name: \"Italian\"\n  },\n  pt: {\n    flag: \"🇵🇹\",\n    name: \"Portuguese\"\n  },\n  pl: {\n    flag: \"🇵🇱\",\n    name: \"Polish\"\n  },\n  cy: {\n    flag: \"🏴󠁧󠁢󠁷󠁬󠁳󠁿\",\n    name: \"Welsh\"\n  },\n  hr: {\n    flag: \"🇭🇷\",\n    name: \"Croatian\"\n  }\n};\n","\nimport { orderBy } from 'lodash'\n\nimport { Colors } from \"../../ui/Colors\"\nimport { SFMono } from \"../../ui/Fonts\"\nimport { wrapHistXY } from \"../../../utils/funcs\";\nimport { filterAxisData } from \"../../../utils/funcs\";\nimport { flagsDictionary } from \"../../../utils/flagsDictionary\";\n\nexport const barOptions = {\n  easing: \"easeOutQuart\",\n  legend: false,\n  scales: {\n    yAxes: [\n      {\n        ticks: {\n          fontFamily: SFMono,\n          fontColor: Colors.mirage,\n          min: 0,\n          suggestedMin: 0,\n          beginAtZero: true\n        }\n      }\n    ],\n    xAxes: [\n      {\n        ticks: {\n          fontFamily: SFMono,\n          fontColor: Colors.mirage,\n          min: 0,\n          suggestedMin: 0,\n          beginAtZero: true,\n          scaleBeginAtZero: true\n        }\n      }\n    ]\n  }\n}\n\nexport const generateDataSet = (data, dataType, outliers) => {\n  const chartData = wrapHistXY(data);\n  const labels = filterAxisData(chartData, \"x\");\n  const labelsGrouped = []\n  let innerGroup = []\n  const isNumerical = dataType && dataType.toLowerCase() === 'numeric'\n  const isCategorical = dataType && dataType.toLowerCase() === 'categorical'\n\n  if (isNumerical) {\n    for (let i = 0; i < labels.length; i++) {\n      innerGroup.push(labels[i])\n\n      if (innerGroup.length > 1) {\n        labelsGrouped.push(innerGroup.join('-'))\n        innerGroup = []\n        innerGroup.push(labels[i])\n      }\n    }\n  }\n\n  let total = 0\n  chartData.forEach(data => {\n    total += data.y && !isNaN(data.y) ? Math.abs(data.y) : 0\n  })\n\n  const fullLength = chartData.length\n  let newLastOutlierItem = {}\n  let formatData = chartData.map((data, idx) => {\n    let dataResponse = {};\n\n    const value = data.y && !isNaN(data.y) ? Math.abs(data.y) : 0\n    const percentage = value * 100 / total\n    const fixedPercentage = !Number.isInteger(percentage) ? parseFloat(percentage.toFixed(2)) : percentage\n\n    if (labels.includes(data.x)) {\n      const isOutlier = outliers.find(outlier => {\n        const item = !Number.isInteger(outlier) ? parseFloat(outlier.toFixed(2)) : outlier\n        return item === data.x\n      })\n\n      if (isNumerical) {\n        const actualLabel = labelsGrouped.find(item => item.indexOf(`${data.x}-`) > -1)\n        if (actualLabel) {\n          dataResponse = {\n            key: actualLabel,\n            [actualLabel]: fixedPercentage,\n            sortingKey: fixedPercentage,\n            tooltip: `Values between [${actualLabel}) are ${fixedPercentage}% common`,\n          }\n        } else if ((idx + 1) === fullLength) {\n          const lastOutlierIncluded = labelsGrouped.find(item => item.indexOf(`-${data.x}`) > -1)\n          if (lastOutlierIncluded) {\n            newLastOutlierItem = {\n              key: `${data.x}`,\n              [data.x]: fixedPercentage,\n              sortingKey: fixedPercentage,\n              tooltip: `Values in [${data.x}] are ${fixedPercentage}% common`,\n            }\n          }\n        }\n      } else {\n        dataResponse = {\n          key: data.x,\n          [data.x]: fixedPercentage,\n          sortingKey: fixedPercentage,\n          tooltip: `Values in [${data.x}] are ${fixedPercentage}% common`,\n        }\n      }\n\n      if (!isNaN(isOutlier)) {\n        dataResponse.color = Colors.watermelon\n        dataResponse.outlier = data.x\n\n        if ((idx + 1) === fullLength) {\n          newLastOutlierItem = {\n            ...newLastOutlierItem,\n            color: Colors.watermelon,\n            outlier: data.x\n          }\n        }\n      } else {\n        newLastOutlierItem = {}\n      }\n    }\n\n    return dataResponse;\n  }).filter((data) => data.key === 0 ? true : data.key);\n\n  if (isCategorical) {\n    formatData = orderBy(formatData, ['sortingKey'], ['desc'])\n  }\n\n  if (newLastOutlierItem && newLastOutlierItem.key) {\n    formatData.push(newLastOutlierItem)\n\n    if (isNumerical) {\n      labelsGrouped.push(`${newLastOutlierItem.key}`)\n    } else {\n      labels.push(`${newLastOutlierItem.key}`)\n    }\n  }\n\n  return {\n    labels: isNumerical ? labelsGrouped : labels,\n    chartData: chartData,\n    formatData: formatData,\n    datasets: [\n      {\n        label: \"Occurrences\",\n        backgroundColor: \"rgba(0, 176, 109, 0.6)\",\n        borderColor: \"rgba(0, 176, 109, 0.6)\",\n        hoverBackgroundColor: \"rgb(0, 176, 109)\",\n        hoverBorderColor: \"rgb(0, 176, 109)\",\n        data: filterAxisData(chartData, \"y\")\n      }\n    ],\n  };\n}\n\nexport const getLanguageFlags = (lang) => flagsDictionary[lang]\n","import styled from '@emotion/styled';\nimport { Rubik, Karla } from \"../../ui/Fonts\";\nimport { Colors } from \"../../ui/Colors\";\n\nexport const TargetColumnTitle = styled.h1`\n  font-family: ${Rubik};\n  font-size: 14px;\n  font-weight: 500;\n  font-stretch: normal;\n  font-style: normal;\n  line-height: 1.5;\n  letter-spacing: normal;\n  margin-bottom: 30px;\n`\nexport const TargetBarChart = styled.div`\n  width: 70%;\n  flex: 1;\n`\nexport const InterfaceContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  width: 100%;\n  padding: 10px;\n`\nexport const ItemRow = styled.div`\n  padding: 10px;\n  font-family: ${Karla};\n  color: ${Colors.slateGrey};\n\n  strong {\n    cursor: pointer;\n    font-family: ${Rubik};\n    font-size: 14px;\n    color: ${Colors.mirage};\n    margin-right: 5px;\n    font-weight: 400;\n  }\n`\nexport const Content = styled.p`\n  flex-wrap: wrap;\n`\nexport const CogIcon = styled.i`\n  margin-left: 30px;\n  color: ${Colors.slateGrey};\n`\nexport const OutliersValues = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin-top: 20px;\n  flex-wrap: wrap;\n  width: 200px;\n`\nexport const TextContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  margin-top: 20px;\n`\n","import { createContext } from 'react';\n\nexport const GeneralContext = createContext();\n","import React from 'react';\n\nimport { GeneralContext } from '../context';\n\nconst WithContext = (Component) => {\n  const ContextConsumer = props => (\n    <GeneralContext.Consumer>\n      { context => <Component {...props} context={context || {}} /> }\n    </GeneralContext.Consumer>\n  )\n\n  return ContextConsumer;\n}\n\nexport default WithContext;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { getLanguageFlags } from \"./graphOptions\";\nimport WarningMark from '../../ui/warningMark';\nimport { InterfaceContainer, ItemRow, Content, OutliersValues, TextContainer } from './styles';\nimport withContext from '../../../HOC/withContext';\n\nconst InterfaceView = (props) => {\n  const { warnings, data, column_name, context } = props;\n  const { typing, empty, unique, outliers, bias, avg_words_per_sentence, lang_dist } = data;\n\n  const enterAction = (content) => {\n    context.sidebarContent.setAnyValue({\n      title: { $set: content.title },\n      paragraph: { $set: content.description },\n      url: { $set: content.url }\n    })\n  }\n\n  const leaveAction = () => {\n    context.sidebarContent.setAnyValue({\n      title: { $set: '' },\n      paragraph: { $set: '' },\n      url: { $set: '' }\n    })\n  }\n\n  const getOutliers = (outliers) => {\n    if (outliers) {\n      return outliers\n        .sort((a, b) => a - b)\n        .map(item => !Number.isInteger(item) ? item.toFixed(2) : item)\n        .join(', ')\n    }\n\n    return ''\n  }\n\n  return (\n    <InterfaceContainer>\n      {data && (\n        <>\n          <ItemRow\n            onMouseEnter={() => enterAction({ title: 'Type:', description: typing.description })}\n            onMouseLeave={() => leaveAction()}\n          >\n            <strong>Type:</strong> {`${typing.data_type}/${typing.data_subtype}`}\n            {/* <CogIcon className=\"fas fa-cog\" /> */}\n          </ItemRow>\n\n          {typing.data_type !== 'Text' && (\n            <>\n              <ItemRow\n                onMouseEnter={() => enterAction({ title: 'Missing Values:', description: empty.description })}\n                onMouseLeave={() => leaveAction()}\n              >\n                <strong>Missing Values:</strong> {`${empty.empty_cells}/${empty.empty_percentage.toFixed(2)}%`}\n                {warnings.empty && (\n                  <WarningMark className=\"width-column-2\" type=\"yellow\" />\n                )}\n              </ItemRow>\n\n              {unique && (\n                <ItemRow\n                  onMouseEnter={() => enterAction({ title: 'Distinct Values:', description: unique.description })}\n                  onMouseLeave={() => leaveAction()}\n                >\n                  <strong>Distinct Values:</strong> {unique.unique_values}\n                  {warnings.unique && (\n                    <WarningMark className=\"width-column-2\" type=\"yellow\" />\n                  )}\n                </ItemRow>\n              )}\n\n              {(outliers && outliers.outlier_buckets.length > 0) && (\n                <ItemRow\n                  onMouseEnter={() => enterAction({ title: 'Potential Outliers:', description: outliers.description })}\n                  onMouseLeave={() => leaveAction()}\n                >\n                  <strong>Potential Outliers:</strong>\n                  <WarningMark className=\"width-column-2\" type=\"yellow\" />\n                  <Content>\n                    Here are some potential outliers in {' '}\n                    <span className=\"tag tag__success\">{column_name}</span> for values in:{' '}\n                    <OutliersValues>\n                      <span className=\"tag tag__error\">\n                        {getOutliers(outliers.outlier_buckets)}\n                      </span>\n                    </OutliersValues>\n                  </Content>\n                </ItemRow>\n              )}\n\n              {(bias && warnings.bias) && (\n                <ItemRow\n                  onMouseEnter={() => enterAction({ title: 'Potential Bias:', description: bias.description })}\n                  onMouseLeave={() => leaveAction()}\n                >\n                  <strong>Potential Bias:</strong>\n                  {warnings.bias && (\n                    <WarningMark className=\"width-column-2\" type=\"yellow\" />\n                  )}\n                  <Content>\n                    {bias.warning}\n                  </Content>\n                </ItemRow>\n\n              )}\n            </>\n          )}\n\n          {typing.data_type === 'Text' && (\n            <>\n              <ItemRow>\n                <strong>Average Words per Sentece:</strong> {avg_words_per_sentence.toFixed(2)}\n              </ItemRow>\n              {\n                lang_dist && (\n                  <ItemRow>\n                    <strong>Languages:</strong>\n                    <TextContainer>\n                      {Object.keys(lang_dist).map((lang, idx) => (\n                        <div key={idx}>\n                          {`${getLanguageFlags(lang) ?\n                              getLanguageFlags(lang).flag\n                              : getLanguageFlags(\"default\").flag}(${lang}): ${lang_dist[lang]}`\n                          }\n                        </div>\n                      ))}\n                    </TextContainer>\n                  </ItemRow>\n                )\n              }\n            </>\n          )}\n        </>\n      )}\n    </InterfaceContainer>\n  )\n}\n\nInterfaceView.propTypes = {\n  column_name: PropTypes.string.isRequired,\n  data: PropTypes.object\n};\n\nInterfaceView.defaultProps = {\n  data: {}\n};\n\nexport default withContext(InterfaceView);\n","import React from 'react';\nimport { ResponsiveBar } from '@nivo/bar';\nimport styled from '@emotion/styled';\n\nimport { Colors } from \"../../ui/Colors\";\n\nconst ToolTip = styled.div`\n  color: ${Colors.slateGrey};\n  cursor: pointer;\n\n  strong {\n    color: ${Colors.mirage};\n  }\n`\n\nconst NivoBar = ({ tooltipTitle, animate, typeValues, data, indexBy, keys, fillType, color, yLabelSymbol }) => {\n\n  return (\n    <ResponsiveBar\n      data={data}\n      indexBy={indexBy}\n      keys={keys}\n      padding={0.4}\n      defs={[\n        {\n          id: 'dots',\n          type: 'patternDots',\n          background: 'inherit',\n          color: '#38bcb2',\n          size: 4,\n          padding: 1,\n          stagger: true\n        },\n        {\n          id: 'lines',\n          type: 'patternLines',\n          background: 'inherit',\n          color: '#eed312',\n          rotation: -45,\n          lineWidth: 6,\n          spacing: 10\n        }\n      ]}\n      fill={[{ match: '*', id: fillType ? fillType : '' }]}\n      colors={color}\n      margin={{\n        top: 20,\n        right: 40,\n        bottom: 100,\n        left: 70\n      }}\n      labelSkipWidth={12}\n      labelSkipHeight={12}\n      tooltip={({ color, data }) => (\n        <ToolTip color={color}>\n          <strong>{tooltipTitle}: </strong> {data.tooltip}\n        </ToolTip>\n      )}\n      enableGridX={true}\n      axisTop={null}\n      axisRight={null}\n      axisBottom={{\n        tickSize: 5,\n        tickPadding: 10,\n        tickRotation: -45,\n        legend: '',\n        legendPosition: 'middle',\n        legendOffset: 32,\n        tickValues: typeValues === 'Numeric' && keys.length > 5 ? keys.map((item) => item).filter((item,index,arr)=>(arr.splice(index,1))) : ''\n      }}\n      axisLeft={{\n        tickSize: 10,\n        tickPadding: 10,\n        tickRotation: 0,\n        legendPosition: 'middle',\n        legendOffset: -40,\n        format: v => yLabelSymbol ? `${v}${yLabelSymbol}` : v,\n      }}\n      labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n      enableLabel={false}\n      animate={animate}\n      motionStiffness={90}\n      motionDamping={15}\n    />\n  )\n}\n\nexport default NivoBar;\n","\nimport React from 'react';\nimport PropTypes from \"prop-types\";\n\nimport { ResponsiveTreeMap } from '@nivo/treemap';\n\nconst NivoTreeMap = ({ root, theme, animate, tile, identity, value }) => (\n  <ResponsiveTreeMap\n    root={root}\n    identity={identity}\n    value={value}\n    tile={tile}\n    innerPadding={3}\n    outerPadding={2}\n    margin={{ top: 0, right: 10, bottom: 10, left: 10 }}\n    label=\"name\"\n    labelSkipSize={8}\n    labelTextColor={{ from: 'color', modifiers: [['darker', 1.2]] }}\n    colors={{ scheme: theme }}\n    borderWidth={3}\n    borderColor={{ from: 'color', modifiers: [['darker', '0.4']] }}\n    animate={animate}\n    motionStiffness={65}\n    motionDamping={11}\n  />\n);\n\nNivoTreeMap.propTypes = {\n  tile: PropTypes.string,\n  theme: PropTypes.string,\n  animate: PropTypes.bool,\n  identity: PropTypes.string,\n  value: PropTypes.string,\n}\n\nNivoTreeMap.defaultProps = {\n  tile: 'binary',\n  theme: 'nivo',\n  animate: true,\n  identity: 'name',\n  value: 'loc',\n};\n\nexport default NivoTreeMap;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from '@emotion/styled';\n\nimport InterfaceView from './interfaceView';\nimport { generateDataSet } from './graphOptions';\nimport { Colors } from '../../ui/Colors';\nimport NivoBar from '../../ui/Bar';\nimport NivoTreeMap from '../../ui/TreeMap';\nimport { TargetColumnTitle } from './styles';\n\nconst ArrowsContainer = styled.div`\n  width: 160px;\n  margin: 0 auto;\n  display: flex;\n  justify-content: center;\n\n  button {\n    cursor: pointer;\n    border: none;\n    background: transparent;\n    font-size: 12px;\n    font-weight: 700;\n    outline: 0;\n    margin: 0 15px;\n  }\n`;\n\nconst MAX_FIELDS = 50;\n\nconst DataQualityTargetColumn = ({ data }) => {\n\n  const [dataIndex, setDataIndex] = useState(0);\n  const [actual, setActual] = useState(MAX_FIELDS);\n\n  const { data_analysis_v2, column_name, warnings } = data;\n  const reponseData = generateDataSet(\n    data['data_distribution']['data_histogram'],\n    data_analysis_v2.typing.data_type,\n    data_analysis_v2.outliers ? data_analysis_v2.outliers.outlier_buckets : []\n  );\n  const { labels, formatData } = reponseData;\n\n  const total = formatData.length;\n  const splicedFormatData = [];\n  const splicedLabels = [];\n  if (formatData.length > MAX_FIELDS) {\n    while (formatData.length > 0) {\n      splicedFormatData.push(formatData.splice(0, MAX_FIELDS));\n      splicedLabels.push(labels.splice(0, MAX_FIELDS));\n    }\n  } else {\n    splicedFormatData.push(formatData);\n    splicedLabels.push(labels);\n  }\n\n  const hasMultiple = splicedFormatData.length > 1;\n  const decreaseIndex = () => {\n    if (dataIndex - 1 < 0) {\n      setDataIndex(0);\n      setActual(MAX_FIELDS);\n    } else {\n      setDataIndex(dataIndex - 1);\n      setActual(actual - splicedFormatData[dataIndex].length);\n    }\n  };\n\n  const increaseIndex = () => {\n    if (dataIndex + 1 < splicedFormatData.length) {\n      setDataIndex(dataIndex + 1);\n      setActual(actual + splicedFormatData[dataIndex + 1].length);\n    } else {\n      setDataIndex(dataIndex);\n      setActual(total);\n    }\n  };\n\n  const getColor = (bar) => bar.data.color || Colors.green;\n\n  const transformTextData = () => {\n    const textData = Object.keys(data_analysis_v2.word_dist).map((word) => ({\n      name: !word ? 'Unknown' : word,\n      loc: data_analysis_v2.word_dist[word],\n    }));\n\n    return {\n      children: [...textData],\n    };\n  };\n\n  return (\n    <div className=\"row-grid\">\n      <div className=\"col-sm-12 col-md-4\">\n        <InterfaceView\n          warnings={warnings}\n          data={data_analysis_v2}\n          column_name={column_name}\n        />\n      </div>\n      <div className=\"col-sm-12 col-md-8\">\n        {data_analysis_v2?.typing?.data_type !== 'Text' && (\n          <>\n            <TargetColumnTitle>\n              {' '}\n              Occurrences of Variable on the Dataset{' '}\n            </TargetColumnTitle>\n            <div style={{ paddingRight: 20, height: 400 }}>\n              <NivoBar\n                typeValues={data_analysis_v2.typing.data_type}\n                data={\n                  hasMultiple\n                    ? splicedFormatData[dataIndex]\n                    : splicedFormatData[0]\n                }\n                indexBy=\"key\"\n                keys={hasMultiple ? splicedLabels[dataIndex] : splicedLabels[0]}\n                color={getColor}\n                tooltipTitle=\"Occurrences\"\n                yLabelSymbol=\"%\"\n                animate\n              />\n              {hasMultiple && (\n                <ArrowsContainer>\n                  <button onClick={decreaseIndex}>{'<<'}</button>\n                  <span>{`${actual}/${total}`}</span>\n                  <button onClick={increaseIndex}>{'>>'}</button>\n                </ArrowsContainer>\n              )}\n            </div>\n          </>\n        )}\n\n        {data_analysis_v2.typing.data_type === 'Text' && (\n          <div style={{ paddingRight: 20, height: 400 }}>\n            <NivoTreeMap root={transformTextData()} theme=\"greens\" />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nDataQualityTargetColumn.propTypes = {\n  data: PropTypes.object.isRequired,\n  score: PropTypes.number,\n  data_analysis_v2: PropTypes.object,\n};\n\nDataQualityTargetColumn.defaultProps = {\n  data_analysis_v2: {},\n  score: 0,\n};\n\nexport default DataQualityTargetColumn;\n","import styled from '@emotion/styled';\nimport { Karla } from \"../../ui/Fonts\";\nimport { Colors } from \"../../ui/Colors\";\n\nexport const TabContainer = styled.div`\n  display: inline-flex;\n  width: 100%;\n  flex-direction: row;\n  justify-content: space-between;\n`\nexport const SpanTab = styled.span`\n  font-size: 14px;\n  margin: 8px 40px;\n  font-family: ${Karla};\n  color: ${Colors.slateGrey};\n`\n","import React from 'react';\nimport { Panel } from 'primereact/panel';\n\nimport WarningMark from '../../ui/warningMark';\nimport DataQualityTargetColumn from '../../predictorDataQuality/dataQualityTargetColumn'\nimport { TabContainer, SpanTab } from './styles'\n/**\n * panel with collaps/expand by header click (not just icon)\n */\nclass MindsPanel extends Panel {\n  renderHeader(collapsed) {\n    const { header, sectionName, toggleable, columnMetadata, noRepeat } = this.props;\n\n    if (header || toggleable) {\n      const toggleIcon = this.renderToggleIcon(collapsed);\n      return (\n        <>\n          <div\n            className=\"p-panel-titlebar\"\n            role=\"button\"\n            onClick={this.toggle}\n          >\n            { collapsed ?\n                <div className=\"p-panel-title\">{header}</div>\n              :\n              sectionName ? (\n                <TabContainer>\n                  <strong>{sectionName}</strong>\n                  {\n                    columnMetadata.warningsLength > 0 && (\n                      <SpanTab>\n                        <span>{columnMetadata.warningsLength} warnings</span>\n                        <WarningMark\n                          className=\"width-column-2\"\n                          type=\"yellow\"\n                        />\n                      </SpanTab>\n                    )\n                  }\n                </TabContainer>\n                ) :  <strong>{header}</strong>\n            }\n            {toggleIcon}\n          </div>\n          {!collapsed && columnMetadata && !noRepeat &&\n            <DataQualityTargetColumn data={ columnMetadata } />\n          }\n        </>\n      );\n    }\n    return null;\n  }\n}\n\nexport default MindsPanel;\n","import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\nimport { observer } from 'mobx-react';\nimport { Button } from 'primereact/button';\nimport { Mixpanel } from '../../utils/mixpanel';\nimport { Breadcrumbs } from '../ui/Breadcrumbs';\nimport { TitleBar } from '../ui/TittleBar';\nimport Loading from '../ui/Loading'\n\nimport MindsPanel from '../common/mindsPanel';\nimport WarningMark from '../ui/warningMark';\n\nimport navigation from '../../store/navigation';\nimport dataSourceQualityStore from '../../store/dataSourceQuality';\n\nimport { qualityWarnings } from '../../utils/funcs';\nimport './index.scss';\n\n@observer\nclass DataSourceQuality extends Component {\n  state = {};\n\n  goToDatasources = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    navigation.setStage('datasources');\n  };\n\n  render() {\n    if (dataSourceQualityStore.loading === true || dataSourceQualityStore.loaded === false) {\n      const currentStatus = dataSourceQualityStore.analyzeStatus === \"analyzing\" || null\n      const loadingProps = {\n        message: currentStatus ?\n         \"This analysis may take some time, depending on the dataset's size and content type.\"\n         : null,\n        iconMessage: currentStatus ? \"fa-info-circle\" : null,\n        type: currentStatus ? \"blue\" : null\n      }\n      return < Loading {...loadingProps} />\n    }\n\n    const targetColumnsMetadata = dataSourceQualityStore.data || [];\n    let dataQualityTargetColumns;\n\n    if (targetColumnsMetadata.status !== \"analyzing\") {\n      dataQualityTargetColumns = targetColumnsMetadata[\"data_analysis_v1\"].map((columnMetadata) => {\n        columnMetadata.data_analysis_v2 = targetColumnsMetadata[\"data_analysis_v2\"][columnMetadata['column_name']];\n        columnMetadata.warnings = qualityWarnings(columnMetadata.data_analysis_v2);\n        columnMetadata.warningsLength = Object.keys(columnMetadata.warnings).filter(x => columnMetadata.warnings[x]).length;\n\n        return (\n          <>\n            {columnMetadata['column_name'] && (\n              <MindsPanel\n                className=\"minds-block interactive-title\"\n                key={`key-${columnMetadata['column_name']}`}\n                header={(\n                  <div className=\"collapsed-panelTitle\">\n                    <span>{columnMetadata['column_name']} </span>\n                    {\n                      columnMetadata.warningsLength >= 1 && (\n                        <div className=\"warn-collapsed\">\n                          <span className=\"low-span\">{columnMetadata.warningsLength} Warnings&nbsp;</span>\n                          <WarningMark type='yellow' />\n                        </div>\n                      )\n                    }\n                  </div>\n                )}\n                sectionName={columnMetadata['column_name']}\n                columnMetadata={columnMetadata}\n                toggleable\n                collapsed\n              />\n            )}\n          </>\n        );\n      });\n    }\n\n    return (\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <div />\n          <TitleBar>\n            Datasource Quality\n          </TitleBar>\n          <Breadcrumbs\n            goToDatasources={this.goToDatasources}\n            dataSourceId={dataSourceQualityStore.dataSourceName}\n            actualSite='Datasources'\n          />\n        </div>\n        <div className=\"main-content__body datasource-data-quality\">\n          <div className=\"data-container\">\n            {dataQualityTargetColumns}\n          </div>\n        </div>\n        <div className=\"alert-quality\">\n          <WarningMark type='blue' icon=\"fa-info-circle\" />\n          Data set analysis is designed to be done on a random, representative sample of your total data.\n        </div>\n        <Button type=\"button\"\n          className=\"minds-action-btn quality-position\"\n          label=\"PREVIEW\"\n          onClick={(e) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            navigation.openDataPreview(dataSourceQualityStore.dataSource);\n            Mixpanel.track('Datasources > Preview');\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default DataSourceQuality;\n","import React, {useState} from 'react';\nimport DateTimePicker from 'react-datetime-picker';\nimport './index.scss';\n\n\nexport const CalendarInput = ({ value, onChangeDate }) => {\n  const [dateValue, setDateValue] = useState(() => {\n    return value || new Date()\n  })\n  const onchangeValue = (e) => {\n    setDateValue(e)\n    onChangeDate(e)\n    console.log(e)\n  }\n\n  return(\n\t<DateTimePicker\n\t\tvalue={dateValue}\n\t\tonChange={onchangeValue}\n\t\tamPmAriaLabel=\"Select AM/PM\"\n\t\tcalendarAriaLabel=\"Toggle calendar\"\n\t\tclearAriaLabel=\"Clear value\"\n\t\tdayAriaLabel=\"Day\"\n\t\thourAriaLabel=\"Hour\"\n\t\tmaxDetail=\"second\"\n\t\tminuteAriaLabel=\"Minute\"\n\t\tmonthAriaLabel=\"Month\"\n\t\tnativeInputAriaLabel=\"Date and time\"\n\t/>\n)};\n","import React from \"react\";\nimport { Checkbox } from \"primereact/checkbox\";\nimport { Dropdown } from \"primereact/dropdown\";\nimport { InputText } from \"../../inputText\";\nimport { CalendarInput } from \"../../ui/CalendarInput\"\n\nimport \"./index.scss\";\n\nclass SimpleTable extends React.Component {\n  state = {\n    selectedValues: [],\n    dataTable: [],\n  };\n\n  componentDidMount() {\n    const { options, value } = this.props;\n\n    this.setState({ dataTable: options, selectedValues: value || [] });\n  }\n\n  componentDidUpdate(_prevProps, _prevState) {\n    const { options: newOptions, value: newValue } = this.props;\n    const { options: oldOptions, value: oldValue } = _prevProps;\n\n    if (newOptions.length !== oldOptions.length) {\n      this.setState({ dataTable: newOptions });\n    }\n\n    if (newValue !== oldValue) {\n      this.setState({ selectedValues: newValue || [] });\n    }\n  }\n\n  onSearchBar = (e) => {\n    const { options } = this.props;\n\n    const searchText = e.target.value;\n    const dataTable = options.filter((i) => i.label.indexOf(searchText) > -1);\n    this.setState({ dataTable });\n  };\n\n  onSelectRow = (e, option) => {\n    const { onChange = () => {}, options, useDeleteIcon } = this.props;\n    let { selectedValues } = this.state;\n\n    let disableCheck = false;\n    if (!options || options.length <= 1) {\n      disableCheck = true;\n    }\n    if (useDeleteIcon && options.length - selectedValues.length <= 1) {\n      disableCheck = true;\n    }\n    if (disableCheck) {\n      console.error(\n        \"You need to leave at least one item without being selected\"\n      );\n    }\n\n    if (e.checked && !disableCheck) {\n      selectedValues.push(e.value);\n    } else {\n      selectedValues = selectedValues.filter((i) => i !== e.value);\n    }\n\n    e.target.value = selectedValues;\n    onChange(e, option);\n\n    this.setState({ selectedValues });\n  };\n\n  validateChecked = (checkedValue) => {\n    const { selectedValues } = this.state;\n\n    return selectedValues.indexOf(checkedValue) > -1;\n  };\n\n  setExtraFieldValue = (e, option) => {\n    const { onExtraFieldChange } = this.props;\n    option.extraFieldValue.value = e.target.value;\n    onExtraFieldChange(option.extraFieldValue);\n  };\n\n  setDateExtraFieldValue = (e, option) => {\n    const { onExtraFieldChange } = this.props;\n    option.extraFieldValue.value = e;\n    onExtraFieldChange(option.extraFieldValue);\n  };\n\n  render() {\n    const {\n      name,\n      filter,\n      searchIconStyles,\n      useDeleteIcon,\n      showExtraFields,\n    } = this.props;\n\n    const { dataTable } = this.state;\n\n    const getOptions = (option) => {\n      if (!option.distribution) {\n        return [];\n      }\n      const options = option.distribution\n        .sort()\n        .map((el) => ({ label: el, value: el }));\n      options.unshift({ label: \"none\", value: null });\n      return options;\n    };\n\n    return (\n      <div className=\"minds-dialog__field\" style={{ width: \"100%\", margin: 0 }}>\n        {filter ? (\n          <div className=\"p-inputgroup\" style={{ width: \"100%\" }}>\n            <InputText\n              name=\"predictorSearch\"\n              onChange={this.onSearchBar}\n              className=\"mdb-input search-bar\"\n              placeholder=\"Search Bar\"\n            />\n            <span\n              className=\"p-inputgroup-addon search-icon\"\n              style={searchIconStyles}\n            >\n              <i className=\"pi pi-search\"></i>\n            </span>\n          </div>\n        ) : null}\n\n        <div className=\"simple-table-container\">\n          {dataTable.map((option, idx) => (\n            <div className=\"simple-row-flex\" key={idx}>\n              <div className=\"simple-column-flex\">\n                <div className=\"column-content\">\n                  {option.label ? option.label : option.name}\n                </div>\n              </div>\n              <div className=\"simple-column-flex\">\n                <div className=\"column-content\">\n                  {!showExtraFields ? (\n                    <Checkbox\n                      name={name}\n                      value={option.value}\n                      onChange={(e) => this.onSelectRow(e, option)}\n                      checked={this.validateChecked(option.value)}\n                      className={`mdb-select ${\n                        useDeleteIcon ? \"use-delete-icon\" : \"\"\n                      }`}\n                    />\n                  ) : null}\n                  {showExtraFields ? (\n                    <div style={{ marginLeft: \"20px\" }}>\n                      {option.data_type === \"numeric\" ? (\n                        <input\n                          name=\"value\"\n                          placeholder=\"value\"\n                          className=\"query-condition__value mdb-input\"\n                          value={option.extraFieldValue.value || \"\"}\n                          onChange={(e) => this.setExtraFieldValue(e, option)}\n                          style={{ width: 150 }}\n                        />\n                      ) : option.data_type === \"date\" ? (<>\n                        <CalendarInput\n                          value={null}\n                          onChangeDate={(e) => this.setDateExtraFieldValue(e, option)}\n                        />\n                      </>)\n                      :(\n                        <Dropdown\n                          className=\"query-condition__value mdb-select\"\n                          name=\"value\"\n                          placeholder=\"value\"\n                          value={option.extraFieldValue.value}\n                          options={getOptions(option)}\n                          onChange={(e) => this.setExtraFieldValue(e, option)}\n                          style={{ width: 150 }}\n                        />\n                      )}\n                    </div>\n                  ) : null}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SimpleTable;\n","import React from \"react\";\nimport { Dropdown } from \"primereact/dropdown\";\nimport { InputText } from \"primereact/inputtext\";\nimport { Checkbox } from \"primereact/checkbox\";\n\nimport SimpleTable from \"../../common/simpleTable\";\nimport \"./advancedMode.scss\";\n\nconst openLink = url => {\n  // require(\"electron\").shell.openExternal(url);\n};\n\nconst validateRequired = (name, value) => {\n  if (name === 'marginOfError' && !isNaN(value)) {\n    return !value\n      || parseFloat(value) === 0\n      || (parseFloat(value) >= 0.05 && parseFloat(value) <= 0.2)\n  }\n}\n\nconst AdvancedMode = props => {\n  const {\n    fields,\n    onChange,\n    marginOfError,\n    stopTrainingAfter,\n    backend,\n    useGpu,\n    removeForTrainingFields\n  } = props;\n\n  const onChecked = e => {\n    e.target.value = e.checked;\n    onChange(e);\n  };\n\n  return (\n    <div>\n      <div className=\"minds-dialog__field\" style={{ flexFlow: \"row\" }}>\n        <div className=\"field-container\" style={{ width: \"171px\" }}>\n          <label htmlFor=\"in10\" className=\"p-checkbox-label\">\n            Sample Margin of Error\n          </label>\n          <InputText\n            id=\"in10\"\n            name=\"marginOfError\"\n            value={marginOfError || 0}\n            onChange={onChange}\n            className={`mdb-input ${validateRequired('marginOfError', marginOfError) ? '' : 'error'}`}\n            placeholder=\"Default 0 (0.05 - 0.2)\"\n            keyfilter=\"pnum\"\n          />\n        </div>\n\n        <div\n          className=\"field-container horizontal-padding\"\n          style={{ width: \"137px\" }}\n        >\n          <label htmlFor=\"in11\" className=\"p-checkbox-label\">\n            Stop Training After:\n          </label>\n          <InputText\n            id=\"in11\"\n            name=\"stopTrainingAfter\"\n            value={stopTrainingAfter || \"\"}\n            onChange={onChange}\n            className=\"mdb-input\"\n            placeholder=\"In minutes\"\n            type=\"text\"\n            keyfilter=\"pint\"\n          />\n        </div>\n\n        <div className=\"field-container\">\n          <label htmlFor=\"in12\" className=\"p-checkbox-label\">\n            Backend:\n          </label>\n          <Dropdown\n            inputId=\"in12\"\n            name=\"backend\"\n            value={backend}\n            options={[\n              { label: \"Lightwood\", value: \"lightwood\" },\n              { label: \"Ludwig\", value: \"ludwig\" }\n            ]}\n            onChange={onChange}\n            placeholder=\"\"\n            className=\"mdb-select\"\n          />\n        </div>\n      </div>\n\n      <div\n        className=\"minds-dialog__field\"\n        style={{ flexFlow: \"row\", marginTop: \"26px\" }}\n      >\n        <div className=\"flex-container\" style={{ marginRight: \"50px\" }}>\n          <label htmlFor=\"in13\" className=\"p-checkbox-label\">\n            Use GPU\n          </label>\n          <Checkbox\n            name=\"useGpu\"\n            value={useGpu}\n            onChange={e => onChecked(e)}\n            checked={useGpu}\n            className=\"mdb-select\"\n          />\n        </div>\n      </div>\n\n      <div className=\"minds-dialog__field\">\n        <label htmlFor=\"in15\" className=\"p-checkbox-label\">\n          Select colums to be removed for training:\n        </label>\n        <SimpleTable\n          name=\"removeForTrainingFields\"\n          filter\n          value={removeForTrainingFields}\n          options={fields}\n          onChange={onChange}\n          useDeleteIcon\n        />\n      </div>\n\n      <span className=\"how-to-use\">\n        For more information on how to use advance parameters{\" \"}\n        <button\n          onClick={() =>\n            openLink(\n              \"https://docs.mindsdb.com/PredictorInterface/\"\n            )\n          }\n        >\n          click here.\n        </button>\n      </span>\n    </div>\n  );\n};\n\nexport default AdvancedMode;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport MindsDB from \"mindsdb-js-sdk\";\nimport { Dialog } from \"primereact/dialog\";\nimport { Button } from \"primereact/button\";\nimport { Dropdown } from \"primereact/dropdown\";\nimport { observer } from \"mobx-react\";\nimport { InputText } from '../../inputText'\n\nimport SimpleTable from \"../../common/simpleTable\";\nimport AdvancedMode from \"./advancedMode\";\n\n@observer\nclass NewPredictorWin extends Component {\n  static propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onHide: PropTypes.func.isRequired,\n    dataSourcesStore: PropTypes.object.isRequired\n  };\n\n  state = {\n    dataSource: null,\n    predictedFields: null,\n    predictorName: \"\",\n    showAdvancedMode: false,\n    marginOfError: 0,\n    stopTrainingAfter: null,\n    backend: \"lightwood\",\n    useGpu: false,\n    optionalAnalysis: false,\n    removeForTrainingFields: null\n  };\n\n  async componentWillMount() {\n    const { dataSourcesStore } = this.props;\n    if (!dataSourcesStore.loaded) {\n      await dataSourcesStore.load();\n    }\n    this.selectDataSource();\n  }\n\n  selectDataSource() {\n    const { dataSourcesStore } = this.props;\n    if (\n      dataSourcesStore.dropdownOptions &&\n      dataSourcesStore.dropdownOptions.length\n    ) {\n      this.setState({ dataSource: dataSourcesStore.dropdownOptions[0].value });\n    }\n  }\n\n  onShow = () => {\n    this.setState({\n      dataSource: null,\n      predictedFields: null,\n      predictorName: \"\",\n      showAdvancedMode: false,\n      marginOfError: 0,\n      stopTrainingAfter: null,\n      backend: \"lightwood\",\n      useGpu: false,\n      optionalAnalysis: false,\n      removeForTrainingFields: null\n    });\n    this.selectDataSource();\n  };\n\n  onTrain = async () => {\n    const { dataSourcesStore, onHide } = this.props;\n    const {\n      predictorName,\n      dataSource,\n      predictedFields,\n      showAdvancedMode,\n      marginOfError,\n      stopTrainingAfter,\n      backend,\n      useGpu,\n      removeForTrainingFields\n    } = this.state;\n\n    const dataSourceName = dataSourcesStore.data[dataSource].name;\n    const toPredict = predictedFields;\n    const predictor = MindsDB.Predictor({ name: predictorName });\n\n    let dataToLearn = { dataSourceName, toPredict };\n    if (showAdvancedMode) {\n      const fieldsToIgnore = removeForTrainingFields\n        ? removeForTrainingFields.filter(\n            ignore => !predictedFields.find(predict => predict === ignore)\n          )\n        : null;\n\n      const kwargs = {\n        use_gpu: useGpu,\n        backend: backend,\n        ignore_columns: fieldsToIgnore,\n        sample_settings: {\n          sample_margin_of_error: parseFloat(marginOfError),\n        },\n        stop_training_in_x_seconds: stopTrainingAfter ? parseInt(stopTrainingAfter) * 60 * 1000 : 0, // to milliseconds\n      };\n\n      if (kwargs.stop_training_in_x_seconds === 0) {\n        delete kwargs.stop_training_in_x_seconds;\n      }\n\n      dataToLearn = { dataSourceName, toPredict, kwargs };\n    }\n\n    try {\n      predictor.learn(dataToLearn);\n      // window.growl.show({ severity: \"success\", detail: \"Training started\" });\n      onHide(true);\n    } catch (e) {\n      // window.showError(e);\n    }\n  };\n\n  setFieldValue = e => {\n    let { removeForTrainingFields } = this.state;\n    if (e.target.name === \"predictedFields\" && removeForTrainingFields) {\n      removeForTrainingFields = removeForTrainingFields.filter(\n        ignore => !e.target.value.find(predict => predict === ignore)\n      );\n      this.setState({\n        [e.target.name]: e.target.value,\n        removeForTrainingFields\n      });\n    } else if (e.target.name === 'marginOfError') {\n      this.setState({ [e.target.name]: e.target.value || 0 });\n    } else {\n      this.setState({ [e.target.name]: e.target.value });\n    }\n  };\n\n  isInvalidMarginOfError = val => {\n    if (!isNaN(val)) {\n      const decimal = parseFloat(val);\n      if ((decimal >= 0.05 && decimal <= 0.2) || decimal === 0) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  render() {\n    const { dataSourcesStore, visible, onHide } = this.props;\n    const {\n      predictedFields,\n      dataSource,\n      predictorName,\n      showAdvancedMode,\n      marginOfError,\n      stopTrainingAfter,\n      backend,\n      useGpu,\n      optionalAnalysis,\n      removeForTrainingFields\n    } = this.state;\n    let fields = [];\n    if (dataSource !== null) {\n      fields = dataSourcesStore\n        .getFields(dataSource)\n        .map(el => ({ label: el.name, value: el.name }));\n    }\n    let invalid =\n      !predictedFields ||\n      !predictedFields.length ||\n      dataSource === null ||\n      predictorName === \"\";\n\n    if (showAdvancedMode) {\n      invalid =\n        invalid ||\n        this.isInvalidMarginOfError(marginOfError) ||\n        backend === null;\n    }\n\n    let fieldsToIgnore = fields;\n    if (predictedFields && predictedFields.length > 0) {\n      fieldsToIgnore = fields.filter(\n        field => !predictedFields.find(predicted => predicted === field.value)\n      );\n    }\n\n    return (\n      <Dialog\n        visible={visible}\n        onHide={onHide}\n        onShow={this.onShow}\n        modal\n        header={showAdvancedMode ? \"New Predictor Adv. Mode\" : \"New Predictor\"}\n        className={`minds-dialog ${showAdvancedMode ? \"width-100\" : \"\"}`}\n        style={{ width: showAdvancedMode ? \"1000px\" : \"500px\" }}\n      >\n        <div className={showAdvancedMode ? \"super-container\" : \"\"}>\n          <div className=\"left-container\">\n            <div className=\"minds-dialog__field\">\n              <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\n                From:\n              </label>\n              <Dropdown\n                inputId=\"cb3\"\n                name=\"dataSource\"\n                value={dataSource}\n                // options={ dataSources }\n                options={dataSourcesStore.dropdownOptions}\n                onChange={this.setFieldValue}\n                placeholder=\"\"\n                className=\"mdb-select\"\n              />\n            </div>\n\n            <div className=\"minds-dialog__field\">\n              <label htmlFor=\"cb5\" className=\"p-checkbox-label\">\n                Predictor name:\n              </label>\n              <InputText\n                id=\"cb5\"\n                name=\"predictorName\"\n                value={predictorName}\n                onChange={this.setFieldValue}\n                className=\"mdb-input\"\n                placeholder=\"Name Your New Predictor\"\n              />\n            </div>\n\n            <div className=\"minds-dialog__field\">\n              <label htmlFor=\"cb4\" className=\"p-checkbox-label\">\n                Select only the colums to be predicted:\n              </label>\n              <SimpleTable\n                name=\"predictedFields\"\n                filter\n                value={predictedFields}\n                options={fields}\n                onChange={this.setFieldValue}\n                searchIconStyles={showAdvancedMode ? { right: \"8px\" } : {}}\n              />\n            </div>\n          </div>\n          {showAdvancedMode ? (\n            <div className=\"right-container\">\n              <AdvancedMode\n                predictedFields={predictedFields}\n                fields={fieldsToIgnore}\n                onChange={this.setFieldValue}\n                marginOfError={marginOfError}\n                stopTrainingAfter={stopTrainingAfter}\n                backend={backend}\n                useGpu={useGpu}\n                optionalAnalysis={optionalAnalysis}\n                removeForTrainingFields={removeForTrainingFields}\n              />\n            </div>\n          ) : null}\n        </div>\n\n        <div className=\"separate-btns\" style={{ marginTop: \"24px\" }}>\n          <p\n            className=\"mode-button\"\n            onClick={() =>\n              this.setState({ showAdvancedMode: !showAdvancedMode })\n            }\n          >\n            {showAdvancedMode ? \"Basic Mode\" : \"Advanced Mode\"}\n          </p>\n          <div>\n            <Button\n              className=\"minds-action-btn lg-btn-spacing bold red\"\n              type=\"button\"\n              label={\n                <div className=\"icon-text\">\n                  <span>CANCEL</span>\n                </div>\n              }\n              onClick={onHide}\n            />\n            <Button\n              className=\"minds-action-btn lg-btn-spacing bold\"\n              type=\"button\"\n              label={\n                <div className=\"icon-text\">\n                  <span>TRAIN</span>\n                </div>\n              }\n              onClick={this.onTrain}\n              disabled={invalid}\n            />\n          </div>\n        </div>\n      </Dialog>\n    );\n  }\n}\n\nexport default NewPredictorWin;\n","import {\n  observable, action, computed, runInAction, decorate\n} from 'mobx';\nimport MindsDB from 'mindsdb-js-sdk';\n\nclass DatasourcesStore {\n  data = [];\n  loading = false;\n  loaded = false;\n\n  get dropdownOptions() {\n    return this.data.map(\n      (el, index) => ({ label: el.name, value: index })\n    );\n  }\n\n  getFields = (index) => this.data[index].columns || [];\n\n  getByName = (name) => {\n    for (let i = 0; i < this.data.length; i++) {\n      if (this.data[i].name === name) return this.data[i];\n    }\n    return null;\n  };\n\n  reset = () => {\n    this.loading = false;\n    this.loaded = false;\n    this.data = [];\n  };\n\n  async load(params) {\n    this.loading = true;\n    try {\n      const dataSources = await MindsDB.dataSources(params);\n      runInAction(() => {\n        this.data = dataSources;\n        this.loading = false;\n        this.loaded = true;\n      });\n    } catch (e) {\n      // window.showError(e);\n      runInAction(() => this.loading = false);\n    }\n  }\n\n  async download(opts, params) {\n    try {\n      await MindsDB.DataSource(opts).download(params);\n    } catch (e) {\n      // window.showError(e);\n    }\n  }\n\n  async delete(opts, params) {\n    try {\n      await MindsDB.DataSource(opts).delete(params);\n      await this.load(params);\n      // window.growl.show({ severity: 'success', detail: 'Data source removed' });\n    } catch (e) {\n      // window.showError(e);\n    }\n  }\n}\n\ndecorate(DatasourcesStore, {\n  data: observable,\n  loading: observable,\n  loaded: observable,\n  dropdownOptions: computed,\n  reset: action,\n  load: action,\n  download: action,\n  delete: action\n});\n\nexport default new DatasourcesStore();\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport MindsDB from 'mindsdb-js-sdk';\nimport { Dialog } from 'primereact/dialog';\nimport { Button } from 'primereact/button';\nimport { ProgressBar } from 'primereact/progressbar';\nimport './index.scss';\n\nclass UploadWin extends Component {\n  static propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onHide: PropTypes.func.isRequired\n  };\n\n  state = {\n    file: null,\n    uploading: false,\n    percentCompleted: 0,\n    showFileErrorMessage: false,\n  };\n\n  onShow = () => {\n    this.setState({\n      uploading: false,\n      file: null,\n      showFileErrorMessage: false,\n    });\n  };\n\n  onUpload = async () => {\n    const { file } = this.state;\n    const predictor = MindsDB.Predictor();\n\n    this.setState({ uploading: true });\n    try {\n      await predictor.upload(file, this.onUploadProgress);\n      // window.growl.show({ severity: 'success', detail: 'Predictor uploaded' });\n      const { onHide } = this.props;\n      onHide(true);\n    } catch (e) {\n      // window.showError(e);\n      this.setState({ uploading: false });\n    }\n  };\n\n  onUploadProgress = (percentCompleted) => {\n    this.setState({ percentCompleted });\n  };\n\n  onPickFile = (e) => {\n    if (e.target.files && e.target.files.length) {\n      const file = e.target.files[0];\n\n      if (file && file.type === 'application/zip') {\n        this.setState({ file, showFileErrorMessage: false });\n      } else {\n        this.setState({ file: null, showFileErrorMessage: true });\n      }\n    } else {\n      this.setState({ file: null });\n    }\n  };\n\n  setFieldValue = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  render() {\n    const {\n      file,\n      uploading,\n      percentCompleted,\n      showFileErrorMessage,\n    } = this.state;\n    const invalid = !file;\n    const header = uploading ? 'Uploading predictor' : 'Upload new predictor';\n    const emptyCls = file ? '' : 'minds-file-input-value__empty';\n    const fileTitle = file ? file.name : 'No file chosen';\n\n    return (\n      <Dialog\n        visible={ this.props.visible }\n        onHide={ this.props.onHide }\n        onShow={ this.onShow }\n        modal\n        header={ header }\n        className=\"minds-upload-source\"\n      >\n        { uploading\n          ? <ProgressBar value={ percentCompleted } />\n          : (\n            <div>\n              <div className=\"p-inputgroup minds-inputgroup\">\n                <span className=\"p-inputgroup-addon minds-inputgroup-addon\">File:</span>\n                <div className={ `minds-file-input-value ${emptyCls}` }>{fileTitle}</div>\n                <input\n                  title={ fileTitle }\n                  placeholder=\"\"\n                  type=\"file\"\n                  id=\"file-input\"\n                  className=\"minds-file-input mdb-input\"\n                  accept=\"zip,application/octet-stream,application/zip,application/x-zip,application/x-zip-compressed\"\n                  onChange={ this.onPickFile }\n                />\n              </div>\n              {\n                showFileErrorMessage\n                  ? <p className=\"error-message\">Just .zip files are allowed</p>\n                  : null\n              }\n              <div className=\"separate-btns\">\n                <Button\n                  className=\"minds-action-btn red\"\n                  type=\"button\"\n                  label={ (\n                    <div className=\"icon-text\">\n                      <span>CANCEL</span>\n                    </div>\n                  ) }\n                  onClick={ this.props.onHide }\n                />\n                <Button\n                  className=\"minds-action-btn\"\n                  type=\"button\"\n                  label={ (\n                    <div className=\"icon-text\">\n                      <span>UPLOAD</span>\n                    </div>\n                  ) }\n                  onClick={ this.onUpload }\n                  disabled={ invalid }\n                />\n              </div>\n            </div>\n          )\n        }\n      </Dialog>\n    );\n  }\n}\n\nexport default UploadWin;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Column } from \"primereact/column\";\nimport { Button } from \"primereact/button\";\nimport { observer } from \"mobx-react\";\nimport DataTable from '../ui/mindsDataTable';\nimport Moment from \"moment\";\n\nimport EmptyPage from \"../common/emptyPage\";\nimport NewPredictorWin from \"./newPredictorWin\";\nimport dataSourcesStore from \"../../store/dataSources\";\nimport UploadWin from \"./uploadWin\";\nimport navigation from \"../../store/navigation\";\nimport { Mixpanel } from \"../../utils/mixpanel\";\nimport { TitleBar } from '../ui/TittleBar';\nimport DarkMode from \"../ui/darkMode\";\n\nimport \"./index.scss\";\n\n@observer\nclass Predictors extends Component {\n  static propTypes = {\n    predictorsStore: PropTypes.object.isRequired\n  };\n\n  state = {\n    uploadWinVisible: false,\n    newPredictorWinVisible: false,\n\n    thWidths: null,\n    thHeight: null\n  };\n\n  componentWillMount() {\n    this.reload();\n  }\n\n  componentDidMount() {\n    this.resizeObserver = new ResizeObserver(this.onResize);\n    this.mutationObserver = new MutationObserver(this.onResize);\n    this.resizeObserver.observe(this.wrapperRef);\n    this.mutationObserver.observe(this.wrapperRef, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  componentWillUnmount() {\n    this.resizeObserver.disconnect();\n    this.mutationObserver.disconnect();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  onResize = () => {\n    // get cells widths\n    const row = this.wrapperRef.querySelector(\".p-datatable-row\");\n    let thWidths = null;\n    let thHeight = null;\n    if (row) {\n      thWidths = new Array(row.children.length);\n      for (let i = 0; i < row.children.length; i++) {\n        thWidths[i] = row.children[i].getClientRects()[0].width;\n      }\n    }\n    // get title height\n    const header = this.wrapperRef.querySelector(\".p-datatable-thead > tr\");\n    if (header) {\n      thHeight = header.getBoundingClientRect().height;\n    }\n    this.setState({\n      thWidths,\n      thHeight\n    });\n  };\n\n  interval = null;\n\n  reload = () => {\n    const { predictorsStore } = this.props;\n    predictorsStore.load();\n\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n    this.interval = setInterval(() => {\n      if (predictorsStore.loading === false) {\n        predictorsStore.load();\n      }\n    }, 5000);\n  };\n\n  onDownload = async predictor => {\n    try {\n      await predictor.download();\n    } catch (e) {\n      // window.showError(e);\n    }\n  };\n\n  onUpload = () => { };\n\n  onDelete = async predictor => {\n    try {\n      await predictor.delete();\n      this.reload();\n      // window.growl.show({ severity: \"success\", detail: \"Predictor removed\" });\n    } catch (e) {\n      // window.showError(e);\n    }\n  };\n\n  onSelectionChange = e => {\n    if (e.value.status === \"training\") return;\n\n    navigation.openPredictor(e.value);\n  };\n\n  hideNewPredictorWin = needReload => {\n    this.setState({\n      newPredictorWinVisible: false\n    });\n    if (needReload) {\n      this.reload();\n    }\n  };\n\n  showNewPredictorWin = () => {\n    this.setState({\n      newPredictorWinVisible: true\n    });\n    Mixpanel.track(\"Predictors > Train New\");\n  };\n\n  showUploadWin = () => {\n    this.setState({\n      uploadWinVisible: true\n    });\n    Mixpanel.track(\"Predictors > Upload\");\n  };\n\n  hideUploadWin = () => {\n    this.setState(\n      {\n        uploadWinVisible: false\n      },\n      () => {\n        this.reload();\n      }\n    );\n  };\n\n  actionTemplate = (rowData, _column) => (\n    <div>\n      <div className=\"minds-table__actions\">\n        <Button\n          type=\"button\"\n          disabled={rowData.status === \"training\"}\n          className=\"minds-action-btn lg-btn\"\n          label=\"QUERY\"\n          onClick={e => {\n            e.preventDefault();\n            e.stopPropagation();\n            navigation.openQuery(rowData.name);\n            Mixpanel.track(\"Predictors > Query\");\n          }}\n        />\n        <Button\n          type=\"button\"\n          disabled={rowData.status === \"training\"}\n          className=\"minds-action-btn lg-btn\"\n          label=\"PREVIEW\"\n          onClick={e => {\n            e.preventDefault();\n            e.stopPropagation();\n            this.onSelectionChange({ value: rowData });\n            Mixpanel.track(\"Predictors > Preview\");\n          }}\n        />\n        <Button\n          type=\"button\"\n          disabled={rowData.status === \"training\"}\n          className=\"minds-action-btn sm-btn\"\n          label={\n            <span className=\"minds-action-btn__icon\">\n              <i className=\"fas fa-download\" />\n            </span>\n          }\n          onClick={e => {\n            e.preventDefault();\n            e.stopPropagation();\n            this.onDownload(rowData);\n            Mixpanel.track(\"Predictors > Download\");\n          }}\n        />\n        <Button\n          type=\"button\"\n          className=\"minds-action-btn red\"\n          label={\n            <span className=\"minds-action-btn__icon\">\n              <i className=\"fas fa-trash\" />\n            </span>\n          }\n          onClick={e => {\n            e.preventDefault();\n            e.stopPropagation();\n            this.onDelete(rowData);\n            Mixpanel.track(\"Predictors > Delete\");\n          }}\n        />\n      </div>\n    </div>\n  );\n\n  fieldsTemplate = (rowData, column) => rowData[column.field].join(\", \");\n\n  accuracyTemplace = (rowData, column) => {\n    let className;\n    if (rowData[column.field] === 0) {\n      return \"-\";\n    }\n    if (rowData[\"status\"] === \"complete\") {\n      className = \"completed\";\n    }\n    return (\n      <span className={className}>\n        {parseFloat((rowData[column.field] * 100).toFixed(2))}%\n      </span>\n    );\n  };\n\n  statusTemplate = (rowData, column) => {\n    let className;\n    let elapsed;\n    if (rowData[column.field] === \"complete\") {\n      className = \"completed\";\n    }\n    if (rowData[column.field] === \"training\") {\n      let startDate = Moment(rowData.created_at);\n      elapsed = Moment.duration(Moment().diff(startDate));\n      elapsed = Moment.utc(elapsed.asMilliseconds()).format(\"HH:mm:ss\");\n    }\n    return (\n      <span className={className}>\n        {rowData[column.field]} {elapsed}\n      </span>\n    );\n  };\n\n  render() {\n    const { predictorsStore } = this.props;\n    const { thWidths, thHeight } = this.state;\n    const cols = [...predictorsStore.fields];\n    const dynamicColumns = cols.map((col, index) => {\n      let template;\n      if (col.field === \"predict\") {\n        template = this.fieldsTemplate;\n      } else if (col.field === \"accuracy\") {\n        template = this.accuracyTemplace;\n      }\n      if (col.field === \"status\") {\n        template = this.statusTemplate;\n      }\n      return (\n        <Column\n          key={col.field}\n          body={template}\n          field={col.field}\n          header={col.header}\n          headerStyle={{\n            width: thWidths ? thWidths[index] : undefined,\n            maxWidth: thWidths ? thWidths[index] : undefined\n          }}\n          sortable\n        />\n      );\n    });\n    dynamicColumns.push(\n      <Column\n        body={this.actionTemplate}\n        key=\"actions-column\"\n        style={{ textAlign: \"center\", width: \"12em\" }}\n      />\n    );\n\n    return (\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <div className=\"content-dm\">\n            <div className=\"dm-items\">\n              <TitleBar>Predictors</TitleBar>\n            </div>\n            <DarkMode />\n          </div>\n        </div>\n        <div\n          className=\"main-content__body table-fit-scroll\"\n          style={{\n            paddingBottom: \"6rem\",\n            overflow: predictorsStore.data.length === 0 ? \"hidden\" : \"auto\"\n          }}\n          ref={r => {\n            this.wrapperRef = r;\n          }}\n        >\n          {this.props.predictorsStore.data.length === 0 ? (\n            <EmptyPage\n              topMessage=\"There is nothing here yet.\"\n              bottomMessage=\"Upload model or click on train new\"\n            />\n          ) : (\n              <DataTable\n                value={this.props.predictorsStore.data}\n                headerHeight={thHeight}\n                selectionMode=\"single\"\n                className=\"minds-table card predictors-datatable\"\n                onSelectionChange={this.onSelectionChange}\n              >\n                {dynamicColumns}\n              </DataTable>\n            )}\n          <NewPredictorWin\n            visible={this.state.newPredictorWinVisible}\n            onHide={this.hideNewPredictorWin}\n            dataSourcesStore={dataSourcesStore}\n          />\n          <UploadWin\n            visible={this.state.uploadWinVisible}\n            onHide={this.hideUploadWin}\n          />\n        </div>\n        <div className=\"fixed-buttons\">\n          <Button\n            className=\"minds-action-btn\"\n            type=\"button\"\n            icon=\"fas fa-dolly-flatbed\"\n            label=\"UPLOAD MODEL\"\n            onClick={this.showUploadWin}\n          />\n          <Button\n            className=\"minds-action-btn\"\n            type=\"button\"\n            icon=\"fas fa-robot\"\n            label=\" TRAIN NEW\"\n            onClick={this.showNewPredictorWin}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Predictors;\n","import React from 'react';\nimport { ResponsiveBar } from '@nivo/bar';\n\nconst HorizontalBar = ({ data, keys, margin, colors = [ '#00b06d' ], height = 300, onMouseEnter = ()=> {}, onMouseLeave = ()=> {}, legendTop}) => {\n\treturn (\n\t\t<div style={{ height: height }}>\n\t\t\t<ResponsiveBar\n\t\t\t\tdata={data}\n\t\t\t\tkeys={keys}\n\t\t\t\tindexBy=\"importance\"\n\t\t\t\tmargin={margin}\n\t\t\t\tpadding={0.2}\n\t\t\t\tinnerPadding={0}\n\t\t\t\tlayout=\"horizontal\"\n\t\t\t\tcolors={colors}\n\t\t\t\tenableGridX={true}\n\t\t\t\tenableGridY={true}\n\t\t\t\tdefs={[]}\n\t\t\t\tfill={[]}\n\t\t\t\tborderColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n\t\t\t\taxisRight={null}\n\t\t\t\tenableSlicesLabels={false}\n\t\t\t\taxisTop={legendTop}\n\t\t\t\taxisBottom={{\n\t\t\t\t\ttickSize: 5,\n\t\t\t\t\ttickPadding: 5,\n\t\t\t\t\ttickRotation: 0,\n\t\t\t\t\tlegend: '',\n\t\t\t\t\tlegendPosition: 'middle',\n\t\t\t\t\tlegendOffset: 32\n\t\t\t\t}}\n\t\t\t\taxisLeft={{\n\t\t\t\t\ttickSize: 4,\n\t\t\t\t\ttickPadding: 10,\n\t\t\t\t\ttickRotation: 0,\n\t\t\t\t\tlegendPosition: 'middle',\n\t\t\t\t\tlegendOffset: 0\n\t\t\t\t}}\n\t\t\t\tlabelSkipWidth={12}\n\t\t\t\tlabelSkipHeight={12}\n\t\t\t\ttooltip={(d) => `${d.id} : ${d.value}`}\n\t\t\t\tlabelTextColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n\t\t\t\tlegends={[]}\n\t\t\t\tanimate={true}\n\t\t\t\tenableLabel={false}\n\t\t\t\tmotionStiffness={90}\n\t\t\t\tmotionDamping={15}\n\t\t\t\tonMouseEnter={(_data, event) => onMouseEnter(_data, event)}\n\t\t\t\tonMouseLeave={(_data, event) => onMouseLeave(_data, event)}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default HorizontalBar;\n","import styled from '@emotion/styled';\nimport { Rubik } from '../Fonts';\nimport { Colors } from '../Colors';\n\nexport const PieContainer = styled.div`position: relative;`;\n\nexport const TextContainer = styled.div`\n\tposition: absolute;\n  @media (max-width: 1150px) {\n    left: 0.4rem;\n    }\n`;\n\nexport const Info = styled.p`\n\ttext-align: center;\n  overflow-wrap: break-word;\n  color: ${Colors.mirage};\n\twidth: 220px;\n\theight: 20px;\n\tmargin: 0;\n\tfont-size: 16px;\n\tfont-family: ${Rubik};\n\tfont-weight: 500;\n\tfont-stretch: normal;\n  font-style: normal;\n  line-height: 1;\n`;\n\nexport const InfoConfidence = styled.p`\n\ttext-align: center;\n\toverflow-wrap: break-word;\n  line-height: 0.3;\n  color: ${Colors.mirage};\n\twidth: 220px;\n\theight: 20px;\n\tmargin: 0;\n\tfont-size: 24px;\n\tfont-family: ${Rubik};\n\tfont-weight: 500;\n\tfont-stretch: normal;\n\tfont-style: normal;\n`;\n","import React from 'react';\nimport { ResponsivePie } from '@nivo/pie';\nimport { PieContainer, TextContainer, Info, InfoConfidence } from './styles';\n\nconst Pie = ({\n\tconfidenceInterval,\n\theight,\n\tdata,\n\tinfoData = '',\n\tinfoDatatext2 = '',\n\tendAngle = 360,\n\tmtop = 0,\n\tmleft = 0,\n\tpieColor\n}) => (\n\t<PieContainer style={{ height: height }}>\n\t\t<TextContainer style={{ top: `${mtop}px`, left: `${mleft}px` }}>\n\t\t\t<InfoConfidence>{confidenceInterval}</InfoConfidence>\n\t\t\t<Info style={{ fontSize: infoData === 'Test' ? '20px' : '17px' }}>{infoData}</Info>\n\t\t\t<Info>{infoDatatext2}</Info>\n\t\t</TextContainer>\n\n\t\t<ResponsivePie\n\t\t\tdata={data}\n\t\t\tmargin={{ top: 10, right: 0, bottom: 10, left: 0 }}\n\t\t\tinnerRadius={0.75}\n\t\t\tpadAngle={0.7}\n\t\t\tcornerRadius={0}\n\t\t\tenableSlicesLabels={false}\n\t\t\tcolors={[ pieColor ]}\n\t\t\tborderWidth={3}\n\t\t\tborderColor={{ from: 'color', modifiers: [ [ 'darker', 0.2 ] ] }}\n\t\t\tradialLabelsSkipAngle={10}\n\t\t\tfit={false}\n\t\t\tradialLabelsTextXOffset={6}\n\t\t\tradialLabelsTextColor={pieColor}\n\t\t\tradialLabelsLinkOffset={-24}\n\t\t\tradialLabelsLinkDiagonalLength={0}\n\t\t\tendAngle={endAngle}\n\t\t\tenableRadialLabels={false}\n\t\t\tslicesLabelsSkipAngle={10}\n\t\t\tslicesLabelsTextColor={pieColor}\n\t\t\tisInteractive={false}\n\t\t\tanimate={true}\n\t\t\tmotionStiffness={90}\n\t\t\tmotionDamping={15}\n\t\t\tdefs={[]}\n\t\t\tfill={[]}\n\t\t/>\n\t</PieContainer>\n);\n\nexport default Pie;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport HorizontalBar from \"../../ui/HorizontalBar\";\nimport { Colors } from \"../../ui/Colors\";\nimport withContext from \"../../../HOC/withContext\";\nimport Pie from \"../../ui/PredictorPie\";\nimport \"./index.scss\";\n\nconst TrainingInfo = (props) => {\n  const { context, dataPreparation, accuracy } = props;\n  const nivoPars = [\n    {\n      importance: \"Test\",\n      importanceColor: \"hsl(253, 70%, 50%)\",\n      Test:\n        dataPreparation[\"test_row_count\"] +\n        dataPreparation[\"validation_row_count\"],\n      Title: \"Testing Subset\",\n      Description: `A Testing Subset is the dataset we use to check how well our trained\n      model aligns with alternative data - with the data that was not used for training. In other words, we use it\n      to check how well the model has \"learned\"`,\n    },\n    {\n      importance: \"Training\",\n      importanceColor: \"hsl(253, 70%, 50%)\",\n      Training: dataPreparation[\"train_row_count\"],\n      Title: \"Training Subset\",\n      Description: `A Training Subset is what we call\n      the dataset used to teach our model, in other words, the dataset used for\n      \"learning\"`,\n    },\n  ];\n  const barMargin = { top: 20, right: 20, bottom: 20, left: 60 };\n  const barColors = [Colors.selectedBreacump, Colors.primaryBar];\n  const onMouseEnter = (_data, event) => {\n    event.target.style.fill = Colors.hoverBar;\n    context.sidebarContent.setAnyValue({\n      title: { $set: _data.data.Title },\n      paragraph: { $set: _data.data.Description },\n      url: { $set: \"\" },\n    });\n  };\n\n  const onMouseLeave = (_data, event) => {\n    event.target.style.fill =\n      _data.id === \"Test\" ? Colors.selectedBreacump : Colors.primaryBar;\n      context.sidebarContent.setAnyValue({\n        title: { $set: '' },\n        paragraph: { $set: '' },\n        url: { $set: '' }\n      })\n  };\n\n  // const usedRowsPercent = Math.round(\n  //   (dataPreparation[\"used_row_count\"] / dataPreparation[\"total_row_count\"]) *\n  //     100\n  // );\n  const dataAcuracy = [\n    {\n      id: \"\",\n      label: \"confidence\",\n      value: accuracy,\n      color: \"hsl(250, 70%, 50%)\",\n    },\n  ];\n\n  // const dataTest = [\n  //   {\n  //     id: \"\",\n  //     label: \"confidence\",\n  //     value: usedRowsPercent,\n  //     color: \"hsl(250, 70%, 50%)\",\n  //   },\n  // ];\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"column\">\n          <div className=\"graph-container\">\n            <div className=\"accuracy-doughnut\">\n              <Pie\n                confidenceInterval={`${parseFloat((accuracy * 100).toFixed(3))}%`}\n                infoData={'Test'}\n                infoDatatext2={'Accuracy'}\n                height={210}\n                data={dataAcuracy}\n                endAngle={( accuracy * 100* 360 ) / 100}\n                mtop={81}\n                mleft={13}\n                pieColor={Colors.selectedBreacump}\n              />\n            </div>\n            <div className=\"summary-doughnut\">\n            {/* <Pie\n                confidenceInterval={`${usedRowsPercent}%`}\n                infoData={'Training'}\n                infoDatatext2={'Accuracy'}\n                height={160}\n                data={dataTest}\n                endAngle={( usedRowsPercent * 100* 360 ) / 100}\n                mtop={55}\n                mleft={-33}\n                pieColor={Colors.primaryBar}\n              /> */}\n            </div>\n          </div>\n          <strong>Model General Accuracies</strong>\n          <p>\n            When blindsided the model predicted correctly{\" \"}\n            <span className=\"tag tag__default\">\n              {`${parseFloat((accuracy * 100).toFixed(3))}`}%\n            </span>{\" \"}\n            of the times, this means the model is fairly accurate.\n          </p>\n        </div>\n        <div className=\"column\">\n          <strong className=\"title-s\">Dataset Spliting and Usage</strong>\n          <div>\n            <HorizontalBar\n              data={nivoPars}\n              keys={nivoPars.map((column) => column.importance)}\n              margin={barMargin}\n              colors={barColors}\n              height={300}\n              onMouseEnter={onMouseEnter}\n              onMouseLeave={onMouseLeave}\n              legendTop={null}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nTrainingInfo.propTypes = {\n  trainingData: PropTypes.array,\n  predictor: PropTypes.object,\n  dataPreparation: PropTypes.object,\n  accuracy: PropTypes.number.isRequired,\n  goToPredictorDataQuality: PropTypes.func.isRequired,\n};\n\nTrainingInfo.defaultProps = {\n  trainingData: [],\n  predictor: {},\n  dataPreparation: {},\n};\n\nexport default withContext(TrainingInfo);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport HorizontalBar from \"../../ui/HorizontalBar\";\n\nconst ColumnImportance = (props) => {\n  const { data } = props.predictorStore;\n  const rawImportance = data[\"model_analysis\"][0][\"overall_input_importance\"];\n  // const meta = data['data_analysis']['input_columns_metadata'];\n  const importance = rawImportance.x.map((x, i) => ({\n    x,\n    y: parseFloat(rawImportance.y[i].toFixed(2)),\n  }));\n  importance.sort((a, b) => a.y - b.y);\n  const pieData = importance.map((ps) => {\n    return {\n      importance: ps.x,\n      importanceColor: \"hsl(253, 70%, 50%)\",\n      [ps.x]: ps.y,\n    };\n  });\n  const barMargin = { top: 20, right: 50, bottom: 50, left: 150 };\n  const legendTop = {\n    tickSize: 5,\n    tickPadding: 5,\n    tickRotation: 0,\n    legend: \"\",\n    legendPosition: \"middle\",\n    legendOffset: 32,\n  };\n\n  return (\n    <>\n      <strong>Column Importance</strong>\n      <br />\n      <HorizontalBar\n        data={pieData}\n        keys={importance.map((column) => column.x)}\n        margin={barMargin}\n        height={400}\n        legendTop={legendTop}\n      />\n    </>\n  );\n};\n\nColumnImportance.propTypes = {\n  predictorStore: PropTypes.object.isRequired,\n};\n\nexport default ColumnImportance;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { useSpring, animated } from 'react-spring';\nimport { ResponsiveHeatMap } from '@nivo/heatmap';\n\nimport { Colors } from '../Colors';\n\nconst ContainerToolTips = styled.div`\n  cursor: pointer;\n  display: inline-flex;\n  flex-direction: row;\n  align-items: baseline;\n  span {\n    margin-right: 5px;\n    margin-left: 5px;\n  }\n  .redSpan {\n    color: ${Colors.watermelon};\n  }\n  .greenSpan {\n    color: ${Colors.selectedBreacump};\n  }\n`\nconst TootltipSquare = styled.div`\n  width: 10px;\n  height: 10px;\n  margin-right: 5px;\n  &.redSquare {\n    background: ${Colors.watermelon};\n  }\n  &.greenSquare {\n    background: ${Colors.selectedBreacump};\n  }\n`\n\nexport const ConfMatrix = ({ dataResponse, dataKeys, hoverEvent }) => {\n  const CustomCell = ({\n    x,\n    y,\n    data,\n    value,\n    width,\n    height,\n    color,\n    opacity,\n    borderWidth,\n    borderColor,\n    textColor,\n    onHover,\n    onLeave,\n  }) => {\n    const isMiddle = data.xKey === data.yKey;\n    const cell = parseFloat(value * 100).toFixed(0);\n\n    const animatedProps = useSpring({\n      transform: `translate(${x}, ${y})`,\n      width,\n      height,\n      xOffset: width * -0.5,\n      yOffset: height * -0.6,\n      color,\n      opacity,\n      textColor,\n      borderWidth,\n      borderColor,\n    });\n\n    return (\n      <>\n        <animated.g\n          transform={animatedProps.transform}\n          style={{ cursor: 'pointer' }}\n          onMouseEnter={() => {\n            if (value > 0) {\n              hoverEvent({\n                cell: cell,\n                predictedField: data.yKey,\n                actual: data.xKey,\n                validColumn: isMiddle\n              })\n            }\n          }\n          }\n          onMouseMove={onHover}\n          onMouseLeave={onLeave}\n        >\n          <animated.rect\n            x={animatedProps.xOffset}\n            y={animatedProps.yOffset}\n            width={animatedProps.width}\n            height={animatedProps.height}\n            fill={(value === 0 || isNaN(value)) ? \"white\" : isMiddle\n              ? `rgb(0, 176, 109, ${cell / 100} )`\n              : `rgb(255, 0, 0, ${cell / 100})`\n            }\n            strokeWidth={animatedProps.borderWidth}\n            stroke={animatedProps.borderColor}\n            strokeOpacity={animatedProps.opacity}\n          />\n          <animated.text\n            dominantBaseline=\"central\"\n            textAnchor=\"middle\"\n            style={{ fill: textColor }}\n            dy={value < 50 ? -6 : 6}\n          >\n            {\n              (value === 0 || isNaN(value)) ? '-' : `${cell}%`\n            }\n          </animated.text>\n        </animated.g>\n      </>\n    )\n  }\n\n  return (\n    <ResponsiveHeatMap\n      onHover={hoverEvent}\n      data={dataResponse}\n      cellShape={CustomCell}\n      keys={dataKeys}\n      indexBy=\"predictedField\"\n      margin={{ top: 100, right: 60, bottom: 60, left: 60 }}\n      forceSquare={true}\n      animate={true}\n      motionStiffness={80}\n      motionDamping={9}\n      hoverTarget=\"cell\"\n      axisTop={{\n        orient: 'top',\n        tickSize: 10,\n        tickPadding: 5,\n        tickRotation: -55,\n        legend: 'Actual',\n        legendPosition: 'start',\n        legendOffset: -60,\n      }}\n      axisRight={null}\n      axisBottom={null}\n      axisLeft={{\n        orient: 'left',\n        tickSize: 10,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'Predicted',\n        legendPosition: 'middle',\n        legendOffset: -70\n      }}\n      tooltip={({ value, xKey, yKey }) => {\n        const validColumn = xKey === yKey;\n        const cell = parseFloat(value * 100).toFixed(0);\n\n        return (\n          <ContainerToolTips>\n            <TootltipSquare className={validColumn ? 'greenSquare': 'redSquare'} />\n              <span className={validColumn ? 'greenSpan' : 'redSpan'}>\n                {yKey}\n              </span>\n              {' - '}\n              <span className={\n                cell < 100 ? 'greenSpan'\n                  : validColumn ? 'greenSpan' : 'redSpan' }\n              >\n                {xKey}\n              </span>\n          </ContainerToolTips>\n        )\n      }}\n      cellOpacity={1}\n      cellBorderColor={{ from: 'color', modifiers: [['darker', 1]] }}\n      labelTextColor={{ from: 'color', modifiers: [['darker', 2]] }}\n      cellHoverOthersOpacity={0.5}\n    />\n  )\n};\n","import React, { Component } from \"react\";\nimport EmptyPage from \"../emptyPage\"\nimport \"./ErrorBoundary.scss\";\nclass ErrorBoundary extends Component {\n  state = { hasError: false };\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // You can also log the error to an error reporting service\n    console.error(error, errorInfo);\n  }\n\n  render() {\n    const { fullScreen, fullPosition }  = this.props;\n\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return (\n        <div className={`${ fullScreen ? 'main-content' : ''}`} style={{\n          paddingBottom: \"6rem\",\n          overflow: fullScreen ? \"hidden\" : \"auto\"\n        }}>\n          <EmptyPage\n            topMessage=\"Something wrong happened!\"\n            customIcon=\"fa-flushed\"\n            bottomMessage=\"But we are sure we can explain!\"\n            customBtnPosition={ fullPosition ? '20% auto' : '0 auto 10px'}\n            isHasButton\n            noneBorder={!fullScreen}\n          />\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { observer } from \"mobx-react\";\n\nimport TrainingInfo from \"./trainingInfo\";\nimport { Button } from \"primereact/button\";\nimport ColumnImportance from \"./columnImportance\";\nimport { wrapHistXY } from \"../../utils/funcs\";\nimport { Breadcrumbs } from \"./../ui/Breadcrumbs\";\nimport MindsPanel from \"../common/mindsPanel\";\n\n// import ConfusionMatrix from \"./confusionMatrix\";\nimport { ConfMatrix } from \"../ui/ConfusionMatrix\";\nimport Loading from \"../ui/Loading\";\nimport { Mixpanel } from \"../../utils/mixpanel\";\nimport navigation from \"../../store/navigation\";\n\nimport ErrorBoundary from \"../common/utils/ErrorBoundary\";\nimport { TitleBar } from \"../ui/TittleBar\";\nimport { getDataByBuckets, normalizeDataConfMatrix } from \"../../utils/funcs\";\nimport withContext from '../../HOC/withContext';\n\nimport \"./index.scss\";\n\n@observer\nclass PredictorView extends Component {\n  static propTypes = {\n    predictorStore: PropTypes.object.isRequired,\n    predictor: PropTypes.object.isRequired\n  };\n\n  static wrapNotes = notes =>\n    Object.keys(notes).reduce((prev, type) => {\n      if (notes[type] > 0) {\n        prev.push({\n          type,\n          text: `${notes[type]} ${type}`\n        });\n      }\n      return prev;\n    }, []);\n\n  static objectNotes = notes =>\n    Object.keys(notes).reduce((prev, type) => {\n      if (notes[type] > 0) {\n        prev.push(\n          <div className={`header-status ${type}`}>\n            {notes[type]} {type}\n          </div>\n        );\n      }\n      return prev;\n    }, []);\n\n  static objectStatus = notes => (\n    <div className=\"header-status info\">{notes.text}</div>\n  );\n\n  state = {\n    contentHeight: null,\n    explantionData: {\n      percentage: null,\n      predictedField: \"-\",\n      actual: \"-\",\n      validColumn: null\n    }\n  };\n\n  componentWillUnmount() {\n    if (this.resizeObserver != null) {\n      this.resizeObserver.disconnect();\n    }\n  }\n\n  resizeObserver = null;\n\n  contentBodyRef = null;\n\n  onResize = () => {\n    if (this.contentBodyRef) {\n      const contentHeight = this.contentBodyRef.getBoundingClientRect().height;\n      this.setState({ contentHeight });\n    }\n  };\n\n  goToPredictors = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    navigation.setStage(\"predictors\");\n  };\n\n  goToPredictorDataQuality = () => {\n    navigation.setStage(\"predictorDataQuality\");\n  };\n\n  setBodyResizeSubscribe = r => {\n    this.contentBodyRef = r;\n    if (this.resizeObserver != null) {\n      this.resizeObserver.disconnect();\n    }\n    if (this.contentBodyRef != null) {\n      this.resizeObserver = new ResizeObserver(this.onResize);\n      this.resizeObserver.observe(this.contentBodyRef);\n    }\n  };\n\n  hoverEvent = (data) => {\n    this.setState({\n      explantionData: {\n        percentage: data.cell,\n        predictedField: data.predictedField,\n        actual: data.actual,\n        validColumn: data.validColumn\n      }\n    });\n  };\n\n  enterAction = () => {\n    console.log(\"hello in\")\n    this.props.context.sidebarContent.setAnyValue({\n      title: { $set: \"The Confusion Matrix\" },\n      paragraph: {\n        $set:\n          `A confusion matrix shows the performance an algorithm gets when solving a classification problem.\n        Each entry in the confusion matrix can tell how many samples of each class were correctly classified\n        and how many and where incorrectly classified.` },\n      url: { $set: '' }\n    })\n  }\n\n  leaveAction = () => {\n    this.props.context.sidebarContent.setAnyValue({\n      title: { $set: '' },\n      paragraph: { $set: '' },\n      url: { $set: '' }\n    })\n  }\n\n  render() {\n    const { predictorStore, predictor } = this.props;\n    const { loading, data } = predictorStore;\n\n    if (loading) {\n      return <Loading />\n    }\n    const targetDataTypes = predictorStore.data[\"data_analysis\"][\n      \"target_columns_metadata\"\n    ].reduce((prev, next) => {\n      prev[next[\"column_name\"]] = next[\"data_type\"].toLowerCase();\n      return prev;\n    }, {});\n\n    //#region training info\n    const trainingInfoData = (data[\"model_analysis\"] || []).map(model => ({\n      name: model[\"column_name\"],\n      data: wrapHistXY(model[\"train_accuracy_over_time\"])\n    }));\n\n    const accurate = `${predictor.predict} ${(predictorStore.data.accuracy * 100).toFixed(2)}% Accurate`\n\n    return (\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <div />\n          <TitleBar>\n            Predictor Results for:{\" \"}\n          </TitleBar>\n          <span className=\"fields-predicted\">\n            {predictor.predict.length > 0\n              ? predictor.predict.join(\", \")\n              : predictor.predict}\n          </span>\n          <Breadcrumbs\n            goToDatasources={this.goToPredictors}\n            dataSourceId={data.name}\n            actualSite='Predictors'\n          />\n        </div>\n        <div className=\"main-content__body\" ref={this.setBodyResizeSubscribe}>\n          <div className=\"predictor-container\">\n            <MindsPanel\n              className=\"minds-block interactive-title\"\n              header={accurate}\n              sectionTitleName={accurate}\n              toggleable\n              collapsed={false}\n              style={{ margin: \"0 0 20px 0\" }}\n\n            >\n              <ErrorBoundary>\n                <TrainingInfo\n                  trainingData={trainingInfoData}\n                  predictor={predictor}\n                  dataPreparation={data[\"data_preparation\"]}\n                  accuracy={predictorStore.data.accuracy}\n                  goToPredictorDataQuality={this.goToPredictorDataQuality}\n                />\n              </ErrorBoundary>\n            </MindsPanel>\n            <MindsPanel\n              className=\"minds-block interactive-title\"\n              header=\"What is relevant for this model?\"\n              sectionTitleName=\"What is relevant for this model?\"\n              toggleable\n              collapsed\n              style={{ margin: \"0 0 20px 0\" }}\n            >\n              <ErrorBoundary>\n                <ColumnImportance predictorStore={predictorStore} />\n              </ErrorBoundary>\n            </MindsPanel>\n            {predictorStore.data.model_analysis.map(el => {\n              const dataType = targetDataTypes[el[\"column_name\"]];\n              let dataResponse = getDataByBuckets(\"10\", dataType, el[\"confusion_matrix\"]);\n              const dataKeys = dataResponse.map((item) => item.predictedField);\n              dataResponse = normalizeDataConfMatrix(dataResponse, dataKeys);\n\n              return (\n                <MindsPanel\n                  key={`confusion-matrix-${el[\"column_name\"]}`}\n                  className=\"minds-block interactive-title scroll-x confusion-matrix-block\"\n                  header={`When can you trust this model? - ${el[\"column_name\"]}`}\n                  sectionTitleName=\"When can you trust this model?\"\n                  toggleable\n                  collapsed\n                  style={{ marginBottom: \"20px\" }}\n                >\n                  <ErrorBoundary>\n                    <div\n                      onMouseEnter={() => this.enterAction()}\n                      onMouseLeave={() => this.leaveAction()}\n                      className=\"row\">\n                      <div className=\"column column__right\">\n                        <div className=\"trust-model-container\">\n                          <strong>Explanation:</strong>{\" \"}\n                          <span className=\"label-gray\">\n                            Move the mouse over the graphic to get a detailed\n                            explanation.\n                        </span>\n                          {this.state.explantionData.percentage &&\n                            this.state.explantionData.percentage < 100 ? (\n                              <p>\n                                <span\n                                  className={`tag tag__${\n                                    this.state.explantionData.validColumn\n                                      ? \"success\"\n                                      : \"error\"\n                                    }`}\n                                >\n                                  {this.state.explantionData.percentage + \"%\"}\n                                </span>{\" \"}\n                            of the times{\" \"}\n                                <span className=\"tag tag__success\">\n                                  {this.state.explantionData.actual}\n                                </span>{\" \"}\n                                {\n                                  this.state.explantionData.actual === this.state.explantionData.predictedField ?\n                                    <>\n                                      was correctly predicted by the model.\n                                    </>\n                                    :\n                                    <>\n                                      was supposed to be predicted by the model it miss\n                                  classified it and confused it for{\" \"}\n                                      <span className=\"tag tag__error\">\n                                        {this.state.explantionData.predictedField}\n                                      </span>\n                                    </>\n                                }\n                              </p>\n                            ) : (\n                              this.state.explantionData.percentage && (\n                                <p>\n                                  <span\n                                    className={`tag tag__${\n                                      this.state.explantionData.validColumn\n                                        ? \"success\"\n                                        : \"error\"\n                                      }`}\n                                  >\n                                    {this.state.explantionData.percentage + \"%\"}\n                                  </span>{\" \"}\n                              of the time{\" \"}\n                                  {this.state.explantionData.validColumn ? (\n                                    <>\n                                      <span className=\"tag tag__success\">\n                                        {this.state.explantionData.actual}\n                                      </span>{\" \"}\n                                  was correctly predicted by the model.\n                                    </>\n                                  ) : (\n                                      <>\n                                        <span className=\"tag tag__error\">\n                                          {this.state.explantionData.actual}\n                                        </span>{\" \"}\n                                  was supposed to be predicted by the model it\n                                  miss classified it and confused it for{\" \"}\n                                        <span className=\"tag tag__error\">\n                                          {this.state.explantionData.predictedField}\n                                        </span>\n                                      </>\n                                    )}\n                                </p>\n                              )\n                            )}\n                          <br />\n                        </div>\n                      </div>\n                      <div className=\"column column__left position-confusion\">\n                        <div style={{ height: dataResponse.length >= 10 ? 600 : 400 }}>\n                          <ConfMatrix\n                            hoverEvent={this.hoverEvent}\n                            dataResponse={dataResponse}\n                            dataKeys={dataKeys}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  </ErrorBoundary>\n                </MindsPanel>\n              )\n            })}\n\n            {/* <MindsPanel\n              className=\"minds-block interactive-title\"\n              header=\"Accuracy per Details\"\n              toggleable\n              collapsed\n              style={{ margin: 30 }}\n            >\n              <PredictorQuality predictorStore={ predictorStore } />\n            </MindsPanel> */}\n          </div>\n          <div className=\"qtly-btn\">\n            <Button\n              type=\"button\"\n              className=\"minds-action-btn\"\n              label=\"QUALITY\"\n              onClick={e => {\n                e.preventDefault();\n                e.stopPropagation();\n                this.goToPredictorDataQuality();\n                Mixpanel.track(\"Predictor Results > Quality\");\n              }}\n            />\n          </div>\n          <div className=\"toolTip\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withContext(PredictorView);\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport MindsPanel from \"../common/mindsPanel\";\nimport WarningMark from \"../ui/warningMark\";\nimport DataQualityTargetColumn from \"./dataQualityTargetColumn\";\nimport predictorStore from \"../../store/predictor\";\nimport navigation from \"../../store/navigation\";\nimport { Breadcrumbs } from '../ui/Breadcrumbs';\nimport { TitleBar } from '../ui/TittleBar';\n\nimport { qualityWarnings } from '../../utils/funcs';\nimport \"./index.scss\";\n\n@observer\nclass DataQuality extends Component {\n  static goToPredictors(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    navigation.setStage(\"predictors\");\n  }\n\n  static goToPredictor(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    navigation.setStage(\"predictorView\");\n  }\n\n  render() {\n    const targetColumnsMetadata = predictorStore.data|| [];\n    const inputColumnsMetadata =\n      predictorStore.data[\"data_analysis\"][\"input_columns_metadata\"];\n\n    const dataQualityTargetColumns = targetColumnsMetadata[\"data_analysis\"][\"target_columns_metadata\"].map((columnMetadata) => {\n\n      columnMetadata.data_analysis_v2 = targetColumnsMetadata[\"data_analysis_v2\"][columnMetadata['column_name']];\n      columnMetadata.warnings = qualityWarnings(columnMetadata.data_analysis_v2);\n      columnMetadata.warningsLength = Object.keys(columnMetadata.warnings).filter(x => columnMetadata.warnings[x]).length;\n\n        return (\n          <MindsPanel\n            className=\"minds-block interactive-title\"\n            key={ `key-${columnMetadata['column_name']}` }\n            header={\n              <div className=\"collapsed-panelTitle\">\n                <span>\n                  {columnMetadata[\"column_name\"]}{\" \"}\n                </span>\n                {\n                  columnMetadata.warningsLength > 0 && (\n                    <div className=\"warn-collapsed\">\n                      <span className=\"low-span\">{columnMetadata.warningsLength} Warnings&nbsp;</span>\n                      <WarningMark type='yellow' />\n                    </div>\n                  )\n                }\n              </div>\n            }\n            sectionName={columnMetadata[\"column_name\"]}\n            columnMetadata={columnMetadata}\n            noRepeat\n            toggleable\n            collapsed\n          >\n            <DataQualityTargetColumn data={columnMetadata} />\n          </MindsPanel>\n        );\n      }\n    );\n\n    const dataQualityInputColumns = inputColumnsMetadata.map((columnMetadata) => {\n      const { predictorDataQualityCol } = navigation;\n\n      columnMetadata.data_analysis_v2 = targetColumnsMetadata[\"data_analysis_v2\"][columnMetadata['column_name']];\n      columnMetadata.warnings = qualityWarnings(columnMetadata.data_analysis_v2);\n      columnMetadata.warningsLength = Object.keys(columnMetadata.warnings).filter(x => columnMetadata.warnings[x]).length;\n\n      return (\n        <MindsPanel\n          className=\"xyz minds-block interactive-title quality\"\n          key={ `key-${columnMetadata['column_name']}` }\n          header={\n            <>\n              <span className=\"width-column-1\">\n                {columnMetadata[\"column_name\"]}\n              </span>\n              {\n                columnMetadata.warningsLength > 0 &&\n                  <div className=\"width-column-2\">\n                  <span className=\"low-span\">{columnMetadata.warningsLength} Warnings&nbsp;</span>\n                  <WarningMark type='yellow' />\n                </div>\n              }\n            </>\n          }\n          sectionName={columnMetadata[\"column_name\"]}\n          columnMetadata={columnMetadata}\n          collapsed={predictorDataQualityCol === columnMetadata[\"column_name\"] ? false : true}\n          noRepeat\n          toggleable\n        >\n          <DataQualityTargetColumn data={columnMetadata} />\n        </MindsPanel>\n      );\n    });\n\n    return (\n      <div className=\"main-content\">\n        <div className=\"header\">\n          <div />\n          <TitleBar>Predictor Data Quality</TitleBar>\n          <Breadcrumbs\n            goToDatasources={this.goToPredictors}\n            dataSourceId='Data Quality'\n            actualSite='Predictors'\n            AditionalItemGoto={this.constructor.goToPredictors}\n            AditionalItemName={predictorStore.data.name}\n          />\n\n        </div>\n        <div className=\"main-content__body data-quality\">\n          <div className=\"data-container\">\n            {dataQualityTargetColumns}\n            {dataQualityInputColumns}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DataQuality;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"primereact/button\";\nimport { Dropdown } from \"primereact/dropdown\";\nimport { observer } from \"mobx-react\";\nimport { Dialog } from \"primereact/dialog\";\nimport { get, sortBy } from 'lodash';\nimport { Mixpanel } from \"../../../utils/mixpanel\";\n\nimport EmptyPage from \"../../common/emptyPage\";\nimport SimpleTable from \"../../common/simpleTable\";\n// import QueryCondition from \"./queryCondition\";\n\nimport \"./index.scss\";\n\n@observer\nclass NewQuery extends Component {\n  static propTypes = {\n    predictorsStore: PropTypes.object.isRequired,\n    predictorStore: PropTypes.object.isRequired,\n    preselectedPredictorName: PropTypes.string,\n    visible: PropTypes.bool.isRequired,\n    onHide: PropTypes.func.isRequired\n  };\n\n  static defaultProps = {\n    preselectedPredictorName: null\n  };\n\n  state = {\n    predictor: 0,\n    predictorFields: [],\n    otherFields: [],\n    conditions: [],\n    checkedFields: []\n  };\n\n  async componentWillMount() {\n    const { preselectedPredictorName } = this.props;\n    const { predictorsStore } = this.props;\n    if (!predictorsStore.loaded) {\n      await predictorsStore.load();\n    }\n    const selectedIndex = predictorsStore.data.findIndex(\n      x => x.name === preselectedPredictorName\n    );\n\n    if (selectedIndex === -1) {\n      this.setState({\n        predictor: selectedIndex,\n        predictorFields: [],\n        otherFields: []\n      });\n      return;\n    }\n\n    await this.setPredictor(selectedIndex);\n  }\n\n  setPredictor = async index => {\n    const { predictorsStore, predictorStore } = this.props;\n\n    const predictorFields = predictorsStore.data[index].predict;\n    // get predictor column types\n    await predictorStore.loadPreview(predictorsStore.data[index]);\n\n    let allColumns = await predictorsStore.getOptionColumns(index);\n    allColumns = allColumns.map(el => el.name);\n    const otherFields = [];\n    allColumns.forEach(el => {\n      if (predictorFields.indexOf(el) === -1) otherFields.push(el);\n    });\n\n    this.setState({\n      predictor: index,\n      predictorFields,\n      otherFields,\n      conditions: []\n    });\n  };\n\n  onChangePredictor = e => {\n    this.setPredictor(e.target.value);\n  };\n\n  onRunQuery = async () => {\n    const { predictor, conditions, predictorFields } = this.state;\n    const { predictorsStore } = this.props;\n    const predictorObj = predictorsStore.data[predictor];\n    this.props.onHide();\n\n    const when = conditions.reduce((result, cond) => {\n      const column = cond.field;\n      if (typeof column === \"string\" && column.length > 0) {\n        result[column] = cond.value;\n      }\n      return result;\n    }, {});\n    const query = predictorsStore.addQuery({\n      when,\n      toGet: predictorFields,\n      pridictorName: predictorObj.name\n    });\n    let fullResult;\n    let error = false;\n    try {\n      fullResult = await predictorObj.queryPredict(when, null, 'new_explain');\n      fullResult = fullResult[0];\n    } catch (err) {\n      fullResult = {};\n      error = true;\n    }\n    predictorsStore.updateQuery(query.index, { fullResult, error });\n    Mixpanel.track(\"Query > Run Query\");\n  };\n\n  setFieldValue = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  render() {\n    const {\n      predictorFields,\n      predictor,\n      checkedFields,\n      conditions\n    } = this.state;\n    const { predictorsStore } = this.props;\n\n    let allFields = [];\n    if (predictor !== -1 && predictorsStore.data[predictor]) {\n      const predictorData = predictorsStore.data[predictor]\n      const columnsMetadata = get(predictorData, 'data_analysis.input_columns_metadata', [])\n\n      allFields = predictorsStore.data[predictor].columns;\n\n      if (allFields) {\n        allFields = allFields.map(item => {\n          const column = columnsMetadata.find(columnItem => columnItem.column_name === item.name)\n          if (column) {\n            item.importance_score = column.importance_score\n          } else {\n            item.importance_score = 0\n          }\n\n          return item\n        })\n\n        allFields = sortBy(allFields, ['importance_score']).reverse()\n      }\n    }\n\n    const { visible, onHide } = this.props;\n\n    const getPredictorFields = () => {\n      if (allFields && allFields.length > 0) {\n        return allFields\n          .map(item => ({\n            label: item.name,\n            value: item.name,\n            data_type: item.data_type,\n            is_target_column: item.is_target_column,\n            distribution: item.distribution,\n            extraFieldValue: { field: item.name, value: null }\n          }))\n          .filter(item => !item.is_target_column);\n      }\n\n      return [];\n    };\n\n    const setSelectedFields = (e, option) => {\n      if (e.checked === false) {\n        option.extraFieldValue.value = null;\n        let { checkedFields } = this.state;\n        checkedFields = checkedFields.filter(\n          checked => checked !== option.label\n        );\n\n        this.setState({ checkedFields });\n        setConditions(option, true);\n      }\n    };\n\n    const setConditions = (option, removeCondition) => {\n      let { conditions } = this.state;\n      const existingCondition = conditions.find(\n        item => item.field === option.field\n      );\n      if (removeCondition) {\n        conditions = conditions.filter(item => item.field !== option.label);\n      } else {\n        if (existingCondition && existingCondition.field) {\n          conditions.map(item => {\n            if (item.field === option.field) {\n              return option;\n            }\n\n            return item;\n          });\n        } else {\n          conditions.push(option);\n        }\n      }\n\n      const newConditions = [];\n      conditions.forEach(item => {\n        if (item && item.value) {\n          newConditions.push(item);\n        }\n      });\n\n      this.setState({ conditions: newConditions });\n    };\n\n    const hasEmptyConditions = !conditions || conditions.length < 1;\n\n    return (\n      <Dialog\n        visible={visible}\n        onHide={onHide}\n        onShow={this.onShow}\n        modal\n        header=\"New Query\"\n        className=\"minds-dialog\"\n        style={{ width: \"500px\" }}\n      >\n        {\" \"}\n        {this.props.predictorsStore.dropdownOptions.length > 0 ? (\n          <>\n            <div className=\"minds-dialog__field\">\n              <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\n                From:\n              </label>\n              <Dropdown\n                inputId=\"cb4\"\n                name=\"predictor\"\n                value={predictor}\n                options={this.props.predictorsStore.dropdownOptions}\n                onChange={this.onChangePredictor}\n                placeholder=\"Select Predictor\"\n                className=\"mdb-select\"\n                style={{ minWidth: 160 }}\n              />\n            </div>\n            <div className=\"minds-dialog__field\">\n              <label htmlFor=\"cb3\" className=\"p-checkbox-label\">\n                Get:\n              </label>\n              <div className=\"grid-cell-centered-v\">\n                {predictorFields.join(\", \")}\n              </div>\n            </div>\n\n            <div className=\"minds-dialog__field\">\n              <label htmlFor=\"cb4\" className=\"p-checkbox-label\">\n                Taking into account the following data:\n              </label>\n            </div>\n            <SimpleTable\n                name=\"queryFields\"\n                filter\n                showExtraFields\n                value={checkedFields}\n                options={getPredictorFields()}\n                onChange={setSelectedFields}\n                onExtraFieldChange={setConditions}\n              />\n\n            <div className=\"new-query__bottom\">\n              <div className=\"separate-btns\" style={{ marginTop: \"24px\" }}>\n                <p />\n                <div>\n                  <Button\n                    className=\"minds-action-btn lg-btn-spacing bold red\"\n                    type=\"button\"\n                    label={\n                      <div className=\"icon-text\">\n                        <span>CANCEL</span>\n                      </div>\n                    }\n                    onClick={onHide}\n                  />\n                  <Button\n                    className=\"minds-action-btn lg-btn-spacing bold\"\n                    type=\"button\"\n                    label=\"RUN QUERY\"\n                    onClick={this.onRunQuery}\n                    disabled={hasEmptyConditions || predictor === -1}\n                  />\n                </div>\n              </div>\n            </div>\n          </>\n        ) : (\n          <>\n            <EmptyPage\n              topMessage=\"There are no Predictors created\"\n              customIcon=\"fa-flushed\"\n              isHasButton={false}\n              noneBorder\n            />\n\n            <div className=\"new-query__bottom\">\n              <div className=\"separate-btns\" style={{ marginTop: \"24px\" }}>\n                <p />\n                <div>\n                  <Button\n                    className=\"minds-action-btn lg-btn-spacing bold red\"\n                    type=\"button\"\n                    label={\n                      <div className=\"icon-text\">\n                        <span>CANCEL</span>\n                      </div>\n                    }\n                    onClick={onHide}\n                  />\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n      </Dialog>\n    );\n  }\n}\n\nexport default NewQuery;\n","import styled from '@emotion/styled';\nimport { Rubik } from '../Fonts';\n\nexport const PieContainer = styled.div`position: relative;`;\n\nexport const TextContainer = styled.div`\n\tposition: absolute;\n\ttop: 125px;\n  left: 1.7rem;\n  @media (max-width: 1150px) {\n    left: 0.4rem;\n    }\n`;\n\nexport const Info = styled.p`\n\ttext-align: center;\n\toverflow-wrap: break-word;\n\twidth: 220px;\n\theight: 20px;\n\tmargin: 0;\n\tfont-size: 18px;\n\tfont-family: ${Rubik};\n\tfont-weight: 500;\n\tfont-stretch: normal;\n\tfont-style: normal;\n`;\n\nexport const InfoConfidence = styled.p`\n\ttext-align: center;\n\toverflow-wrap: break-word;\n\twidth: 220px;\n\theight: 20px;\n\tmargin: 0;\n\tfont-size: 24px;\n\tfont-family: ${Rubik};\n\tfont-weight: 500;\n\tfont-stretch: normal;\n\tfont-style: normal;\n`;\n","import React from 'react';\nimport { ResponsivePie } from '@nivo/pie';\nimport { PieContainer, TextContainer, Info, InfoConfidence } from './styles';\nimport { Colors } from '../Colors';\n\nconst Pie = ({ confidenceInterval, height, data, infoData = '', endAngle = 360 }) => (\n\t<PieContainer style={{ height: height }}>\n\t\t<TextContainer>\n\t\t\t<InfoConfidence>{confidenceInterval}</InfoConfidence>\n\t\t\t<Info>{infoData}</Info>\n\t\t</TextContainer>\n\n\t\t<ResponsivePie\n\t\t\tdata={data}\n\t\t\tmargin={{ top: 0, right: 40, bottom: 0, left: 10 }}\n\t\t\tinnerRadius={0.7}\n\t\t\tpadAngle={0.7}\n\t\t\tcornerRadius={0}\n\t\t\tenableSlicesLabels={false}\n\t\t\tcolors={[ Colors.selectedBreacump, Colors.white ]}\n\t\t\tborderWidth={3}\n\t\t\tborderColor={{ from: 'color', modifiers: [ [ 'darker', 0.2 ] ] }}\n\t\t\tradialLabelsSkipAngle={10}\n\t\t\tfit={false}\n\t\t\tradialLabelsTextXOffset={6}\n\t\t\tradialLabelsTextColor={Colors.BlackPie}\n\t\t\tradialLabelsLinkOffset={-24}\n\t\t\tradialLabelsLinkDiagonalLength={0}\n\t\t\tendAngle={endAngle}\n\t\t\tradialLabelsLinkHorizontalLength={24}\n\t\t\tradialLabelsLinkStrokeWidth={1}\n\t\t\tradialLabelsLinkColor={{ from: 'color' }}\n\t\t\tslicesLabelsSkipAngle={10}\n\t\t\tslicesLabelsTextColor={Colors.BlackPie}\n\t\t\tanimate={true}\n\t\t\tmotionStiffness={90}\n\t\t\tmotionDamping={15}\n\t\t\tdefs={[]}\n\t\t\tfill={[]}\n\t\t/>\n\t</PieContainer>\n);\n\nexport default Pie;\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h3`\n  text-align: left;\n  margin: 0 0 0 -50px;\n`;\n","import React from 'react';\nimport { Title } from './styles';\n\nexport const Subtitle = ({children}) => (\n\t<Title>\n    {children}\n\t</Title>\n);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Moment from \"moment\";\n\nimport { Button } from \"primereact/button\";\n\nimport MindsPanel from \"../../common/mindsPanel\";\nimport Pie from \"../../ui/QueryPie\";\nimport Loading from \"../../ui/Loading\";\nimport { Subtitle } from \"../../ui/SubTitle\";\nimport \"./index.scss\";\n\nclass QueryResult extends Component {\n  static propTypes = {\n    query: PropTypes.object.isRequired,\n    index: PropTypes.number.isRequired,\n    predictorsStore: PropTypes.object.isRequired,\n  };\n\n  static boxColumnTemplate = (rowData, column) => (\n    <div className=\"query-variables-table__variable\">\n      {\" \"}\n      {rowData[column.field]}{\" \"}\n    </div>\n  );\n\n  render() {\n    const { query, index, predictorsStore } = this.props;\n\n    // let forceCharts = [];\n    let headerSub;\n    let donutChartRender = [];\n    let explanation_text = [];\n    let extra_insights_data = [];\n    let important_missing_information_output = [];\n    let isVisibleImportant_missing;\n    let ifMissing;\n\n    if (query.error !== true && query.fullResult) {\n      Object.keys(query.fullResult).forEach((key, _i) => {\n        // const rawData = query.fullResult[key][0][\"confidence_influence_scores\"];\n        // const data = rawData[\"column_names\"].map((name, index) => ({\n        //   // ERROR Cannot read property 'column_names' of undefined\n        //   name,\n        //   value: rawData[\"confidence_variation_score\"][index]\n        // }));\n\n        //query.fullResult[key].forEach(item => {\n        let {\n          predicted_value,\n          confidence,\n          extra_insights,\n          explanation = [],\n        } = query.fullResult[key];\n        const {\n          important_missing_information,\n          confidence_interval,\n        } = explanation;\n\n        isVisibleImportant_missing = important_missing_information;\n        ifMissing = extra_insights.if_missing;\n\n        if (!isNaN(parseFloat(predicted_value))) {\n          predicted_value = parseFloat(predicted_value).toFixed(2);\n        }\n\n        if (extra_insights) {\n          extra_insights_data = extra_insights.if_missing.map((item, index) => (\n            <>\n              <p className=\"p-content-text\" key={index}>\n                If{\" \"}\n                <span className=\"tag tag__default\">{Object.keys(item)[0]}</span>{\" \"}\n                was missing the model would have predicted{\" \"}\n                <span className=\"tag tag__default\">\n                  {item[Object.keys(item)[0]]}\n                </span>\n              </p>\n              <br />\n            </>\n          ));\n        }\n\n        if (explanation && important_missing_information) {\n          important_missing_information.forEach((item) =>\n            important_missing_information_output.push(\n              <div className=\"add-info-item\">\n                <span className=\"tag tag__default\">{item}</span>\n              </div>\n            )\n          );\n        }\n\n        confidence = parseFloat((confidence * 100).toFixed(0));\n        headerSub = `${key}: ${predicted_value} ${confidence}% confident`;\n        const dataPie = [\n          {\n            id: \"\",\n            label: \"confidence\",\n            value: confidence,\n            color: \"hsl(250, 70%, 50%)\",\n          },\n        ];\n        const intervalExplanation =\n          explanation && confidence_interval\n            ? confidence_interval[0].toFixed(0) +\n              \" to \" +\n              confidence_interval[1].toFixed(0)\n            : predicted_value;\n        explanation_text.push(\n          <p className=\"explanation-text\">\n            Using the values listed below, this model predicted{\" \"}\n            <span className=\"tag tag__success\">{key.split(\"_\").join(\" \")}</span>{\" \"}\n            {confidence_interval && `be in range from `}\n            {confidence_interval && (\n              <span className=\"tag tag__success\">\n                {confidence_interval[0].toFixed(0) +\n                  \" - \" +\n                  confidence_interval[1].toFixed(0)}\n              </span>\n            )}{\" \"}\n            with <span className=\"tag tag__success\">{confidence}%</span>{\" \"}\n            confidence.\n          </p>\n        );\n        donutChartRender.push(\n          <div className=\"donut-chart-content\">\n            <Subtitle>{key}</Subtitle>\n            <Pie\n              confidenceInterval={intervalExplanation}\n              infoData={`${dataPie[0].value}% confident`}\n              height={320}\n              data={dataPie}\n              endAngle={(dataPie[0].value * 360) / 100}\n            />\n          </div>\n        );\n        //});\n      });\n    }\n\n    const tableData = Object.keys(query.when).map((key) => ({\n      variable: key,\n      value: query.when[key],\n    }));\n\n    return (\n      <MindsPanel\n        className=\"minds-block interactive-title query-card\"\n        toggleable\n        header={\n          <>\n            <span className=\"width-column-1\">\n              {`From ${query.pridictorName} Get ${query.toGet.join(\", \")}`}{\" \"}\n            </span>\n            <span className=\"width-column-2 label-color\">{headerSub}</span>\n          </>\n        }\n        sectionTitleName={`From ${query.pridictorName} Get ${query.toGet.join(\n          \", \"\n        )}`}\n      >\n        <>\n          {query.loading && <Loading />}\n\n          {query.error && (\n            <div className=\"error-msg\">\n              <i className=\"fas fa-exclamation-triangle\" />\n              <span>Error occurred while executing query</span>\n            </div>\n          )}\n\n          {!query.loading && (\n            <>\n              <div className=\"row\">\n                <div className=\"column-q\">\n                  <div className=\"donut-chart-container\">\n                    {donutChartRender}\n                  </div>\n                  <div>\n                    <div className=\"query-card__body_variables_title\">\n                      Explanation\n                    </div>\n                    {explanation_text}\n                    <div className=\"simple-table-container-q\">\n                      {tableData.map((item, index) => {\n                        return (\n                          <div className=\"simple-row\" key={index}>\n                            <div className=\"simple-column\">\n                              <div className=\"column-content\">\n                                {item.variable}\n                              </div>\n                            </div>{\" \"}\n                            <div className=\"simple-column\">\n                              <div\n                                className={`column-content ${ item.variable !== \"timestamp\" ?  \"\" : \"timestamp-width\" }`}\n                              >\n                                {item.variable !== \"timestamp\"\n                                  ? item.value\n                                  : Moment(item.value).format(\"LLLL\")}\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"column-q\">\n                  {isVisibleImportant_missing && (\n                    <MindsPanel\n                      className=\"minds-block interactive-title query-card\"\n                      header=\"What additional information would help most\"\n                      sectionTitleName=\"What additional information would help most\"\n                      toggleable\n                    >\n                      <p className=\"p-content-text\">\n                        Knowing the value for the following columns would likely\n                        yield more accurate predictions.\n                        <div className=\"add-info-contet\">\n                          {important_missing_information_output}\n                        </div>\n                      </p>\n                    </MindsPanel>\n                  )}\n                  {ifMissing && (\n                    <MindsPanel\n                      className=\"minds-block interactive-title query-card\"\n                      header=\"Extra Insights About This Prediction\"\n                      sectionTitleName=\"Extra Insights About This Prediction\"\n                      toggleable\n                    >\n                      {extra_insights_data}\n                    </MindsPanel>\n                  )}\n                </div>\n              </div>\n            </>\n          )}\n\n          <div className=\"query-card__footer\">\n            <Button\n              type=\"button\"\n              className=\"minds-action-btn red\"\n              label=\"DELETE\"\n              onClick={(e) => {\n                e.preventDefault();\n                predictorsStore.deleteQuery(index);\n              }}\n            />\n          </div>\n        </>\n      </MindsPanel>\n    );\n  }\n}\n\nexport default QueryResult;\n","import { action, observable, computed, runInAction, decorate } from \"mobx\";\nimport MindsDB from \"mindsdb-js-sdk\";\n\nclass PredictorsStore {\n  loading = false;\n  loaded = false;\n  data = [];\n  queries = [];\n\n  loadPromise = new Promise(resolve => resolve());\n\n  fields = [\n    {\n      field: \"name\",\n      header: \"NAME\"\n    },\n    {\n      field: \"data_source\",\n      header: \"DATASOURCE\"\n    },\n    {\n      field: \"predict\",\n      header: \"FIELDS\"\n    },\n    {\n      field: \"status\",\n      header: \"STATUS\"\n    },\n    {\n      field: \"accuracy\",\n      header: \"ACCURACY\"\n    }\n  ];\n\n  reset = () => {\n    this.loading = false;\n    this.loaded = false;\n    this.data = [];\n    this.queries = [];\n  };\n\n  addQuery({ when, toGet, pridictorName }) {\n    const query = {\n      index: this.queries.length,\n      when,\n      toGet,\n      pridictorName,\n      loading: true,\n      fullResult: null\n    };\n    this.queries.push(query);\n    return query;\n  }\n\n  deleteQuery(id) {\n    const index = this.queries.findIndex(el => el.index === id);\n    if (index !== -1) this.queries.splice(index, 1);\n    this.queries = this.queries.map((el, index) => {\n      el.index = index;\n      return el;\n    });\n  }\n\n  updateQuery(index, { fullResult, error }) {\n    const query = this.queries[index];\n    this.queries[index] = {\n      ...query,\n      fullResult,\n      loading: false,\n      error\n    };\n    return this.queries[index];\n  }\n\n  async getOptionColumns(index) {\n    if (this.loaded === false && this.loading === false) {\n      await this.load();\n    } else if (this.loaded === false && this.loading === true) {\n      await this.loadPromise;\n    }\n    if (this.data.length === 0) return [];\n    const pridictor = this.data[index];\n    if (pridictor.columns === null) {\n      await pridictor.loadColumns();\n    }\n    return pridictor.columns.map((el, index) => ({\n      ...el,\n      value: index,\n      id: index\n    }));\n  }\n\n  get dropdownOptions() {\n    return this.data\n      .filter(predictor => predictor.status === \"complete\")\n      .map((el, index) => ({ label: el.name, value: index }));\n  }\n\n  async load(params) {\n    this.loading = true;\n    let loadResolve;\n    this.loadPromise = new Promise(resolve => {\n      loadResolve = resolve;\n    });\n\n    try {\n      const predictors = await MindsDB.predictors(params);\n      console.log(predictors)\n      runInAction(() => {\n        this.data = predictors;\n        this.loading = false;\n        this.loaded = true;\n        loadResolve();\n      });\n    } catch (e) {\n      console.log(e)\n      // window.showError(e);\n      // runInAction(() => {\n      //   this.loading = false;\n      //   loadResolve();\n      // });\n    }\n  }\n}\n\ndecorate(PredictorsStore, {\n  loading: observable,\n  loaded: observable,\n  data: observable,\n  queries: observable,\n  reset: action,\n  addQuery: action,\n  deleteQuery: action,\n  updateQuery: action,\n  load: action,\n  dropdownOptions: computed,\n});\n\nexport default new PredictorsStore();\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { observer } from \"mobx-react\";\nimport { Button } from \"primereact/button\";\nimport { Mixpanel } from \"../../utils/mixpanel\";\nimport { TitleBar } from '../ui/TittleBar';\n\nimport NewQuery from \"./newQuery\";\nimport QueryResult from \"./queryResult\";\n\nimport EmptyPage from \"../common/emptyPage\";\n\nimport predictorsStore from \"../../store/predictors\";\nimport predictorStore from \"../../store/predictor\";\nimport ErrorBoundary from \"../common/utils/ErrorBoundary\";\nimport DarkMode from \"../ui/darkMode\";\n\nimport \"./index.scss\";\n\n@observer\nclass Query extends Component {\n  static propTypes = {\n    preselectedPredictorName: PropTypes.string\n  };\n\n  static defaultProps = {\n    preselectedPredictorName: null\n  };\n\n  state = {\n    newQueryVisible: false\n  };\n\n  showNewQuery = () => {\n    this.setState({\n      newQueryVisible: true\n    });\n    Mixpanel.track(\"Query > Create New one\");\n  };\n\n  hideNewQuery = needReload => {\n    this.setState({\n      newQueryVisible: false\n    });\n    if (needReload) {\n      this.reload();\n    }\n  };\n\n  reload = () => {\n    console.log(\"reload\");\n  };\n\n  render() {\n    const { queries } = predictorsStore;\n    const { preselectedPredictorName } = this.props;\n    const { newQueryVisible } = this.state;\n\n    const queryResults = [];\n    for (let index = queries.length - 1; index >= 0; index--) {\n      queryResults.push(\n        <QueryResult\n          key={`query-${index}`}\n          query={queries[index]}\n          index={index}\n          predictorsStore={predictorsStore}\n        />\n      );\n    }\n\n    return (\n      <ErrorBoundary fullScreen fullPosition >\n        <div className=\"main-content\">\n          <div className=\"header\">\n            <div className=\"content-dm\">\n              <div className=\"dm-items\">\n                <TitleBar>Query</TitleBar>\n              </div>\n              <DarkMode />\n            </div>\n          </div>\n          {queryResults.length === 0 ? (\n            <>\n              <div\n                className=\"main-content__body table-fit-scroll\"\n                style={{\n                  paddingBottom: \"6rem\",\n                  overflow: queryResults.length === 0 ? \"hidden\" : \"auto\"\n                }}\n              >\n                <EmptyPage\n                  topMessage=\"There is nothing here yet.\"\n                  bottomMessage=\"Queries allow you to make predictions for trained models, Click on “New Query” to get started.\"\n                />\n              </div>\n\n              <div className=\"fixed-buttons\">\n                <Button\n                  className=\"minds-action-btn\"\n                  type=\"button\"\n                  icon=\"fas fa-question\"\n                  label=\"NEW QUERY\"\n                  onClick={this.showNewQuery}\n                />\n              </div>\n            </>\n          ) : (\n              <div className=\"main-content__body\">\n                <div className=\"query-container\">\n                  {queryResults}{\" \"}\n                  <div className=\"fixed-buttons\">\n                    <Button\n                      className=\"minds-action-btn\"\n                      type=\"button\"\n                      icon=\"fas fa-question\"\n                      label=\"NEW QUERY\"\n                      onClick={this.showNewQuery}\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n\n          {newQueryVisible && (\n            <NewQuery\n              visible={newQueryVisible}\n              onHide={this.hideNewQuery}\n              predictorsStore={predictorsStore}\n              predictorStore={predictorStore}\n              preselectedPredictorName={preselectedPredictorName}\n            />\n          )}\n        </div>\n      </ErrorBoundary>\n    );\n  }\n}\n\nexport default Query;\n","import styled from '@emotion/styled';\nimport { css } from '@emotion/core';\nimport { Colors } from '../Colors'\nimport { Rubik } from '../Fonts'\n\nconst start = css`\n  height: 40px;\n  border-radius: 5px;\n  border: solid 1px ${Colors.green};\n  background-color: transparent;\n  transition: all ease 0.3s;\n  cursor: pointer;\n  font-size: 1em;\n  padding: 5px 20px;\n  font-weight: normal;\n  font-style: normal;\n  font-stretch: normal;\n  letter-spacing: normal;\n  color: ${Colors.green};\n  &:hover {\n    color: white;\n    background-color: ${Colors.green};\n    svg {\n      fill: ${Colors.white};\n    }\n  }\n`\n\nconst help = css`\n  margin-bottom: 2.5rem;\n  margin-left: 20px;\n  margin-right: 20px;\n  height: 32px;\n  border-radius: 7px;\n  cursor: pointer;\n  background-color: #f25c63;\n  border-color: rgb(216, 216, 216) rgb(209, 209, 209) rgb(186, 186, 186);\n  border-style: solid;\n  border-width: 1px;\n  padding: 1px 7px 2px;\n  color: ${Colors.white};\n  word-break: keep-all;\n  font-family: ${Rubik};\n  font-size: 12px;\n  font-weight: normal;\n  font-stretch: normal;\n  font-style: normal;\n  letter-spacing: normal;\n  &:hover {\n    background-color: #ee2d36;\n  }\n`\n\nconst buttonStylesType = {\n  start,\n  help\n}\n\nconst getBackgroungColor = (props) => {\n  const {\n    disabled,\n    backgroundColor,\n  } = props\n  if (disabled) {\n    return 'transparent'\n  }\n\n  if (backgroundColor) {\n    return backgroundColor\n  }\n\n  return 'transparent'\n}\n\nexport const CustomButton = styled.button`\n  ${props => buttonStylesType[props.stylesType]};\n\n  &:hover {\n    color: ${props => props.disabled ? Colors.mirage : Colors.lightGreen};\n    background-color: ${props => props.disabled ? getBackgroungColor(props) : (props.backgroundColorHover || props.backgroundColor)};\n\n    border: ${props => props.disabled ? `1px solid ${Colors.mirage}` : `1px solid ${Colors.lightGreen}`};\n    svg {\n      path {\n        fill: ${props => props.fillIconColorHover || Colors.white};\n      }\n    }\n  }\n\n  svg {\n    path {\n      fill: ${props => props.fillIconColor || Colors.white};\n    }\n  }\n`\n","import React from 'react';\nimport { CustomButton } from './styles'\n\nexport const ButtonComponent = (props) => {\n  const {\n    children,\n    icon,\n    callback,\n    ariaLabel,\n    disabled,\n    fillIconColor,\n    fillIconColorHover,\n    backgroundColor,\n    backgroundColorHover,\n    type = 'button',\n  } = props\n\n  const Icon = icon\n  return (\n    <CustomButton\n      {...props}\n      onClick={() => disabled ? () => {} : callback && callback()}\n      aria-label={ariaLabel}\n      fillIconColor={fillIconColor}\n      fillIconColorHover={fillIconColorHover}\n      backgroundColor={backgroundColor}\n      backgroundColorHover={backgroundColorHover}\n      disabled={disabled}\n      type={type}\n    >\n      {\n        icon\n          ? <Icon />\n          : children\n      }\n    </CustomButton>\n  )\n}\n\n","import styled from '@emotion/styled';\n\nimport { Colors } from \"../../ui/Colors\";\nimport { Karla } from \"../../ui/Fonts\";\n\nexport const SidebarContainer = styled.div`\n  color: ${Colors.mirage};\n  margin: 0 auto;\n  margin-bottom: 162px;\n  width: 80%;\n  height: 210px;\n  font-family: ${Karla};\n  font-size: 14px;\n  font-weight: normal;\n  font-stretch: normal;\n  font-style: normal;\n  line-height: 1.29;\n  letter-spacing: normal;\n\n  p {\n      text-align: left;\n      color: ${Colors.slateGrey};\n      a {\n      display: block;\n      color: #4dd9ca;\n      font-size: 14px;\n      font-weight: bold;\n      margin-top: 10px;\n      outline: none;\n      border: none;\n      font-weight: bold;\n      cursor: pointer;\n    }\n  }\n`\n","import React from 'react';\n\nimport withContext from '../../../HOC/withContext';\nimport { SidebarContainer } from './styles';\n\nconst SidebarContent = (props) => {\n  const { context } = props;\n  const openLink = (url) => {\n    // require('electron').shell.openExternal(url);\n  }\n\n  return (\n    <>\n      {context && context.sidebarContent && (\n        <SidebarContainer>\n          <strong>{context.sidebarContent.title}</strong>\n          <p>\n            {context.sidebarContent.paragraph}\n            {context.sidebarContent.url && (\n              <a\n                href=\"/\"\n                onClick={() =>\n                  openLink(context.sidebarContent.url)\n                }\n              >\n                Read more\n              </a>\n            )}\n          </p>\n        </SidebarContainer>)\n      }\n    </>\n)};\n\nexport default withContext(SidebarContent);\n","import React from 'react';\n\nexport const MenuItem = ({ items, onMenuClick, connected }) => {\n  const menu = items.reduce((prev, next) => {\n    prev.push(\n      <li\n        key={next.key}\n        className={`${next.active ? \"minds-menu__active\" : \"\"} ${\n          next.disabled ? \"minds-menu__disabled\" : \"\"\n        }`}\n      >\n        <a\n          className=\"minds-menu__a\"\n          role=\"button\"\n          onClick={(e) => {\n            e.preventDefault();\n            if (next.disabled) {\n              return;\n            }\n            onMenuClick(next.key);\n          }}\n          href=\"/\"\n        >\n          <div className=\"minds-menu__a_mainitem\">\n            {next.icon.type === \"FontAwesome\" ? (\n              <span className=\"minds-menu__icon\">\n                <i className={`fas fa-${next.icon.name}`} />\n              </span>\n            ) : (\n              <img className=\"minds-menu__icon\" src={next.icon} alt=\"\" />\n            )}\n            <span>{next.label}</span>\n            {next.label === \"Connection\" && (\n              <span\n                className={`connectionStatusDot ${\n                  connected ? \"connected\" : \"disconnected\"\n                }`}\n              ></span>\n            )}\n          </div>\n        </a>\n      </li>\n    );\n    return prev;\n  }, []);\n  return menu;\n}\n","import styled from '@emotion/styled';\nimport React from \"react\";\n\nexport const SeparationDiv = styled.div`\n  flex: 1;\n`;\n\nexport const Img = styled.img`\n  max-width: 150px;\n  height: auto;\n`;\n\nexport const HelpButton = (\n  <div>\n    <span>HELP US IMPROVE</span>\n    <i className=\"fas fa-bug\" />\n    <span className=\"divider\">/</span>\n    <i className=\"fas fa-lightbulb\" />\n  </div>\n);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { ButtonComponent } from \"../ui/Button\";\nimport  SidebarContent from \"../ui/SidebarContent\";\nimport { MenuItem } from \"../menuItems\";\nimport { SeparationDiv, HelpButton , Img} from \"./styles\"\nimport mindsdblogo from '../../assets/mindsdb-logo.svg'\n\n\nimport \"./index.scss\";\n// const { shell } = require(\"electron\");\n\nconst MindsMenu = ({ items, onMenuClick, connectionStore, classUl }) => {\n  const openJira = (e) => {\n    // shell.openExternal(\n    //   \"https://mindsdb.atlassian.net/servicedesk/customer/portals\"\n    // );\n  };\n\n  const { connected } = connectionStore;\n\n  return (\n    <div className=\"minds-menu-holder\">\n      <div className=\"logo-holder\">\n        <Img\n          src={mindsdblogo}\n          alt=\"logo\"\n        />\n      </div>\n      <ul className={`${classUl} minds-menu`}>\n        <MenuItem\n          items={items}\n          onMenuClick={onMenuClick}\n          connected={connected}\n        />\n      </ul>\n      <SeparationDiv />\n\n      <SidebarContent />\n\n      <ButtonComponent\n        stylesType=\"help\"\n        callback={openJira}\n      >\n        {HelpButton}\n      </ButtonComponent>\n    </div>\n  );\n};\n\nMindsMenu.propTypes = {\n  connectionStore: PropTypes.object.isRequired,\n  items: PropTypes.array.isRequired,\n  onMenuClick: PropTypes.func.isRequired,\n  className: PropTypes.string\n}\n\nexport default MindsMenu;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { observer } from \"mobx-react\";\nimport \"./index.scss\";\n\nimport Config from \"../config\";\nimport Datasources from \"../datasources\";\nimport Databases from \"../databases\";\nimport DataSourcePreview from \"../dataSourcePreview\";\nimport DataSourceQuality from \"../dataSourceQuality\";\nimport Predictors from \"../predictors\";\nimport PredictorView from \"../predictorView\";\nimport PredictorDataQuality from \"../predictorDataQuality\";\nimport Query from \"../query\";\nimport MindsMenu from \"../mindsMenu\";\n\nimport connectionStore from \"../../store/connection\";\nimport dataSourcesStore from \"../../store/dataSources\";\nimport dataSourceStore from \"../../store/dataSource\";\nimport predictorsStore from \"../../store/predictors\";\nimport predictorStore from \"../../store/predictor\";\nimport navigation from \"../../store/navigation\";\nimport { menuItems } from './menuItems';\n\nimport Loading from \"../ui/Loading\"\n\n@observer\nclass Main extends Component {\n  static propTypes = {\n    configStore: PropTypes.object.isRequired\n  };\n\n  state = {};\n\n  componentDidMount() {\n    setTimeout(() => navigation.setStage(\"config\") , 500)\n  }\n\n  setStage = stage => {\n    navigation.setStage(stage);\n  };\n\n  goToConnect= () => {\n    this.setStage(\"config\");\n  }\n\n  render() {\n    const { stage, predictor, dataSource, queryPredictorName } = navigation;\n    const { connected } = connectionStore;\n    const { configStore } = this.props;\n\n    const emptyBlock = (\n      <div\n        style={{\n          height: \"100%\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          flexDirection: \"column\"\n        }}\n      >\n          <Loading />\n          <p className=\"empty__version\">Version {configStore.config.version}</p>\n\n      </div>\n    );\n    const items = menuItems(stage, dataSource, connected, predictor);\n    return (\n      <div className=\"main-block\">\n        <MindsMenu\n          classUl=\"main-block__menu\"\n          items={items}\n          onMenuClick={this.setStage}\n          connectionStore={connectionStore}\n        />\n        <div className=\"main-block__body\">\n          {stage === \"config\" && (\n            <Config\n              dataSourcesStore={dataSourcesStore}\n              connectionStore={connectionStore}\n              configStore={configStore}\n              predictorsStore={predictorsStore}\n            />\n          )}\n          {stage === \"datasources\" && (\n            <Datasources dataSourcesStore={dataSourcesStore} />\n          )}\n          {stage === \"databases\" && (\n            <Databases dataSourcesStore={dataSourcesStore} />\n          )}\n          {stage === \"dataSourcePreview\" && (\n            <DataSourcePreview />\n          )}\n          {stage === \"dataSourceQuality\" && (\n            <DataSourceQuality\n              dataSourceStore={dataSourceStore}\n              dataSourcesStore={dataSourcesStore}\n            />\n          )}\n          {stage === \"predictors\" && (\n            <Predictors predictorsStore={predictorsStore} />\n          )}\n          {stage === \"predictorView\" && (\n            <PredictorView\n              predictorStore={predictorStore}\n              predictor={predictor}\n            />\n          )}\n          {stage === \"predictorDataQuality\" && <PredictorDataQuality />}\n          {stage === \"query\" && (\n            <Query\n              dataSource={dataSource}\n              preselectedPredictorName={queryPredictorName}\n              ref={r => {\n                this.queryPanelRef = r;\n              }}\n            />\n          )}\n          {stage === \"empty\" && emptyBlock}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","export const menuItems = (stage, dataSource, connected, predictor) => [\n\t{\n\t\tlabel: 'Connection',\n\t\tkey: 'config',\n\t\tactive: stage === 'config',\n\t\ticon: {\n\t\t\ttype: 'FontAwesome',\n\t\t\tname: 'satellite-dish'\n\t\t}\n  },\n  {\n\t\tlabel: 'Databases',\n\t\tkey: 'databases',\n\t\tactive: stage === 'databases' || stage === 'DatabasesPreview' || stage === 'DatabasesQuality',\n\t\ticon: {\n\t\t\ttype: 'FontAwesome',\n\t\t\tname: 'database'\n\t\t},\n\t\tdisabled: !connected,\n\t\titems: dataSource === null ? undefined : [ dataSource ]\n\t},\n\t{\n\t\tlabel: 'Datasets',\n\t\tkey: 'datasources',\n\t\tactive: stage === 'datasources' || stage === 'dataSourcePreview' || stage === 'dataSourceQuality',\n\t\ticon: {\n\t\t\ttype: 'FontAwesome',\n\t\t\tname: 'cubes'\n\t\t},\n\t\tdisabled: !connected,\n\t\titems: dataSource === null ? undefined : [ dataSource ]\n\t},\n\t{\n\t\tlabel: 'Predictors',\n\t\tkey: 'predictors',\n\t\tactive: stage === 'predictors' || stage === 'predictorView' || stage === 'predictorDataQuality',\n\t\ticon: {\n\t\t\ttype: 'FontAwesome',\n\t\t\tname: 'parking'\n\t\t},\n\t\tdisabled: !connected,\n\t\titems: predictor === null ? undefined : [ predictor ]\n\t},\n\t{\n\t\tlabel: 'Query',\n\t\tkey: 'query',\n\t\tdisabled: !connected,\n\t\tactive: stage === 'query',\n\t\ticon: {\n\t\t\ttype: 'FontAwesome',\n\t\t\tname: 'question'\n\t\t}\n\t}\n];\n","import React, { Component } from 'react';\nimport { Dialog } from 'primereact/dialog';\nimport { Button } from 'primereact/button';\nimport './index.scss';\n\n// const ipcRenderer = require('electron').ipcRenderer;\n// const ipcRendererCurrent = require('electron').remote.getCurrentWebContents();\n\n/**\n * controller of updating process\n */\nclass Updater extends Component {\n  state = {\n    checking: false,\n    available: null,  // [true|false|null]\n    error: false,\n\n    downloaded: false,\n    downloading: false,\n    progress: null,\n\n    updateUrl: null,\n\n    confirmInstallWindowVisible: false,\n    confirmDownloadWindowVisible: false\n  };\n\n  componentWillMount() {\n    // ipcRenderer.on('updater', (e, data) => {\n    //   switch (data.type) {\n    //     case 'checking-for-update':\n    //       this.setState({\n    //         checking: true\n    //       });\n    //       break;\n    //     case 'update-available':\n    //       this.setState({\n    //         checking: false,\n    //         available: true\n    //       }, this.showDownloadWindow);\n    //       break;\n    //     case 'update-not-available':\n    //       this.setState({\n    //         checking: false,\n    //         available: false\n    //       });\n    //       break;\n    //     case 'update-downloaded':\n    //       this.setState({\n    //         downloaded: true,\n    //         downloading: false\n    //       }, this.showInstallWindow);\n    //       break;\n    //     case 'download-progress':\n    //       // progressObj = {\n    //       //   bytesPerSecond\n    //       //   percent\n    //       //   total\n    //       //   transferred\n    //       // }\n    //       this.setState({\n    //         progress: `${(100 * data.payload.transferred / data.payload.total).toFixed(1)}%`\n    //       });\n    //       break;\n    //     case 'update-available-by-url':\n    //       this.setState({\n    //         updateUrl: data.payload\n    //       });\n    //       break;\n    //     case 'error':\n    //       this.setState({\n    //         checking: false,\n    //         downloading: false,\n    //         error: true\n    //       });\n    //       break;\n    //     default:\n    //       break;\n    //   }\n    // });\n  }\n\n  componentDidMount() {\n    // ipcRendererCurrent.emit('renderDone');\n  }\n\n  onStartDownload = () => {\n    // ipcRenderer.send('doStartUpdateDownload');\n  };\n\n  onStartInstall = () => {\n    // ipcRenderer.send('doStartUpdate');\n  };\n\n  showInstallWindow = () => {\n    this.setState({\n      confirmInstallWindowVisible: true\n    });\n  };\n\n  hideInstallWindow = () => {\n    this.setState({\n      confirmInstallWindowVisible: false\n    });\n  };\n\n  showDownloadWindow = () => {\n    this.setState({\n      confirmDownloadWindowVisible: true\n    });\n  };\n\n  hideDownloadWindow = () => {\n    this.setState({\n      confirmDownloadWindowVisible: false\n    });\n  };\n\n  closeErrorMessage = () => {\n    this.setState({\n      error: false\n    });\n  };\n\n  render() {\n    const {\n      checking,\n      available,\n      error,\n      downloaded,\n      downloading,\n      progress,\n      updateUrl\n    } = this.state;\n\n    return (\n      <div\n        className=\"updater\"\n        style={{\n          display: checking || error || available || updateUrl || downloaded || downloading || progress ? undefined : 'none'\n        }}\n      >\n        <div className=\"updater__notice\">\n          {\n            checking && 'checking for update...'\n          } {\n            error && 'error while update checking or downloading'\n          } {\n            available && downloaded === false && downloading === false && 'update available'\n          } {\n            downloaded && 'update downloaded'\n          } {\n            downloading && `update downloading progress: ${progress || 0}`\n          } {\n            updateUrl && (\n              <div>\n                update available by\n                <a href={ updateUrl }>\n                  link\n                </a>\n              </div>\n            )\n          }\n          {\n            error && (\n              <Button\n                label=\"\"\n                icon=\"pi pi-times\"\n                className=\"p-button-secondary updater__closebtn\"\n                onClick={ this.closeErrorMessage }\n              />\n            )\n          }\n        </div>\n        <Dialog\n          header=\"Update\"\n          visible={ this.state.confirmInstallWindowVisible }\n          appendTo={ document.body }\n          modal\n          onHide={ this.hideInstallWindow }\n        >\n          <div>Update downloaded. Install it now?</div>\n          <div\n            className=\"separate-btns\"\n          >\n            <Button\n              label=\"Cancel\"\n              onClick={ this.hideInstallWindow }\n              className=\"p-button-secondary\"\n            />\n            <Button\n              label=\"Ok\"\n              onClick={ this.onStartInstall }\n              className=\"p-button-success\"\n            />\n          </div>\n        </Dialog>\n        <Dialog\n          header=\"Update\"\n          visible={ this.state.confirmDownloadWindowVisible }\n          appendTo={ document.body }\n          modal\n          onHide={ this.hideDownloadWindow }\n        >\n          <div>Update available. Download it now?</div>\n          <div\n            className=\"separate-btns\"\n          >\n            <Button\n              label=\"Cancel\"\n              onClick={ this.hideDownloadWindow }\n              className=\"p-button-secondary\"\n            />\n            <Button\n              label=\"Ok\"\n              onClick={ this.onStartDownload }\n              className=\"p-button-success\"\n            />\n          </div>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nexport default Updater;\n","import update from 'immutability-helper';\n\nconst sidebarContent = (context) => ({\n  title: '',\n  paragraph: '',\n  url: '',\n  setAnyValue: (states, callback) => {\n    context.setState({\n      sidebarContent: update(context.state.sidebarContent, states),\n    }, () => {\n      if (callback) {\n        callback()\n      }\n    })\n  },\n})\n\nexport default sidebarContent\n","import sidebarContent from './initialState/sidebarContent';\n\nconst state = (context, window) => ({\n  sidebarContent: sidebarContent(context, window)\n})\n\nexport default state\n","import React, { Component } from 'react';\nimport { configure } from 'mobx';\nimport { Growl } from 'primereact/growl';\nimport * as firebase from 'firebase';\nimport * as Sentry from '@sentry/browser';\n\nimport './App.scss';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\n\nimport Main from './components/main';\nimport Updater from './components/updater';\n\nimport configStore from './store/config';\nimport state from './context/state';\nimport { GeneralContext } from './context';\n// import isDev from 'electron-is-dev'\nimport { environment } from './config';\n\nconst env = 'Development';\nfirebase.initializeApp(configStore.firebaseConfig);\nSentry.init({dsn: \"https://fa3929d33e824cc3af5f0b9e4d0266d8@o404567.ingest.sentry.io/5268699\", environment: env});\n\nconfigure({ enforceActions: 'observed' });  // observed always\n\n// const ipcRenderer = require('electron').ipcRenderer;\n\nclass App extends Component {\n  state = {\n    mounted: false\n  };\n\n  componentDidMount() {\n    this.setState({\n      ...state(this, window),\n      mounted: true\n    });\n    // ipcRenderer.send('get-config');\n  }\n\n  setGrowlRef = (el) => {\n    // waiting until growl initialized, to have opportunity show errors than other components initializing\n    // window.growl = el;\n    // window.showDummy = () => {\n    //   window.growl.show({ severity: 'info', summary: 'notice', detail: 'not implemented' });\n    // };\n    // window.showError = (e) => {\n    //   console.error('showError', e);\n    //   if (e && e.message) {\n    //     console.error({ severity: 'error', summary: 'error', detail: e.message });\n    //   } else {\n    //     console.error({ severity: 'error', summary: 'error', detail: 'Unexpcted error' });\n    //   }\n    // };\n  }\n\n  render() {\n    const { mounted } = this.state;\n    return (\n      <GeneralContext.Provider value={{...this.state}}>\n        <div className=\"App\">\n          <Growl\n            ref={ this.setGrowlRef }\n            position=\"bottomright\"\n          />\n          {\n            mounted && ([\n              <Updater key=\"a2\" />,\n              <Main key=\"a3\" configStore={ configStore } />\n            ])\n          }\n        </div>\n      </GeneralContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\n\nimport { defaults } from 'react-chartjs-2';\n\ndefaults.global.defaultFontFamily = 'Rubik Medium';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}